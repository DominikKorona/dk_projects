
OLED_Universal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000014  08003eb0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08003eb0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7da  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae0  00000000  00000000  0002b81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f39  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d184  00000000  00000000  00044589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087498  00000000  00000000  0005170d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c4  00000000  00000000  000d8bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080030f4 	.word	0x080030f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080030f4 	.word	0x080030f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fdee 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f84a 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f90a 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8de 	bl	80006ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f0:	f000 f8ae 	bl	8000650 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80004f4:	f000 fa8e 	bl	8000a14 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		SSD1306_Clear();
 80004f8:	f000 fc20 	bl	8000d3c <SSD1306_Clear>
		HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000500:	f000 fe50 	bl	80011a4 <HAL_Delay>
		SSD1306_GotoXY (35,0);
 8000504:	2100      	movs	r1, #0
 8000506:	2023      	movs	r0, #35	; 0x23
 8000508:	f000 f96d 	bl	80007e6 <SSD1306_GotoXY>
		SSD1306_Puts ("SCOREbith", &Font_11x18, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	4919      	ldr	r1, [pc, #100]	; (8000574 <main+0x98>)
 8000510:	4819      	ldr	r0, [pc, #100]	; (8000578 <main+0x9c>)
 8000512:	f000 f985 	bl	8000820 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000516:	f000 fb41 	bl	8000b9c <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f000 fe41 	bl	80011a4 <HAL_Delay>
		SSD1306_ToggleInvert();
 8000522:	f000 fb69 	bl	8000bf8 <SSD1306_ToggleInvert>
		SSD1306_UpdateScreen();
 8000526:	f000 fb39 	bl	8000b9c <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fe39 	bl	80011a4 <HAL_Delay>
		SSD1306_ToggleInvert();
 8000532:	f000 fb61 	bl	8000bf8 <SSD1306_ToggleInvert>
		SSD1306_UpdateScreen();
 8000536:	f000 fb31 	bl	8000b9c <SSD1306_UpdateScreen>
		SSD1306_DrawCircle(64, 32, 10, SSD1306_COLOR_WHITE);
 800053a:	2301      	movs	r3, #1
 800053c:	220a      	movs	r2, #10
 800053e:	2120      	movs	r1, #32
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f000 f992 	bl	800086a <SSD1306_DrawCircle>
		HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fe2b 	bl	80011a4 <HAL_Delay>
		SSD1306_UpdateScreen();
 800054e:	f000 fb25 	bl	8000b9c <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f000 fe25 	bl	80011a4 <HAL_Delay>
		SSD1306_ToggleInvert();
 800055a:	f000 fb4d 	bl	8000bf8 <SSD1306_ToggleInvert>
		SSD1306_UpdateScreen();
 800055e:	f000 fb1d 	bl	8000b9c <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fe1d 	bl	80011a4 <HAL_Delay>
		SSD1306_ToggleInvert();
 800056a:	f000 fb45 	bl	8000bf8 <SSD1306_ToggleInvert>
		SSD1306_UpdateScreen();
 800056e:	f000 fb15 	bl	8000b9c <SSD1306_UpdateScreen>
		SSD1306_Clear();
 8000572:	e7c1      	b.n	80004f8 <main+0x1c>
 8000574:	20000000 	.word	0x20000000
 8000578:	0800310c 	.word	0x0800310c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fdaa 	bl	80030e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ec:	2310      	movs	r3, #16
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fdf0 	bl	80021e8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060e:	f000 f8e5 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f852 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 f8cf 	bl	80007dc <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f001 f831 	bl	80016f4 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f8a0 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000030 	.word	0x20000030
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00061a80 	.word	0x00061a80

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f002 fa18 	bl	8002b18 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f875 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xd4>)
 800078c:	f000 ff98 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xd8>)
 80007a8:	f000 fe06 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xd4>)
 80007c4:	f000 fdf8 	bl	80013b8 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>

080007e6 <SSD1306_GotoXY>:
        }
    }
}


void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	460a      	mov	r2, r1
 80007f0:	80fb      	strh	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
//	SSD1306.CurrentX = x;
//	SSD1306.CurrentY = y;
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	6039      	str	r1, [r7, #0]
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4613      	mov	r3, r2
 8000810:	71bb      	strb	r3, [r7, #6]
//	/* Increase pointer */
//	SSD1306.CurrentX += Font->FontWidth;
//
//	/* Return character written */
//	return ch;
}
 8000812:	bf00      	nop
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4613      	mov	r3, r2
 800082c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800082e:	e012      	b.n	8000856 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	68b9      	ldr	r1, [r7, #8]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffe2 	bl	8000802 <SSD1306_Putc>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d002      	beq.n	8000850 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	e008      	b.n	8000862 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e8      	bne.n	8000830 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	781b      	ldrb	r3, [r3, #0]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800086a:	b590      	push	{r4, r7, lr}
 800086c:	b087      	sub	sp, #28
 800086e:	af00      	add	r7, sp, #0
 8000870:	4604      	mov	r4, r0
 8000872:	4608      	mov	r0, r1
 8000874:	4611      	mov	r1, r2
 8000876:	461a      	mov	r2, r3
 8000878:	4623      	mov	r3, r4
 800087a:	80fb      	strh	r3, [r7, #6]
 800087c:	4603      	mov	r3, r0
 800087e:	80bb      	strh	r3, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	807b      	strh	r3, [r7, #2]
 8000884:	4613      	mov	r3, r2
 8000886:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	f1c3 0301 	rsb	r3, r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	461a      	mov	r2, r3
 800089a:	03d2      	lsls	r2, r2, #15
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80008ac:	88f8      	ldrh	r0, [r7, #6]
 80008ae:	88ba      	ldrh	r2, [r7, #4]
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	787a      	ldrb	r2, [r7, #1]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f000 f9df 	bl	8000c7c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80008be:	88f8      	ldrh	r0, [r7, #6]
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	787a      	ldrb	r2, [r7, #1]
 80008ca:	4619      	mov	r1, r3
 80008cc:	f000 f9d6 	bl	8000c7c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	4413      	add	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	88b9      	ldrh	r1, [r7, #4]
 80008da:	787a      	ldrb	r2, [r7, #1]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f9cd 	bl	8000c7c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	88b9      	ldrh	r1, [r7, #4]
 80008ec:	787a      	ldrb	r2, [r7, #1]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f9c4 	bl	8000c7c <SSD1306_DrawPixel>

    while (x < y) {
 80008f4:	e081      	b.n	80009fa <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80008f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0e      	blt.n	800091c <SSD1306_DrawCircle+0xb2>
            y--;
 80008fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000902:	b29b      	uxth	r3, r3
 8000904:	3b01      	subs	r3, #1
 8000906:	b29b      	uxth	r3, r3
 8000908:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800090a:	8a7b      	ldrh	r3, [r7, #18]
 800090c:	3302      	adds	r3, #2
 800090e:	b29b      	uxth	r3, r3
 8000910:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000912:	8afa      	ldrh	r2, [r7, #22]
 8000914:	8a7b      	ldrh	r3, [r7, #18]
 8000916:	4413      	add	r3, r2
 8000918:	b29b      	uxth	r3, r3
 800091a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800091c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000928:	8abb      	ldrh	r3, [r7, #20]
 800092a:	3302      	adds	r3, #2
 800092c:	b29b      	uxth	r3, r3
 800092e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000930:	8afa      	ldrh	r2, [r7, #22]
 8000932:	8abb      	ldrh	r3, [r7, #20]
 8000934:	4413      	add	r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	8a3b      	ldrh	r3, [r7, #16]
 800093e:	4413      	add	r3, r2
 8000940:	b298      	uxth	r0, r3
 8000942:	88ba      	ldrh	r2, [r7, #4]
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	787a      	ldrb	r2, [r7, #1]
 800094c:	4619      	mov	r1, r3
 800094e:	f000 f995 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	8a3b      	ldrh	r3, [r7, #16]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b298      	uxth	r0, r3
 800095a:	88ba      	ldrh	r2, [r7, #4]
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	4413      	add	r3, r2
 8000960:	b29b      	uxth	r3, r3
 8000962:	787a      	ldrb	r2, [r7, #1]
 8000964:	4619      	mov	r1, r3
 8000966:	f000 f989 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 800096a:	88fa      	ldrh	r2, [r7, #6]
 800096c:	8a3b      	ldrh	r3, [r7, #16]
 800096e:	4413      	add	r3, r2
 8000970:	b298      	uxth	r0, r3
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b29b      	uxth	r3, r3
 800097a:	787a      	ldrb	r2, [r7, #1]
 800097c:	4619      	mov	r1, r3
 800097e:	f000 f97d 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b298      	uxth	r0, r3
 800098a:	88ba      	ldrh	r2, [r7, #4]
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	787a      	ldrb	r2, [r7, #1]
 8000994:	4619      	mov	r1, r3
 8000996:	f000 f971 	bl	8000c7c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800099a:	88fa      	ldrh	r2, [r7, #6]
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	4413      	add	r3, r2
 80009a0:	b298      	uxth	r0, r3
 80009a2:	88ba      	ldrh	r2, [r7, #4]
 80009a4:	8a3b      	ldrh	r3, [r7, #16]
 80009a6:	4413      	add	r3, r2
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	787a      	ldrb	r2, [r7, #1]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f000 f965 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80009b2:	88fa      	ldrh	r2, [r7, #6]
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b298      	uxth	r0, r3
 80009ba:	88ba      	ldrh	r2, [r7, #4]
 80009bc:	8a3b      	ldrh	r3, [r7, #16]
 80009be:	4413      	add	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	787a      	ldrb	r2, [r7, #1]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f000 f959 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 80009ca:	88fa      	ldrh	r2, [r7, #6]
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	4413      	add	r3, r2
 80009d0:	b298      	uxth	r0, r3
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	8a3b      	ldrh	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	787a      	ldrb	r2, [r7, #1]
 80009dc:	4619      	mov	r1, r3
 80009de:	f000 f94d 	bl	8000c7c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80009e2:	88fa      	ldrh	r2, [r7, #6]
 80009e4:	89fb      	ldrh	r3, [r7, #14]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b298      	uxth	r0, r3
 80009ea:	88ba      	ldrh	r2, [r7, #4]
 80009ec:	8a3b      	ldrh	r3, [r7, #16]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	787a      	ldrb	r2, [r7, #1]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 f941 	bl	8000c7c <SSD1306_DrawPixel>
    while (x < y) {
 80009fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	f6ff af77 	blt.w	80008f6 <SSD1306_DrawCircle+0x8c>
    }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
	...

08000a14 <SSD1306_Init>:
}




uint8_t SSD1306_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a1a:	f000 f999 	bl	8000d50 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a22:	2201      	movs	r2, #1
 8000a24:	2178      	movs	r1, #120	; 0x78
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <SSD1306_Init+0x180>)
 8000a28:	f001 f8a6 	bl	8001b78 <HAL_I2C_IsDeviceReady>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e0a9      	b.n	8000b8a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000a36:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a3c:	e002      	b.n	8000a44 <SSD1306_Init+0x30>
		p--;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f9      	bne.n	8000a3e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a4a:	22ae      	movs	r2, #174	; 0xae
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2078      	movs	r0, #120	; 0x78
 8000a50:	f000 f9fa 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	2078      	movs	r0, #120	; 0x78
 8000a5a:	f000 f9f5 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a5e:	2210      	movs	r2, #16
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f000 f9f0 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a68:	22b0      	movs	r2, #176	; 0xb0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f000 f9eb 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a72:	22c8      	movs	r2, #200	; 0xc8
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 f9e6 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	; 0x78
 8000a82:	f000 f9e1 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a86:	2210      	movs	r2, #16
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	; 0x78
 8000a8c:	f000 f9dc 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a90:	2240      	movs	r2, #64	; 0x40
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 f9d7 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a9a:	2281      	movs	r2, #129	; 0x81
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	; 0x78
 8000aa0:	f000 f9d2 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	; 0x78
 8000aaa:	f000 f9cd 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000aae:	22a1      	movs	r2, #161	; 0xa1
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	; 0x78
 8000ab4:	f000 f9c8 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ab8:	22a6      	movs	r2, #166	; 0xa6
 8000aba:	2100      	movs	r1, #0
 8000abc:	2078      	movs	r0, #120	; 0x78
 8000abe:	f000 f9c3 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ac2:	22a8      	movs	r2, #168	; 0xa8
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	; 0x78
 8000ac8:	f000 f9be 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000acc:	223f      	movs	r2, #63	; 0x3f
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2078      	movs	r0, #120	; 0x78
 8000ad2:	f000 f9b9 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ad6:	22a4      	movs	r2, #164	; 0xa4
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2078      	movs	r0, #120	; 0x78
 8000adc:	f000 f9b4 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ae0:	22d3      	movs	r2, #211	; 0xd3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2078      	movs	r0, #120	; 0x78
 8000ae6:	f000 f9af 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2078      	movs	r0, #120	; 0x78
 8000af0:	f000 f9aa 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000af4:	22d5      	movs	r2, #213	; 0xd5
 8000af6:	2100      	movs	r1, #0
 8000af8:	2078      	movs	r0, #120	; 0x78
 8000afa:	f000 f9a5 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000afe:	22f0      	movs	r2, #240	; 0xf0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2078      	movs	r0, #120	; 0x78
 8000b04:	f000 f9a0 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b08:	22d9      	movs	r2, #217	; 0xd9
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2078      	movs	r0, #120	; 0x78
 8000b0e:	f000 f99b 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b12:	2222      	movs	r2, #34	; 0x22
 8000b14:	2100      	movs	r1, #0
 8000b16:	2078      	movs	r0, #120	; 0x78
 8000b18:	f000 f996 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b1c:	22da      	movs	r2, #218	; 0xda
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2078      	movs	r0, #120	; 0x78
 8000b22:	f000 f991 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b26:	2212      	movs	r2, #18
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2078      	movs	r0, #120	; 0x78
 8000b2c:	f000 f98c 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b30:	22db      	movs	r2, #219	; 0xdb
 8000b32:	2100      	movs	r1, #0
 8000b34:	2078      	movs	r0, #120	; 0x78
 8000b36:	f000 f987 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2078      	movs	r0, #120	; 0x78
 8000b40:	f000 f982 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b44:	228d      	movs	r2, #141	; 0x8d
 8000b46:	2100      	movs	r1, #0
 8000b48:	2078      	movs	r0, #120	; 0x78
 8000b4a:	f000 f97d 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b4e:	2214      	movs	r2, #20
 8000b50:	2100      	movs	r1, #0
 8000b52:	2078      	movs	r0, #120	; 0x78
 8000b54:	f000 f978 	bl	8000e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b58:	22af      	movs	r2, #175	; 0xaf
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 f973 	bl	8000e48 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b62:	222e      	movs	r2, #46	; 0x2e
 8000b64:	2100      	movs	r1, #0
 8000b66:	2078      	movs	r0, #120	; 0x78
 8000b68:	f000 f96e 	bl	8000e48 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f86d 	bl	8000c4c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b72:	f000 f813 	bl	8000b9c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <SSD1306_Init+0x184>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SSD1306_Init+0x184>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SSD1306_Init+0x184>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000030 	.word	0x20000030
 8000b98:	200004c8 	.word	0x200004c8

08000b9c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e01d      	b.n	8000be4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3b50      	subs	r3, #80	; 0x50
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 f948 	bl	8000e48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 f943 	bl	8000e48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 f93e 	bl	8000e48 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <SSD1306_UpdateScreen+0x58>)
 8000bd2:	441a      	add	r2, r3
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 f8cf 	bl	8000d7c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	3301      	adds	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d9de      	bls.n	8000ba8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000c8 	.word	0x200000c8

08000bf8 <SSD1306_ToggleInvert>:

void SSD1306_ToggleInvert(void) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	uint16_t i;

	/* Toggle invert */
	SSD1306.Inverted = !SSD1306.Inverted;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <SSD1306_ToggleInvert+0x4c>)
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf0c      	ite	eq
 8000c06:	2301      	moveq	r3, #1
 8000c08:	2300      	movne	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <SSD1306_ToggleInvert+0x4c>)
 8000c10:	711a      	strb	r2, [r3, #4]

	/* Do memory toggle */
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	e00a      	b.n	8000c2e <SSD1306_ToggleInvert+0x36>
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <SSD1306_ToggleInvert+0x50>)
 8000c1c:	5cd2      	ldrb	r2, [r2, r3]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	43d2      	mvns	r2, r2
 8000c22:	b2d1      	uxtb	r1, r2
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <SSD1306_ToggleInvert+0x50>)
 8000c26:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c34:	d3f0      	bcc.n	8000c18 <SSD1306_ToggleInvert+0x20>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	200004c8 	.word	0x200004c8
 8000c48:	200000c8 	.word	0x200000c8

08000c4c <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <SSD1306_Fill+0x14>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e000      	b.n	8000c62 <SSD1306_Fill+0x16>
 8000c60:	23ff      	movs	r3, #255	; 0xff
 8000c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c66:	4619      	mov	r1, r3
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <SSD1306_Fill+0x2c>)
 8000c6a:	f002 fa3b 	bl	80030e4 <memset>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000c8 	.word	0x200000c8

08000c7c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	460b      	mov	r3, r1
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	70fb      	strb	r3, [r7, #3]
	if (
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2b7f      	cmp	r3, #127	; 0x7f
 8000c92:	d848      	bhi.n	8000d26 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	2b3f      	cmp	r3, #63	; 0x3f
 8000c98:	d845      	bhi.n	8000d26 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <SSD1306_DrawPixel+0xb8>)
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d11a      	bne.n	8000cec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	01db      	lsls	r3, r3, #7
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <SSD1306_DrawPixel+0xbc>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b259      	sxtb	r1, r3
 8000cdc:	88fa      	ldrh	r2, [r7, #6]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	01db      	lsls	r3, r3, #7
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2c9      	uxtb	r1, r1
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <SSD1306_DrawPixel+0xbc>)
 8000ce8:	54d1      	strb	r1, [r2, r3]
 8000cea:	e01d      	b.n	8000d28 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <SSD1306_DrawPixel+0xbc>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	4013      	ands	r3, r2
 8000d14:	b259      	sxtb	r1, r3
 8000d16:	88fa      	ldrh	r2, [r7, #6]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2c9      	uxtb	r1, r1
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SSD1306_DrawPixel+0xbc>)
 8000d22:	54d1      	strb	r1, [r2, r3]
 8000d24:	e000      	b.n	8000d28 <SSD1306_DrawPixel+0xac>
		return;
 8000d26:	bf00      	nop
	}
}
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200004c8 	.word	0x200004c8
 8000d38:	200000c8 	.word	0x200000c8

08000d3c <SSD1306_Clear>:




void SSD1306_Clear (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ff83 	bl	8000c4c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d46:	f7ff ff29 	bl	8000b9c <SSD1306_UpdateScreen>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <ssd1306_I2C_Init+0x28>)
 8000d58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d5a:	e002      	b.n	8000d62 <ssd1306_I2C_Init+0x12>
		p--;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f9      	bne.n	8000d5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	0003d090 	.word	0x0003d090

08000d7c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b0c7      	sub	sp, #284	; 0x11c
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d8a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d8e:	600a      	str	r2, [r1, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d96:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000da2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000da6:	4602      	mov	r2, r0
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000db2:	460a      	mov	r2, r1
 8000db4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dbe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dc2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dd0:	e015      	b.n	8000dfe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000dd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dd6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dda:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	441a      	add	r2, r3
 8000de2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000de6:	3301      	adds	r3, #1
 8000de8:	7811      	ldrb	r1, [r2, #0]
 8000dea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000df2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000df4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dfe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e08:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000e0c:	8812      	ldrh	r2, [r2, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d8df      	bhi.n	8000dd2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e16:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	200a      	movs	r0, #10
 8000e32:	9000      	str	r0, [sp, #0]
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e36:	f000 fda1 	bl	800197c <HAL_I2C_Master_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	20000030 	.word	0x20000030

08000e48 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	460b      	mov	r3, r1
 8000e54:	71bb      	strb	r3, [r7, #6]
 8000e56:	4613      	mov	r3, r2
 8000e58:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	b299      	uxth	r1, r3
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <ssd1306_I2C_Write+0x38>)
 8000e72:	f000 fd83 	bl	800197c <HAL_I2C_Master_Transmit>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000030 	.word	0x20000030

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f000 fa44 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f12:	23c0      	movs	r3, #192	; 0xc0
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f16:	2312      	movs	r3, #18
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f22:	2304      	movs	r3, #4
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <HAL_I2C_MspInit+0x8c>)
 8000f2e:	f000 fa43 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12b      	bne.n	8000fde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fda:	f000 f9ed 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f890 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001096:	f7ff ffd7 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f001 ffff 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fa1d 	bl	80004dc <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010b0:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 80010b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010b8:	200004d4 	.word	0x200004d4

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f931 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fec6 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f93b 	bl	800139e <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f911 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008
 800115c:	20000010 	.word	0x20000010
 8001160:	2000000c 	.word	0x2000000c

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000010 	.word	0x20000010
 8001188:	200004d0 	.word	0x200004d0

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200004d0 	.word	0x200004d0

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000010 	.word	0x20000010

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff47 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff5c 	bl	8001234 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffb0 	bl	800130c <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e159      	b.n	8001688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8148 	bne.w	8001682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a2 	beq.w	8001682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a56      	ldr	r2, [pc, #344]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_GPIO_Init+0x2ec>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x202>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2f4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x1fe>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <HAL_GPIO_Init+0x2f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x1fa>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_GPIO_Init+0x2fc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x1f6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <HAL_GPIO_Init+0x300>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x1f2>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x2ec>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_GPIO_Init+0x304>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x304>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_GPIO_Init+0x304>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_GPIO_Init+0x304>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f aea2 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e12b      	b.n	800195e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fbda 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001758:	f001 f9b6 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a81      	ldr	r2, [pc, #516]	; (8001968 <HAL_I2C_Init+0x274>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d807      	bhi.n	8001778 <HAL_I2C_Init+0x84>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4a80      	ldr	r2, [pc, #512]	; (800196c <HAL_I2C_Init+0x278>)
 800176c:	4293      	cmp	r3, r2
 800176e:	bf94      	ite	ls
 8001770:	2301      	movls	r3, #1
 8001772:	2300      	movhi	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e006      	b.n	8001786 <HAL_I2C_Init+0x92>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a7d      	ldr	r2, [pc, #500]	; (8001970 <HAL_I2C_Init+0x27c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	bf94      	ite	ls
 8001780:	2301      	movls	r3, #1
 8001782:	2300      	movhi	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0e7      	b.n	800195e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a78      	ldr	r2, [pc, #480]	; (8001974 <HAL_I2C_Init+0x280>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_I2C_Init+0x274>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d802      	bhi.n	80017c8 <HAL_I2C_Init+0xd4>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3301      	adds	r3, #1
 80017c6:	e009      	b.n	80017dc <HAL_I2C_Init+0xe8>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4a69      	ldr	r2, [pc, #420]	; (8001978 <HAL_I2C_Init+0x284>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	3301      	adds	r3, #1
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	495c      	ldr	r1, [pc, #368]	; (8001968 <HAL_I2C_Init+0x274>)
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d819      	bhi.n	8001830 <HAL_I2C_Init+0x13c>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e59      	subs	r1, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fbb1 f3f3 	udiv	r3, r1, r3
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001810:	400b      	ands	r3, r1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <HAL_I2C_Init+0x138>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e59      	subs	r1, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fbb1 f3f3 	udiv	r3, r1, r3
 8001824:	3301      	adds	r3, #1
 8001826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182a:	e051      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 800182c:	2304      	movs	r3, #4
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_I2C_Init+0x168>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_I2C_Init+0x18e>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	0099      	lsls	r1, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x196>
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_Init+0x1bc>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e58      	subs	r0, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Init+0x1dc>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6911      	ldr	r1, [r2, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	431bde83 	.word	0x431bde83
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	817b      	strh	r3, [r7, #10]
 800198c:	4613      	mov	r3, r2
 800198e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff fbfc 	bl	800118c <HAL_GetTick>
 8001994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b20      	cmp	r3, #32
 80019a0:	f040 80e0 	bne.w	8001b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2319      	movs	r3, #25
 80019aa:	2201      	movs	r2, #1
 80019ac:	4970      	ldr	r1, [pc, #448]	; (8001b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fa92 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
 80019bc:	e0d3      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_I2C_Master_Transmit+0x50>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e0cc      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d007      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	893a      	ldrh	r2, [r7, #8]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a34:	8979      	ldrh	r1, [r7, #10]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f9ca 	bl	8001dd4 <I2C_MasterRequestWrite>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e08d      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a60:	e066      	b.n	8001b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fb0c 	bl	8002084 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d107      	bne.n	8001a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d11b      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x188>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d017      	beq.n	8001b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6a39      	ldr	r1, [r7, #32]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fafc 	bl	8002106 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d107      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e01a      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d194      	bne.n	8001a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
  }
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	00100002 	.word	0x00100002
 8001b74:	ffff0000 	.word	0xffff0000

08001b78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fb00 	bl	800118c <HAL_GetTick>
 8001b8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	f040 8111 	bne.w	8001dc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2319      	movs	r3, #25
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4988      	ldr	r1, [pc, #544]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f994 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e104      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2C_IsDeviceReady+0x50>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0fd      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d007      	beq.n	8001bee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2224      	movs	r2, #36	; 0x24
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a70      	ldr	r2, [pc, #448]	; (8001dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f952 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c48:	d103      	bne.n	8001c52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0b6      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa91 	bl	800118c <HAL_GetTick>
 8001c6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c9a:	e025      	b.n	8001ce8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9c:	f7ff fa76 	bl	800118c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d302      	bcc.n	8001cb2 <HAL_I2C_IsDeviceReady+0x13a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	22a0      	movs	r2, #160	; 0xa0
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2ba0      	cmp	r3, #160	; 0xa0
 8001cf2:	d005      	beq.n	8001d00 <HAL_I2C_IsDeviceReady+0x188>
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_I2C_IsDeviceReady+0x188>
 8001cfa:	7dbb      	ldrb	r3, [r7, #22]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0cd      	beq.n	8001c9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d129      	bne.n	8001d6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2319      	movs	r3, #25
 8001d42:	2201      	movs	r2, #1
 8001d44:	4921      	ldr	r1, [pc, #132]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8c6 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e036      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e02c      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2319      	movs	r3, #25
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	490f      	ldr	r1, [pc, #60]	; (8001dcc <HAL_I2C_IsDeviceReady+0x254>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f8a2 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e012      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f4ff af32 	bcc.w	8001c12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00100002 	.word	0x00100002
 8001dd0:	ffff0000 	.word	0xffff0000

08001dd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	460b      	mov	r3, r1
 8001de2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d006      	beq.n	8001dfe <I2C_MasterRequestWrite+0x2a>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d003      	beq.n	8001dfe <I2C_MasterRequestWrite+0x2a>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dfc:	d108      	bne.n	8001e10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00b      	b.n	8001e28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	2b12      	cmp	r3, #18
 8001e16:	d107      	bne.n	8001e28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f84f 	bl	8001ed8 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d103      	bne.n	8001e58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e035      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e64:	d108      	bne.n	8001e78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e66:	897b      	ldrh	r3, [r7, #10]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e01b      	b.n	8001eb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e78:	897b      	ldrh	r3, [r7, #10]
 8001e7a:	11db      	asrs	r3, r3, #7
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0306 	and.w	r3, r3, #6
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f063 030f 	orn	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <I2C_MasterRequestWrite+0xfc>)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f875 	bl	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e010      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <I2C_MasterRequestWrite+0x100>)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f865 	bl	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	00010008 	.word	0x00010008
 8001ed4:	00010002 	.word	0x00010002

08001ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee8:	e025      	b.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d021      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff f94b 	bl	800118c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d116      	bne.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e023      	b.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10d      	bne.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	e00c      	b.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d0b6      	beq.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f94:	e051      	b.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa4:	d123      	bne.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e046      	b.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d021      	beq.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f8c9 	bl	800118c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e020      	b.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4013      	ands	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e00b      	b.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	43da      	mvns	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d18d      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002090:	e02d      	b.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f878 	bl	8002188 <I2C_IsAcknowledgeFailed>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02d      	b.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d021      	beq.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff f86f 	bl	800118c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d116      	bne.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e007      	b.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d1ca      	bne.n	8002092 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002112:	e02d      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f837 	bl	8002188 <I2C_IsAcknowledgeFailed>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e02d      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d021      	beq.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7ff f82e 	bl	800118c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b04      	cmp	r3, #4
 800217c:	d1ca      	bne.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d11b      	bne.n	80021d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e267      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d075      	beq.n	80022f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00c      	beq.n	800222c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b85      	ldr	r3, [pc, #532]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221a:	2b08      	cmp	r3, #8
 800221c:	d112      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d157      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e242      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a75      	ldr	r2, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b70      	ldr	r3, [pc, #448]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6c      	ldr	r2, [pc, #432]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 8002280:	4b69      	ldr	r3, [pc, #420]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a68      	ldr	r2, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff74 	bl	800118c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe ff70 	bl	800118c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e207      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff60 	bl	800118c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff5c 	bl	800118c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1f3      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1c7      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4937      	ldr	r1, [pc, #220]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x244>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe ff15 	bl	800118c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe ff11 	bl	800118c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e1a8      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4925      	ldr	r1, [pc, #148]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x244>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fef4 	bl	800118c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a8:	f7fe fef0 	bl	800118c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e187      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d036      	beq.n	8002440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x248>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fed4 	bl	800118c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fed0 	bl	800118c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e167      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x200>
 8002406:	e01b      	b.n	8002440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_OscConfig+0x248>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7fe febd 	bl	800118c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	e00e      	b.n	8002434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe feb9 	bl	800118c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d907      	bls.n	8002434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e150      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b88      	ldr	r3, [pc, #544]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ea      	bne.n	8002416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8097 	beq.w	800257c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a7c      	ldr	r2, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b77      	ldr	r3, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x474>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b74      	ldr	r3, [pc, #464]	; (800265c <HAL_RCC_OscConfig+0x474>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a73      	ldr	r2, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x474>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe fe79 	bl	800118c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe fe75 	bl	800118c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e10c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x474>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2ea>
 80024c4:	4b64      	ldr	r3, [pc, #400]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a63      	ldr	r2, [pc, #396]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x30c>
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5e      	ldr	r2, [pc, #376]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a54      	ldr	r2, [pc, #336]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fe3a 	bl	800118c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fe36 	bl	800118c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0cb      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ee      	beq.n	800251c <HAL_RCC_OscConfig+0x334>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002540:	f7fe fe24 	bl	800118c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fe20 	bl	800118c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0b5      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a1 	beq.w	80026c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d05c      	beq.n	800264c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d141      	bne.n	800261e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fdf4 	bl	800118c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fdf0 	bl	800118c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e087      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	491b      	ldr	r1, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fdc9 	bl	800118c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fdc5 	bl	800118c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e05c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x416>
 800261c:	e054      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fdb2 	bl	800118c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fdae 	bl	800118c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e045      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x444>
 800264a:	e03d      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e038      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x4ec>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0cc      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d90c      	bls.n	8002714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d044      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d119      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d003      	beq.n	8002796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	2b03      	cmp	r3, #3
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e067      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4934      	ldr	r1, [pc, #208]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fce0 	bl	800118c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fcdc 	bl	800118c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e04f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d20c      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490a      	ldr	r1, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fc40 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08003e74 	.word	0x08003e74
 800289c:	20000008 	.word	0x20000008
 80028a0:	2000000c 	.word	0x2000000c

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b094      	sub	sp, #80	; 0x50
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	647b      	str	r3, [r7, #68]	; 0x44
 80028b0:	2300      	movs	r3, #0
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	2300      	movs	r3, #0
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x40>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	f200 80e1 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x34>
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x3a>
 80028d6:	e0db      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028dc:	e0db      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_GetSysClockFreq+0x208>)
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e2:	e0d8      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
 8002904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	0159      	lsls	r1, r3, #5
 8002924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002928:	0150      	lsls	r0, r2, #5
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4621      	mov	r1, r4
 8002930:	1a51      	subs	r1, r2, r1
 8002932:	6139      	str	r1, [r7, #16]
 8002934:	4629      	mov	r1, r5
 8002936:	eb63 0301 	sbc.w	r3, r3, r1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002948:	4659      	mov	r1, fp
 800294a:	018b      	lsls	r3, r1, #6
 800294c:	4651      	mov	r1, sl
 800294e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002952:	4651      	mov	r1, sl
 8002954:	018a      	lsls	r2, r1, #6
 8002956:	4651      	mov	r1, sl
 8002958:	ebb2 0801 	subs.w	r8, r2, r1
 800295c:	4659      	mov	r1, fp
 800295e:	eb63 0901 	sbc.w	r9, r3, r1
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	4623      	mov	r3, r4
 800297c:	eb18 0303 	adds.w	r3, r8, r3
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	462b      	mov	r3, r5
 8002984:	eb49 0303 	adc.w	r3, r9, r3
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002996:	4629      	mov	r1, r5
 8002998:	024b      	lsls	r3, r1, #9
 800299a:	4621      	mov	r1, r4
 800299c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a0:	4621      	mov	r1, r4
 80029a2:	024a      	lsls	r2, r1, #9
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	2200      	movs	r2, #0
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b4:	f7fd fc10 	bl	80001d8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	e058      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	2200      	movs	r2, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	4611      	mov	r1, r2
 80029ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029dc:	4642      	mov	r2, r8
 80029de:	464b      	mov	r3, r9
 80029e0:	f04f 0000 	mov.w	r0, #0
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	0159      	lsls	r1, r3, #5
 80029ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ee:	0150      	lsls	r0, r2, #5
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4641      	mov	r1, r8
 80029f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a14:	ebb2 040a 	subs.w	r4, r2, sl
 8002a18:	eb63 050b 	sbc.w	r5, r3, fp
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	00eb      	lsls	r3, r5, #3
 8002a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2a:	00e2      	lsls	r2, r4, #3
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4643      	mov	r3, r8
 8002a32:	18e3      	adds	r3, r4, r3
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	464b      	mov	r3, r9
 8002a38:	eb45 0303 	adc.w	r3, r5, r3
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	028b      	lsls	r3, r1, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a54:	4621      	mov	r1, r4
 8002a56:	028a      	lsls	r2, r1, #10
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	61fa      	str	r2, [r7, #28]
 8002a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a68:	f7fd fbb6 	bl	80001d8 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3750      	adds	r7, #80	; 0x50
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000008 	.word	0x20000008

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08003e84 	.word	0x08003e84

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffdc 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08003e84 	.word	0x08003e84

08002b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e03f      	b.n	8002baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fa10 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f829 	bl	8002bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb8:	b0c0      	sub	sp, #256	; 0x100
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	ea40 0301 	orr.w	r3, r0, r1
 8002bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c0c:	f021 010c 	bic.w	r1, r1, #12
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2e:	6999      	ldr	r1, [r3, #24]
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	ea40 0301 	orr.w	r3, r0, r1
 8002c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d005      	beq.n	8002c54 <UART_SetConfig+0xa0>
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	; (8002e84 <UART_SetConfig+0x2d0>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d104      	bne.n	8002c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c54:	f7ff ff4c 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8002c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c5c:	e003      	b.n	8002c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c5e:	f7ff ff33 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002c62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c70:	f040 810c 	bne.w	8002e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	1891      	adds	r1, r2, r2
 8002c8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c8e:	415b      	adcs	r3, r3
 8002c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c96:	4621      	mov	r1, r4
 8002c98:	eb12 0801 	adds.w	r8, r2, r1
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb6:	4690      	mov	r8, r2
 8002cb8:	4699      	mov	r9, r3
 8002cba:	4623      	mov	r3, r4
 8002cbc:	eb18 0303 	adds.w	r3, r8, r3
 8002cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	eb49 0303 	adc.w	r3, r9, r3
 8002cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	18db      	adds	r3, r3, r3
 8002ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce8:	4613      	mov	r3, r2
 8002cea:	eb42 0303 	adc.w	r3, r2, r3
 8002cee:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cf8:	f7fd fa6e 	bl	80001d8 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	011c      	lsls	r4, r3, #4
 8002d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	464b      	mov	r3, r9
 8002d20:	1891      	adds	r1, r2, r2
 8002d22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d24:	415b      	adcs	r3, r3
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb43 0b01 	adc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d4c:	4692      	mov	sl, r2
 8002d4e:	469b      	mov	fp, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	eb1a 0303 	adds.w	r3, sl, r3
 8002d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	18db      	adds	r3, r3, r3
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d8e:	f7fd fa23 	bl	80001d8 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2264      	movs	r2, #100	; 0x64
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002db0:	fba3 2302 	umull	r2, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dbc:	441c      	add	r4, r3
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6339      	str	r1, [r7, #48]	; 0x30
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e14:	464b      	mov	r3, r9
 8002e16:	460a      	mov	r2, r1
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e34:	460b      	mov	r3, r1
 8002e36:	18db      	adds	r3, r3, r3
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e4a:	f7fd f9c5 	bl	80001d8 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	3332      	adds	r3, #50	; 0x32
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4422      	add	r2, r4
 8002e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e7c:	e105      	b.n	800308a <UART_SetConfig+0x4d6>
 8002e7e:	bf00      	nop
 8002e80:	40011000 	.word	0x40011000
 8002e84:	40011400 	.word	0x40011400
 8002e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	6239      	str	r1, [r7, #32]
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eae:	4641      	mov	r1, r8
 8002eb0:	1854      	adds	r4, r2, r1
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	eb43 0501 	adc.w	r5, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	eb45 0303 	adc.w	r3, r5, r3
 8002eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002efa:	4629      	mov	r1, r5
 8002efc:	008b      	lsls	r3, r1, #2
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f04:	4621      	mov	r1, r4
 8002f06:	008a      	lsls	r2, r1, #2
 8002f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f0c:	f7fd f964 	bl	80001d8 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4b60      	ldr	r3, [pc, #384]	; (8003098 <UART_SetConfig+0x4e4>)
 8002f16:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	011c      	lsls	r4, r3, #4
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	61b9      	str	r1, [r7, #24]
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f40:	4641      	mov	r1, r8
 8002f42:	1851      	adds	r1, r2, r1
 8002f44:	6139      	str	r1, [r7, #16]
 8002f46:	4649      	mov	r1, r9
 8002f48:	414b      	adcs	r3, r1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	00cb      	lsls	r3, r1, #3
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f62:	4651      	mov	r1, sl
 8002f64:	00ca      	lsls	r2, r1, #3
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f74:	464b      	mov	r3, r9
 8002f76:	460a      	mov	r2, r1
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f98:	4649      	mov	r1, r9
 8002f9a:	008b      	lsls	r3, r1, #2
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	008a      	lsls	r2, r1, #2
 8002fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002faa:	f7fd f915 	bl	80001d8 <__aeabi_uldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <UART_SetConfig+0x4e4>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2164      	movs	r1, #100	; 0x64
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <UART_SetConfig+0x4e4>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd2:	441c      	add	r4, r3
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	673b      	str	r3, [r7, #112]	; 0x70
 8002fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8002fde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	415b      	adcs	r3, r3
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	1851      	adds	r1, r2, r1
 8002ff6:	6039      	str	r1, [r7, #0]
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	414b      	adcs	r3, r1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800300a:	4659      	mov	r1, fp
 800300c:	00cb      	lsls	r3, r1, #3
 800300e:	4651      	mov	r1, sl
 8003010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003014:	4651      	mov	r1, sl
 8003016:	00ca      	lsls	r2, r1, #3
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	4603      	mov	r3, r0
 800301e:	4642      	mov	r2, r8
 8003020:	189b      	adds	r3, r3, r2
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
 8003024:	464b      	mov	r3, r9
 8003026:	460a      	mov	r2, r1
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
 8003038:	667a      	str	r2, [r7, #100]	; 0x64
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003046:	4649      	mov	r1, r9
 8003048:	008b      	lsls	r3, r1, #2
 800304a:	4641      	mov	r1, r8
 800304c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003050:	4641      	mov	r1, r8
 8003052:	008a      	lsls	r2, r1, #2
 8003054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003058:	f7fd f8be 	bl	80001d8 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <UART_SetConfig+0x4e4>)
 8003062:	fba3 1302 	umull	r1, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2164      	movs	r1, #100	; 0x64
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <UART_SetConfig+0x4e4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4422      	add	r2, r4
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	51eb851f 	.word	0x51eb851f

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4d0d      	ldr	r5, [pc, #52]	; (80030d4 <__libc_init_array+0x38>)
 80030a0:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a2:	1b64      	subs	r4, r4, r5
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	2600      	movs	r6, #0
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	4d0b      	ldr	r5, [pc, #44]	; (80030dc <__libc_init_array+0x40>)
 80030ae:	4c0c      	ldr	r4, [pc, #48]	; (80030e0 <__libc_init_array+0x44>)
 80030b0:	f000 f820 	bl	80030f4 <_init>
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	2600      	movs	r6, #0
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08003e94 	.word	0x08003e94
 80030d8:	08003e94 	.word	0x08003e94
 80030dc:	08003e94 	.word	0x08003e94
 80030e0:	08003e98 	.word	0x08003e98

080030e4 <memset>:
 80030e4:	4402      	add	r2, r0
 80030e6:	4603      	mov	r3, r0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d100      	bne.n	80030ee <memset+0xa>
 80030ec:	4770      	bx	lr
 80030ee:	f803 1b01 	strb.w	r1, [r3], #1
 80030f2:	e7f9      	b.n	80030e8 <memset+0x4>

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
