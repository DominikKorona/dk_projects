
OLED_Universal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e34  08006e34  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  2000007c  08006eb8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006eb8  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001442f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ee  00000000  00000000  000344db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00036cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002c54  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015d4a  00000000  00000000  0003ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00091f8d  00000000  00000000  00050876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e2803  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001110  00000000  00000000  000e2858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050e8  00000000  00000000  000e3968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069d4 	.word	0x080069d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080069d4 	.word	0x080069d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 f8d1 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f89f 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa09 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 f9df 	bl	8000968 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f9b3 	bl	8000914 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ae:	f000 f901 	bl	80007b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b2:	f000 f92d 	bl	8000810 <MX_SPI2_Init>
  MX_TIM2_Init();
 80005b6:	f000 f961 	bl	800087c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80005ba:	f000 fceb 	bl	8000f94 <OLED_Init>
  HAL_TIM_Base_Start(&htim2);
 80005be:	4840      	ldr	r0, [pc, #256]	; (80006c0 <main+0x12c>)
 80005c0:	f004 fd52 	bl	8005068 <HAL_TIM_Base_Start>
  char c[20];
  extern volatile uint8_t dmaTransferComplete;

  SSD1306_DrawLine(68, 60, 120, 60, SSD1306_COLOR_WHITE);
 80005c4:	2301      	movs	r3, #1
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	233c      	movs	r3, #60	; 0x3c
 80005ca:	2278      	movs	r2, #120	; 0x78
 80005cc:	213c      	movs	r1, #60	; 0x3c
 80005ce:	2044      	movs	r0, #68	; 0x44
 80005d0:	f000 fbe5 	bl	8000d9e <SSD1306_DrawLine>
  SSD1306_Putstring(90, 50, "Line", &Arialsmall_5x10, SSD1306_COLOR_WHITE);
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	4b3a      	ldr	r3, [pc, #232]	; (80006c4 <main+0x130>)
 80005da:	4a3b      	ldr	r2, [pc, #236]	; (80006c8 <main+0x134>)
 80005dc:	2132      	movs	r1, #50	; 0x32
 80005de:	205a      	movs	r0, #90	; 0x5a
 80005e0:	f000 fbae 	bl	8000d40 <SSD1306_Putstring>
  OLED_UpdateScreen();
 80005e4:	f000 fdca 	bl	800117c <OLED_UpdateScreen>


  for (int i = 0; i < 50; ++i) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e018      	b.n	8000620 <main+0x8c>
	  while (dmaTransferComplete==0){}
 80005ee:	bf00      	nop
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <main+0x138>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0fa      	beq.n	80005f0 <main+0x5c>
	  itoa(i,c,10);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	220a      	movs	r2, #10
 80005fe:	4619      	mov	r1, r3
 8000600:	69f8      	ldr	r0, [r7, #28]
 8000602:	f005 fd2d 	bl	8006060 <itoa>
	  SSD1306_Putstring(90, 30, c, &Arialsmall_5x10, SSD1306_COLOR_WHITE);
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	2301      	movs	r3, #1
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <main+0x130>)
 800060e:	211e      	movs	r1, #30
 8000610:	205a      	movs	r0, #90	; 0x5a
 8000612:	f000 fb95 	bl	8000d40 <SSD1306_Putstring>
	  OLED_UpdateScreen();
 8000616:	f000 fdb1 	bl	800117c <OLED_UpdateScreen>
  for (int i = 0; i < 50; ++i) {
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3301      	adds	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	2b31      	cmp	r3, #49	; 0x31
 8000624:	dde3      	ble.n	80005ee <main+0x5a>
  }

  for (int i = 0; i < 8; ++i) {
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	e044      	b.n	80006b6 <main+0x122>
	  if (t1_buff_start[i]<t1_buff_end[i]) {
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <main+0x13c>)
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000634:	4927      	ldr	r1, [pc, #156]	; (80006d4 <main+0x140>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800063c:	429a      	cmp	r2, r3
 800063e:	d21a      	bcs.n	8000676 <main+0xe2>
		  sprintf(c,"%lu\r", t1_buff_end[i]-t1_buff_start[i]);
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <main+0x140>)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000648:	4921      	ldr	r1, [pc, #132]	; (80006d0 <main+0x13c>)
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000650:	1ad2      	subs	r2, r2, r3
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4920      	ldr	r1, [pc, #128]	; (80006d8 <main+0x144>)
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fd0c 	bl	8006074 <siprintf>
		  HAL_UART_Transmit(&huart2, c, strlen(c), HAL_MAX_DELAY);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdbe 	bl	80001e0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <main+0x148>)
 8000670:	f005 f93f 	bl	80058f2 <HAL_UART_Transmit>
 8000674:	e01c      	b.n	80006b0 <main+0x11c>
	}else{
		  sprintf(c,"%lu\r", 65535+t1_buff_end[i]-t1_buff_start[i]);
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <main+0x140>)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067e:	4914      	ldr	r1, [pc, #80]	; (80006d0 <main+0x13c>)
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800068c:	33ff      	adds	r3, #255	; 0xff
 800068e:	1d38      	adds	r0, r7, #4
 8000690:	461a      	mov	r2, r3
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0x144>)
 8000694:	f005 fcee 	bl	8006074 <siprintf>
		  HAL_UART_Transmit(&huart2, c, strlen(c), HAL_MAX_DELAY);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fda0 	bl	80001e0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	1d39      	adds	r1, r7, #4
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <main+0x148>)
 80006ac:	f005 f921 	bl	80058f2 <HAL_UART_Transmit>
  for (int i = 0; i < 8; ++i) {
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	3301      	adds	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	ddb7      	ble.n	800062c <main+0x98>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0x128>
 80006be:	bf00      	nop
 80006c0:	20000204 	.word	0x20000204
 80006c4:	20000000 	.word	0x20000000
 80006c8:	080069ec 	.word	0x080069ec
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000290 	.word	0x20000290
 80006d4:	200002b0 	.word	0x200002b0
 80006d8:	080069f4 	.word	0x080069f4
 80006dc:	2000024c 	.word	0x2000024c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fcb8 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000750:	2310      	movs	r3, #16
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000754:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075a:	2304      	movs	r3, #4
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fbac 	bl	8003ec4 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000772:	f000 f9b9 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fe0e 	bl	80043b4 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079e:	f000 f9a3 	bl	8000ae8 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f001 fe67 	bl	80024c4 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f974 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000098 	.word	0x20000098
 8000808:	40005400 	.word	0x40005400
 800080c:	00061a80 	.word	0x00061a80

08000810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI2_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI2_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI2_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI2_Init+0x64>)
 8000830:	2202      	movs	r2, #2
 8000832:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI2_Init+0x64>)
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI2_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI2_Init+0x64>)
 8000844:	2210      	movs	r2, #16
 8000846:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI2_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI2_Init+0x64>)
 8000862:	f003 ffc7 	bl	80047f4 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f93c 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000014c 	.word	0x2000014c
 8000878:	40003800 	.word	0x40003800

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_TIM2_Init+0x94>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM2_Init+0x94>)
 80008a2:	2253      	movs	r2, #83	; 0x53
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_TIM2_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_TIM2_Init+0x94>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM2_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <MX_TIM2_Init+0x94>)
 80008c2:	f004 fb81 	bl	8004fc8 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008cc:	f000 f90c 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_TIM2_Init+0x94>)
 80008de:	f004 fd25 	bl	800532c <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e8:	f000 f8fe 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM2_Init+0x94>)
 80008fa:	f004 ff2b 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f8f0 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000204 	.word	0x20000204

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART2_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800094c:	f004 ff84 	bl	8005858 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f8c7 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000024c 	.word	0x2000024c
 8000964:	40004400 	.word	0x40004400

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_DMA_Init+0x4c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	200c      	movs	r0, #12
 8000990:	f001 f823 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000994:	200c      	movs	r0, #12
 8000996:	f001 f83c 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200f      	movs	r0, #15
 80009a0:	f001 f81b 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009a4:	200f      	movs	r0, #15
 80009a6:	f001 f834 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <MX_GPIO_Init+0x120>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x120>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RES_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000a44:	4825      	ldr	r0, [pc, #148]	; (8000adc <MX_GPIO_Init+0x124>)
 8000a46:	f001 fd23 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a50:	f001 fd1e 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000a5a:	f001 fd19 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000a76:	f001 fb87 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RES_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RES_Pin;
 8000a7a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0x124>)
 8000a94:	f001 fb78 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0x128>)
 8000ab0:	f001 fb6a 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x12c>)
 8000acc:	f001 fb5c 	bl	8002188 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <micros>:
uint32_t t1_buff_start[8];
uint32_t t1_buff_end[8];

extern uint8_t dmaCounter;
extern TIM_HandleTypeDef htim2;
uint32_t micros(void) {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
    return  __HAL_TIM_GET_COUNTER(&htim2); // htimx to Twój timer
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <micros+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000204 	.word	0x20000204

08000b0c <sh1106_SPI_Write>:
	HAL_SPI_Transmit(SPI_HANDLE, data, count, HAL_MAX_DELAY);
	t1_buff_end[counter] = micros();
//	SH1106_CS_H(); //?
}

void sh1106_SPI_Write(uint8_t data){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]

	SH1106_CS_H();
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <sh1106_SPI_Write+0x48>)
 8000b1c:	f001 fcb8 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_DC_L(); // command
 8000b20:	2200      	movs	r2, #0
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <sh1106_SPI_Write+0x4c>)
 8000b26:	f001 fcb3 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4809      	ldr	r0, [pc, #36]	; (8000b54 <sh1106_SPI_Write+0x48>)
 8000b30:	f001 fcae 	bl	8002490 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <sh1106_SPI_Write+0x50>)
 8000b3e:	f003 fee2 	bl	8004906 <HAL_SPI_Transmit>
	SH1106_CS_H();
 8000b42:	2201      	movs	r2, #1
 8000b44:	2110      	movs	r1, #16
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <sh1106_SPI_Write+0x48>)
 8000b48:	f001 fca2 	bl	8002490 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	2000014c 	.word	0x2000014c

08000b60 <sh1106_SPI_WriteMulti_DMA>:
//
// DMA
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
#if defined(USE_DMA)
void sh1106_SPI_WriteMulti_DMA(uint8_t* data, uint16_t count) {
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
//	SH1106_CS_H();//mozna wylaczyc
	SH1106_DC_H();
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <sh1106_SPI_WriteMulti_DMA+0x58>)
 8000b72:	f001 fc8d 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <sh1106_SPI_WriteMulti_DMA+0x5c>)
 8000b7c:	f001 fc88 	bl	8002490 <HAL_GPIO_WritePin>
//	t1_start=micros();
	t1_buff_start[dmaCounter]=micros();
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <sh1106_SPI_WriteMulti_DMA+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461c      	mov	r4, r3
 8000b86:	f7ff ffb5 	bl	8000af4 <micros>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <sh1106_SPI_WriteMulti_DMA+0x64>)
 8000b8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	HAL_SPI_Transmit_DMA(SPI_HANDLE, data, count);
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	461a      	mov	r2, r3
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <sh1106_SPI_WriteMulti_DMA+0x68>)
 8000b9a:	f003 fff1 	bl	8004b80 <HAL_SPI_Transmit_DMA>
	t1_buff_end[dmaCounter]=micros();
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <sh1106_SPI_WriteMulti_DMA+0x60>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	f7ff ffa6 	bl	8000af4 <micros>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <sh1106_SPI_WriteMulti_DMA+0x6c>)
 8000bac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	200002d2 	.word	0x200002d2
 8000bc4:	20000290 	.word	0x20000290
 8000bc8:	2000014c 	.word	0x2000014c
 8000bcc:	200002b0 	.word	0x200002b0

08000bd0 <OLED_Prepare_Interface>:


#endif
#endif
/////// PREPARE INTERFACE ///////
uint8_t OLED_Prepare_Interface(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	uint32_t p = 2500;
	while(p>0)
		p--;
#elif defined(INTERFACE_SPI)
	/* Check if LCD connected to SPI */
	if (HAL_SPI_GetState(SPI_HANDLE) == HAL_SPI_STATE_RESET) {
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <OLED_Prepare_Interface+0x48>)
 8000bd6:	f004 f89d 	bl	8004d14 <HAL_SPI_GetState>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <OLED_Prepare_Interface+0x14>
		return 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e016      	b.n	8000c12 <OLED_Prepare_Interface+0x42>
	}
//	/*Init SPI*/
	SH1106_CS_H();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <OLED_Prepare_Interface+0x4c>)
 8000bea:	f001 fc51 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <OLED_Prepare_Interface+0x50>)
 8000bf4:	f001 fc4c 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_RST_L();
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <OLED_Prepare_Interface+0x54>)
 8000c00:	f001 fc46 	bl	8002490 <HAL_GPIO_WritePin>
	SH1106_RST_H();
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <OLED_Prepare_Interface+0x54>)
 8000c0c:	f001 fc40 	bl	8002490 <HAL_GPIO_WritePin>
#endif
	return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000014c 	.word	0x2000014c
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000

08000c28 <SSD1306_Putchar>:
		}
    }
}


char SSD1306_Putchar(uint8_t chXpos, uint8_t chYpos, char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	460b      	mov	r3, r1
 8000c36:	71bb      	strb	r3, [r7, #6]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	717b      	strb	r3, [r7, #5]

	uint8_t i, j;
	uint8_t byte, byteWidth, rowWidthBytes;
	if (
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	8812      	ldrh	r2, [r2, #0]
 8000c42:	4413      	add	r3, r2
	if (
 8000c44:	2b7f      	cmp	r3, #127	; 0x7f
 8000c46:	dc05      	bgt.n	8000c54 <SSD1306_Putchar+0x2c>
		SSD1306_HEIGHT <= (chYpos + Font->FontHeight)
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	8852      	ldrh	r2, [r2, #2]
 8000c4e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000c50:	2b3f      	cmp	r3, #63	; 0x3f
 8000c52:	dd01      	ble.n	8000c58 <SSD1306_Putchar+0x30>
	) {
		/* Error */
		return 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e06f      	b.n	8000d38 <SSD1306_Putchar+0x110>
	}
	byte = 0; // that variable is useful for greater fonts
 8000c58:	2300      	movs	r3, #0
 8000c5a:	737b      	strb	r3, [r7, #13]
	byteWidth = (Font->FontWidth + 7) / 8; // that variable transform bits to bytes of font width
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3307      	adds	r3, #7
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da00      	bge.n	8000c68 <SSD1306_Putchar+0x40>
 8000c66:	3307      	adds	r3, #7
 8000c68:	10db      	asrs	r3, r3, #3
 8000c6a:	733b      	strb	r3, [r7, #12]
	rowWidthBytes = Font->FontHeight * byteWidth;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	885b      	ldrh	r3, [r3, #2]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	7b3a      	ldrb	r2, [r7, #12]
 8000c74:	fb12 f303 	smulbb	r3, r2, r3
 8000c78:	72fb      	strb	r3, [r7, #11]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e054      	b.n	8000d2a <SSD1306_Putchar+0x102>
			for (j = 0; j < Font->FontWidth; j++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	73bb      	strb	r3, [r7, #14]
 8000c84:	e048      	b.n	8000d18 <SSD1306_Putchar+0xf0>
				if(j & 7) // gdy i =1,2,3,4,5,6 - to przesuwamy bity o jeden w lewo w kazdej iteracji
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <SSD1306_Putchar+0x70>
				{
					byte <<= 1;
 8000c90:	7b7b      	ldrb	r3, [r7, #13]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	737b      	strb	r3, [r7, #13]
 8000c96:	e012      	b.n	8000cbe <SSD1306_Putchar+0x96>
				}else /* gdy i==0 to pobieram zerowy element z tablicy,
					   * i==8,==16 itd. to pobieram sasiedni element**/
				{
					byte = Font->data[(ch - ASCII_OFFSET) * rowWidthBytes + i * byteWidth + j / 8];
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	797a      	ldrb	r2, [r7, #5]
 8000c9e:	3a20      	subs	r2, #32
 8000ca0:	7af9      	ldrb	r1, [r7, #11]
 8000ca2:	fb02 f101 	mul.w	r1, r2, r1
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	7b38      	ldrb	r0, [r7, #12]
 8000caa:	fb00 f202 	mul.w	r2, r0, r2
 8000cae:	440a      	add	r2, r1
 8000cb0:	7bb9      	ldrb	r1, [r7, #14]
 8000cb2:	08c9      	lsrs	r1, r1, #3
 8000cb4:	b2c9      	uxtb	r1, r1
 8000cb6:	440a      	add	r2, r1
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	737b      	strb	r3, [r7, #13]
				}
				if (byte & 0x80){
 8000cbe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da10      	bge.n	8000ce8 <SSD1306_Putchar+0xc0>
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t) color);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b298      	uxth	r0, r3
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	7e3a      	ldrb	r2, [r7, #24]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f000 f9eb 	bl	80010bc <SSD1306_DrawPixel>
 8000ce6:	e014      	b.n	8000d12 <SSD1306_Putchar+0xea>
				} else {
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t)!color);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	7e3b      	ldrb	r3, [r7, #24]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f000 f9d5 	bl	80010bc <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	3301      	adds	r3, #1
 8000d16:	73bb      	strb	r3, [r7, #14]
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3b0      	bcc.n	8000c86 <SSD1306_Putchar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	885b      	ldrh	r3, [r3, #2]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3a4      	bcc.n	8000c80 <SSD1306_Putchar+0x58>
				}
			}
		}
	/* Return character written */
	return ch;
 8000d36:	797b      	ldrb	r3, [r7, #5]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SSD1306_Putstring>:

char SSD1306_Putstring(uint8_t chXpos, uint8_t chYpos, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60ba      	str	r2, [r7, #8]
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	73bb      	strb	r3, [r7, #14]

	/* Write characters */
	while (*str) {
 8000d52:	e01a      	b.n	8000d8a <SSD1306_Putstring+0x4a>
		/* Check available space in LCD */
		if (SSD1306_Putchar(chXpos, chYpos, *str, Font, color) != *str) {
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	7bb9      	ldrb	r1, [r7, #14]
 8000d5a:	7bf8      	ldrb	r0, [r7, #15]
 8000d5c:	7e3b      	ldrb	r3, [r7, #24]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f7ff ff61 	bl	8000c28 <SSD1306_Putchar>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d002      	beq.n	8000d78 <SSD1306_Putstring+0x38>
			/* Return error */
			return *str;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	e00e      	b.n	8000d96 <SSD1306_Putstring+0x56>
		}
		/* Increase position */
		chXpos += Font->FontWidth;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4413      	add	r3, r2
 8000d82:	73fb      	strb	r3, [r7, #15]
		/* Increase string pointer */
		str++;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1e0      	bne.n	8000d54 <SSD1306_Putstring+0x14>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	781b      	ldrb	r3, [r3, #0]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b087      	sub	sp, #28
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4604      	mov	r4, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	461a      	mov	r2, r3
 8000dac:	4623      	mov	r3, r4
 8000dae:	80fb      	strh	r3, [r7, #6]
 8000db0:	4603      	mov	r3, r0
 8000db2:	80bb      	strh	r3, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc0:	d901      	bls.n	8000dc6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000dc2:	237f      	movs	r3, #127	; 0x7f
 8000dc4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dca:	d901      	bls.n	8000dd0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000dcc:	237f      	movs	r3, #127	; 0x7f
 8000dce:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd4:	d901      	bls.n	8000dda <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000dd6:	233f      	movs	r3, #63	; 0x3f
 8000dd8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000dda:	883b      	ldrh	r3, [r7, #0]
 8000ddc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dde:	d901      	bls.n	8000de4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000de0:	233f      	movs	r3, #63	; 0x3f
 8000de2:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000de4:	88fa      	ldrh	r2, [r7, #6]
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d205      	bcs.n	8000df8 <SSD1306_DrawLine+0x5a>
 8000dec:	887a      	ldrh	r2, [r7, #2]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	e004      	b.n	8000e02 <SSD1306_DrawLine+0x64>
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000e04:	88ba      	ldrh	r2, [r7, #4]
 8000e06:	883b      	ldrh	r3, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d205      	bcs.n	8000e18 <SSD1306_DrawLine+0x7a>
 8000e0c:	883a      	ldrh	r2, [r7, #0]
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	e004      	b.n	8000e22 <SSD1306_DrawLine+0x84>
 8000e18:	88ba      	ldrh	r2, [r7, #4]
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d201      	bcs.n	8000e30 <SSD1306_DrawLine+0x92>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e001      	b.n	8000e34 <SSD1306_DrawLine+0x96>
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000e36:	88ba      	ldrh	r2, [r7, #4]
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d201      	bcs.n	8000e42 <SSD1306_DrawLine+0xa4>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e001      	b.n	8000e46 <SSD1306_DrawLine+0xa8>
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000e48:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dd06      	ble.n	8000e62 <SSD1306_DrawLine+0xc4>
 8000e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e58:	0fda      	lsrs	r2, r3, #31
 8000e5a:	4413      	add	r3, r2
 8000e5c:	105b      	asrs	r3, r3, #1
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	e006      	b.n	8000e70 <SSD1306_DrawLine+0xd2>
 8000e62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e66:	0fda      	lsrs	r2, r3, #31
 8000e68:	4413      	add	r3, r2
 8000e6a:	105b      	asrs	r3, r3, #1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d129      	bne.n	8000ece <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000e7a:	883a      	ldrh	r2, [r7, #0]
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d205      	bcs.n	8000e8e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e8a:	893b      	ldrh	r3, [r7, #8]
 8000e8c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d205      	bcs.n	8000ea2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e9e:	893b      	ldrh	r3, [r7, #8]
 8000ea0:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	82bb      	strh	r3, [r7, #20]
 8000ea6:	e00c      	b.n	8000ec2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000ea8:	8ab9      	ldrh	r1, [r7, #20]
 8000eaa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f903 	bl	80010bc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000eb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	82bb      	strh	r3, [r7, #20]
 8000ec2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dded      	ble.n	8000ea8 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000ecc:	e05f      	b.n	8000f8e <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000ece:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d129      	bne.n	8000f2a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000ed6:	883a      	ldrh	r2, [r7, #0]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d205      	bcs.n	8000eea <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000ee2:	88bb      	ldrh	r3, [r7, #4]
 8000ee4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000ee6:	893b      	ldrh	r3, [r7, #8]
 8000ee8:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d205      	bcs.n	8000efe <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	82bb      	strh	r3, [r7, #20]
 8000f02:	e00c      	b.n	8000f1e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000f04:	8abb      	ldrh	r3, [r7, #20]
 8000f06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f8d5 	bl	80010bc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000f12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	82bb      	strh	r3, [r7, #20]
 8000f1e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dded      	ble.n	8000f04 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000f28:	e031      	b.n	8000f8e <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000f2a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8c2 	bl	80010bc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d103      	bne.n	8000f48 <SSD1306_DrawLine+0x1aa>
 8000f40:	88ba      	ldrh	r2, [r7, #4]
 8000f42:	883b      	ldrh	r3, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d021      	beq.n	8000f8c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000f48:	8afb      	ldrh	r3, [r7, #22]
 8000f4a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000f4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f54:	425b      	negs	r3, r3
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dd08      	ble.n	8000f6c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000f5a:	8afa      	ldrh	r2, [r7, #22]
 8000f5c:	8a3b      	ldrh	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000f64:	89fa      	ldrh	r2, [r7, #14]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4413      	add	r3, r2
 8000f6a:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000f6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dad8      	bge.n	8000f2a <SSD1306_DrawLine+0x18c>
			err += dx;
 8000f78:	8afa      	ldrh	r2, [r7, #22]
 8000f7a:	8a7b      	ldrh	r3, [r7, #18]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000f82:	89ba      	ldrh	r2, [r7, #12]
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000f8a:	e7ce      	b.n	8000f2a <SSD1306_DrawLine+0x18c>
			break;
 8000f8c:	bf00      	nop
		}
	}
}
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}

08000f94 <OLED_Init>:

#define SSD1306_DEACTIVATE_SCROLL   0x2E // Stop scroll
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7

uint8_t OLED_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	OLED_Prepare_Interface();
 8000f98:	f7ff fe1a 	bl	8000bd0 <OLED_Prepare_Interface>
	OLED_WRITECMD(0xAE); //display off
 8000f9c:	20ae      	movs	r0, #174	; 0xae
 8000f9e:	f7ff fdb5 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //Set Memory Addressing Mode
 8000fa2:	2020      	movs	r0, #32
 8000fa4:	f7ff fdb2 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f7ff fdaf 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fae:	20b0      	movs	r0, #176	; 0xb0
 8000fb0:	f7ff fdac 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xC8); //Set COM Output Scan Direction
 8000fb4:	20c8      	movs	r0, #200	; 0xc8
 8000fb6:	f7ff fda9 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //---set low column address
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fda6 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //---set high column address
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f7ff fda3 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x40); //--set start line address
 8000fc6:	2040      	movs	r0, #64	; 0x40
 8000fc8:	f7ff fda0 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x81); //--set contrast control register
 8000fcc:	2081      	movs	r0, #129	; 0x81
 8000fce:	f7ff fd9d 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xFF);
 8000fd2:	20ff      	movs	r0, #255	; 0xff
 8000fd4:	f7ff fd9a 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xA1); //--set segment re-map 0 to 127
 8000fd8:	20a1      	movs	r0, #161	; 0xa1
 8000fda:	f7ff fd97 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xA6); //--set normal display
 8000fde:	20a6      	movs	r0, #166	; 0xa6
 8000fe0:	f7ff fd94 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xA8); //--set multiplex ratio(1 to 64)
 8000fe4:	20a8      	movs	r0, #168	; 0xa8
 8000fe6:	f7ff fd91 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x3F); //1/64 duty
 8000fea:	203f      	movs	r0, #63	; 0x3f
 8000fec:	f7ff fd8e 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ff0:	20a4      	movs	r0, #164	; 0xa4
 8000ff2:	f7ff fd8b 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xD3); //-set display offset
 8000ff6:	20d3      	movs	r0, #211	; 0xd3
 8000ff8:	f7ff fd88 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //-not offset
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd85 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xD5); //--set display clock divide ratio/oscillator frequency
 8001002:	20d5      	movs	r0, #213	; 0xd5
 8001004:	f7ff fd82 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xF0); //--set divide ratio
 8001008:	20f0      	movs	r0, #240	; 0xf0
 800100a:	f7ff fd7f 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xD9); //--set pre-charge period
 800100e:	20d9      	movs	r0, #217	; 0xd9
 8001010:	f7ff fd7c 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x22); //
 8001014:	2022      	movs	r0, #34	; 0x22
 8001016:	f7ff fd79 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xDA); //--set com pins hardware configuration
 800101a:	20da      	movs	r0, #218	; 0xda
 800101c:	f7ff fd76 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x12);
 8001020:	2012      	movs	r0, #18
 8001022:	f7ff fd73 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xDB); //--set vcomh
 8001026:	20db      	movs	r0, #219	; 0xdb
 8001028:	f7ff fd70 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //0x20,0.77xVcc
 800102c:	2020      	movs	r0, #32
 800102e:	f7ff fd6d 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x8D); //--set DC-DC enablev
 8001032:	208d      	movs	r0, #141	; 0x8d
 8001034:	f7ff fd6a 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x14); //
 8001038:	2014      	movs	r0, #20
 800103a:	f7ff fd67 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0xAF); //--turn on SSD1306 panel
 800103e:	20af      	movs	r0, #175	; 0xaf
 8001040:	f7ff fd64 	bl	8000b0c <sh1106_SPI_Write>
	/*initialised*/
	OLED_DISPLAY.Initialised=1;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <OLED_Init+0xc8>)
 8001046:	2201      	movs	r2, #1
 8001048:	705a      	strb	r2, [r3, #1]
	/*normal colour*/
	OLED_DISPLAY.Inverted=0;
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <OLED_Init+0xc8>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	OLED_Clear();
 8001050:	f000 f806 	bl	8001060 <OLED_Clear>
	/* Return OK */
	return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002d0 	.word	0x200002d0

08001060 <OLED_Clear>:

void OLED_Clear(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	OLED_Fill (0);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f805 	bl	8001074 <OLED_Fill>
    OLED_UpdateScreen();
 800106a:	f000 f887 	bl	800117c <OLED_UpdateScreen>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <OLED_Fill>:
void OLED_Fill(SSD1306_COLOR_t color) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	if (OLED_DISPLAY.Inverted) {
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <OLED_Fill+0x40>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <OLED_Fill+0x20>
		color = (SSD1306_COLOR_t)!color;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	71fb      	strb	r3, [r7, #7]
	}
	/* Set memory */
	memset(OLED_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_BUFFER));
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <OLED_Fill+0x2a>
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <OLED_Fill+0x2c>
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <OLED_Fill+0x44>)
 80010a8:	f004 ffdc 	bl	8006064 <memset>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200002d0 	.word	0x200002d0
 80010b8:	200002d4 	.word	0x200002d4

080010bc <SSD1306_DrawPixel>:
	for (i = 0; i < sizeof(OLED_BUFFER); i++) {
		OLED_BUFFER[i] = ~OLED_BUFFER[i];
	}
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	460b      	mov	r3, r1
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	70fb      	strb	r3, [r7, #3]
	if (
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	2b7f      	cmp	r3, #127	; 0x7f
 80010d2:	d848      	bhi.n	8001166 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	2b3f      	cmp	r3, #63	; 0x3f
 80010d8:	d845      	bhi.n	8001166 <SSD1306_DrawPixel+0xaa>
	) {
		/* Error */
		return;
	}
	/* Check if pixels are inverted */
	if (OLED_DISPLAY.Inverted) {
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <SSD1306_DrawPixel+0xb8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	70fb      	strb	r3, [r7, #3]
	}
	/* Set colour */
	if (color == SSD1306_COLOR_WHITE) {
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d11a      	bne.n	800112c <SSD1306_DrawPixel+0x70>
		OLED_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010f6:	88fa      	ldrh	r2, [r7, #6]
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	b298      	uxth	r0, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	01db      	lsls	r3, r3, #7
 8001102:	4413      	add	r3, r2
 8001104:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <SSD1306_DrawPixel+0xbc>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	b25a      	sxtb	r2, r3
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b259      	sxtb	r1, r3
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	01db      	lsls	r3, r3, #7
 8001122:	4413      	add	r3, r2
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <SSD1306_DrawPixel+0xbc>)
 8001128:	54d1      	strb	r1, [r2, r3]
 800112a:	e01d      	b.n	8001168 <SSD1306_DrawPixel+0xac>
	} else {
		OLED_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b298      	uxth	r0, r3
 8001134:	4603      	mov	r3, r0
 8001136:	01db      	lsls	r3, r3, #7
 8001138:	4413      	add	r3, r2
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <SSD1306_DrawPixel+0xbc>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	b25a      	sxtb	r2, r3
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	b25b      	sxtb	r3, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4013      	ands	r3, r2
 8001154:	b259      	sxtb	r1, r3
 8001156:	88fa      	ldrh	r2, [r7, #6]
 8001158:	4603      	mov	r3, r0
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	4413      	add	r3, r2
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SSD1306_DrawPixel+0xbc>)
 8001162:	54d1      	strb	r1, [r2, r3]
 8001164:	e000      	b.n	8001168 <SSD1306_DrawPixel+0xac>
		return;
 8001166:	bf00      	nop
	}
}
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200002d0 	.word	0x200002d0
 8001178:	200002d4 	.word	0x200002d4

0800117c <OLED_UpdateScreen>:
// Callbacks
//
////////////////////////////////////////////////////


void OLED_UpdateScreen(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if (dmaCounter==0) {
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <OLED_UpdateScreen+0x48>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <OLED_UpdateScreen+0x14>
		dmaTransferComplete=0;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <OLED_UpdateScreen+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	}

	OLED_WRITECMD(0xB0 + dmaCounter);
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <OLED_UpdateScreen+0x48>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3b50      	subs	r3, #80	; 0x50
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fcb6 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x02);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fcb3 	bl	8000b0c <sh1106_SPI_Write>
	OLED_WRITECMD(0x10);
 80011a6:	2010      	movs	r0, #16
 80011a8:	f7ff fcb0 	bl	8000b0c <sh1106_SPI_Write>

	OLED_WRITEDATA_DMA(&OLED_BUFFER[SSD1306_WIDTH * dmaCounter], SSD1306_WIDTH);
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <OLED_UpdateScreen+0x48>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	01db      	lsls	r3, r3, #7
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <OLED_UpdateScreen+0x50>)
 80011b6:	4413      	add	r3, r2
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fcd0 	bl	8000b60 <sh1106_SPI_WriteMulti_DMA>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002d2 	.word	0x200002d2
 80011c8:	20000008 	.word	0x20000008
 80011cc:	200002d4 	.word	0x200002d4

080011d0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
//	t1_buff_end[dmaCounter]=micros();
	dmaCounter++;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_SPI_TxCpltCallback+0x3c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_SPI_TxCpltCallback+0x3c>)
 80011e4:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8){
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_SPI_TxCpltCallback+0x3c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b07      	cmp	r3, #7
 80011ee:	d802      	bhi.n	80011f6 <HAL_SPI_TxCpltCallback+0x26>
		OLED_UpdateScreen(); // ta funkcja to powod dlaczego w tym pliku calback jest
 80011f0:	f7ff ffc4 	bl	800117c <OLED_UpdateScreen>
	}else{
		dmaCounter=0;
		dmaTransferComplete=1;
	}
}
 80011f4:	e005      	b.n	8001202 <HAL_SPI_TxCpltCallback+0x32>
		dmaCounter=0;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_SPI_TxCpltCallback+0x3c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
		dmaTransferComplete=1;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_SPI_TxCpltCallback+0x40>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002d2 	.word	0x200002d2
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    // Trigger the next DMA transferig
//	t1_buff_end[dmaCounter]=micros();
	dmaCounter++;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3301      	adds	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8001228:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8) {
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b07      	cmp	r3, #7
 8001232:	d802      	bhi.n	800123a <HAL_I2C_MemTxCpltCallback+0x26>
		OLED_UpdateScreen();
 8001234:	f7ff ffa2 	bl	800117c <OLED_UpdateScreen>
	}else{
		dmaCounter = 0;
		dmaTransferComplete=1;
	}
}
 8001238:	e005      	b.n	8001246 <HAL_I2C_MemTxCpltCallback+0x32>
		dmaCounter = 0;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		dmaTransferComplete=1;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_I2C_MemTxCpltCallback+0x40>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002d2 	.word	0x200002d2
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 fb94 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_I2C_MspInit+0xec>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d160      	bne.n	800138c <HAL_I2C_MspInit+0xe4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	; 0xc0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4826      	ldr	r0, [pc, #152]	; (800139c <HAL_I2C_MspInit+0xf4>)
 8001302:	f000 ff41 	bl	8002188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_I2C_MspInit+0xf0>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001362:	f000 fb71 	bl	8001a48 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 800136c:	f7ff fbbc 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	201f      	movs	r0, #31
 8001382:	f000 fb2a 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001386:	201f      	movs	r0, #31
 8001388:	f000 fb43 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	200000ec 	.word	0x200000ec
 80013a4:	40026028 	.word	0x40026028

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <HAL_SPI_MspInit+0x11c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d177      	bne.n	80014ba <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_SPI_MspInit+0x120>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141e:	2308      	movs	r3, #8
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142e:	2305      	movs	r3, #5
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4824      	ldr	r0, [pc, #144]	; (80014cc <HAL_SPI_MspInit+0x124>)
 800143a:	f000 fea5 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001450:	2305      	movs	r3, #5
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	481d      	ldr	r0, [pc, #116]	; (80014d0 <HAL_SPI_MspInit+0x128>)
 800145c:	f000 fe94 	bl	8002188 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_SPI_MspInit+0x130>)
 8001464:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 80014a0:	f000 fad2 	bl	8001a48 <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80014aa:	f7ff fb1d 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 80014b2:	649a      	str	r2, [r3, #72]	; 0x48
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_SPI_MspInit+0x12c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40003800 	.word	0x40003800
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	200001a4 	.word	0x200001a4
 80014d8:	40026070 	.word	0x40026070

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d115      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x48>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201c      	movs	r0, #28
 8001510:	f000 fa63 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f000 fa7c 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001582:	230c      	movs	r3, #12
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_UART_MspInit+0x8c>)
 800159e:	f000 fdf3 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f8ee 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream1_IRQHandler+0x10>)
 8001612:	f000 fb41 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000ec 	.word	0x200000ec

08001620 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream4_IRQHandler+0x10>)
 8001626:	f000 fb37 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001a4 	.word	0x200001a4

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f003 fd6f 	bl	800511c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000204 	.word	0x20000204

08001648 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <I2C1_EV_IRQHandler+0x10>)
 800164e:	f001 f87d 	bl	800274c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000098 	.word	0x20000098

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f004 fca6 	bl	8005fdc <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200006d4 	.word	0x200006d4
 80016c4:	200006f0 	.word	0x200006f0

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001708:	4c0b      	ldr	r4, [pc, #44]	; (8001738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001716:	f7ff ffd7 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f004 fc65 	bl	8005fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7fe ff39 	bl	8000594 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001730:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8001734:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001738:	200006ec 	.word	0x200006ec

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f92b 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fd70 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f943 	bl	8001a2e <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f90b 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000014 	.word	0x20000014
 80017e0:	20000010 	.word	0x20000010

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000014 	.word	0x20000014
 8001808:	200006d8 	.word	0x200006d8

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200006d8 	.word	0x200006d8

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff feda 	bl	800180c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e099      	b.n	8001b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a84:	e00f      	b.n	8001aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a86:	f7ff fec1 	bl	800180c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d908      	bls.n	8001aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e078      	b.n	8001b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e8      	bne.n	8001a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_DMA_Init+0x158>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d117      	bne.n	8001b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fa9f 	bl	8002090 <DMA_CheckFifoParam>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b66:	2301      	movs	r3, #1
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fa56 	bl	8002024 <DMA_CalcBaseAndBitshift>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	223f      	movs	r2, #63	; 0x3f
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	f010803f 	.word	0xf010803f

08001ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Start_IT+0x26>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e040      	b.n	8001c4c <HAL_DMA_Start_IT+0xa8>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d12f      	bne.n	8001c3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f9e8 	bl	8001fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0216 	orr.w	r2, r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e005      	b.n	8001c4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00c      	b.n	8001c8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2205      	movs	r2, #5
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca4:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_DMA_IRQHandler+0x248>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a8e      	ldr	r2, [pc, #568]	; (8001ee4 <HAL_DMA_IRQHandler+0x24c>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01a      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d012      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2204      	movs	r2, #4
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2210      	movs	r2, #16
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03c      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2210      	movs	r2, #16
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d024      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	e01f      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
 8001dd8:	e016      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0208 	bic.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 808f 	beq.w	8001f38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8087 	beq.w	8001f38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2220      	movs	r2, #32
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d136      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0216 	bic.w	r2, r2, #22
 8001e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x1da>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	223f      	movs	r2, #63	; 0x3f
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07e      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
        }
        return;
 8001eae:	e079      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01d      	beq.n	8001efa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d031      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e02c      	b.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e01e      	b.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10f      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0210 	bic.w	r2, r2, #16
 8001f16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d032      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2205      	movs	r2, #5
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d307      	bcc.n	8001f80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f2      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x2cc>
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
 8001fa2:	e000      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fa4:	bf00      	nop
    }
  }
}
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fba:	b2db      	uxtb	r3, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d108      	bne.n	8002008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002006:	e007      	b.n	8002018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3b10      	subs	r3, #16
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <DMA_CalcBaseAndBitshift+0x64>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <DMA_CalcBaseAndBitshift+0x68>)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d909      	bls.n	8002066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
 8002064:	e007      	b.n	8002076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	aaaaaaab 	.word	0xaaaaaaab
 800208c:	08006dcc 	.word	0x08006dcc

08002090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11f      	bne.n	80020ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d856      	bhi.n	800215e <DMA_CheckFifoParam+0xce>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <DMA_CheckFifoParam+0x28>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020db 	.word	0x080020db
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	0800215f 	.word	0x0800215f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d046      	beq.n	8002162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e043      	b.n	8002162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e2:	d140      	bne.n	8002166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e8:	e03d      	b.n	8002166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	d121      	bne.n	8002138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d837      	bhi.n	800216a <DMA_CheckFifoParam+0xda>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <DMA_CheckFifoParam+0x70>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002117 	.word	0x08002117
 8002108:	08002111 	.word	0x08002111
 800210c:	08002129 	.word	0x08002129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e030      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d025      	beq.n	800216e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002126:	e022      	b.n	800216e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002130:	d11f      	bne.n	8002172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002136:	e01c      	b.n	8002172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d903      	bls.n	8002146 <DMA_CheckFifoParam+0xb6>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d003      	beq.n	800214c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002144:	e018      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      break;
 800214a:	e015      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e00b      	b.n	8002176 <DMA_CheckFifoParam+0xe6>
      break;
 800215e:	bf00      	nop
 8002160:	e00a      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
 8002164:	e008      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e006      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e004      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;   
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
    }
  } 
  
  return status; 
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e159      	b.n	8002458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8148 	bne.w	8002452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a2 	beq.w	8002452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b57      	ldr	r3, [pc, #348]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_GPIO_Init+0x2f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x202>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_GPIO_Init+0x2f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x1fe>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a47      	ldr	r2, [pc, #284]	; (8002480 <HAL_GPIO_Init+0x2f8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x1f6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x1f2>
 8002376:	2304      	movs	r3, #4
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237a:	2307      	movs	r3, #7
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x204>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_GPIO_Init+0x304>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <HAL_GPIO_Init+0x304>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_GPIO_Init+0x304>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_GPIO_Init+0x304>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_GPIO_Init+0x304>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002422:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_GPIO_Init+0x304>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_GPIO_Init+0x304>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244c:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_GPIO_Init+0x304>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f aea2 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ac:	e003      	b.n	80024b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e12b      	b.n	800272e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fedc 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002528:	f002 f93c 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800252c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a81      	ldr	r2, [pc, #516]	; (8002738 <HAL_I2C_Init+0x274>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d807      	bhi.n	8002548 <HAL_I2C_Init+0x84>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_I2C_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e006      	b.n	8002556 <HAL_I2C_Init+0x92>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <HAL_I2C_Init+0x27c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e7      	b.n	800272e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a78      	ldr	r2, [pc, #480]	; (8002744 <HAL_I2C_Init+0x280>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_I2C_Init+0x274>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d802      	bhi.n	8002598 <HAL_I2C_Init+0xd4>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	e009      	b.n	80025ac <HAL_I2C_Init+0xe8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4a69      	ldr	r2, [pc, #420]	; (8002748 <HAL_I2C_Init+0x284>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	3301      	adds	r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	495c      	ldr	r1, [pc, #368]	; (8002738 <HAL_I2C_Init+0x274>)
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d819      	bhi.n	8002600 <HAL_I2C_Init+0x13c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e59      	subs	r1, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_I2C_Init+0x138>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e59      	subs	r1, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	e051      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 80025fc:	2304      	movs	r3, #4
 80025fe:	e04f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <HAL_I2C_Init+0x168>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e012      	b.n	8002652 <HAL_I2C_Init+0x18e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x196>
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <HAL_I2C_Init+0x1bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e58      	subs	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6911      	ldr	r1, [r2, #16]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	000186a0 	.word	0x000186a0
 800273c:	001e847f 	.word	0x001e847f
 8002740:	003d08ff 	.word	0x003d08ff
 8002744:	431bde83 	.word	0x431bde83
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b10      	cmp	r3, #16
 800277a:	d003      	beq.n	8002784 <HAL_I2C_EV_IRQHandler+0x38>
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	f040 80c1 	bne.w	8002906 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_I2C_EV_IRQHandler+0x6e>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80027a4:	d003      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0x62>
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_EV_IRQHandler+0x66>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_EV_IRQHandler+0x68>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f000 8132 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <HAL_I2C_EV_IRQHandler+0x92>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	0a5b      	lsrs	r3, r3, #9
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 fb5b 	bl	8003e8c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fcd2 	bl	8003180 <I2C_Master_SB>
 80027dc:	e092      	b.n	8002904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0xb2>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	0a5b      	lsrs	r3, r3, #9
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fd48 	bl	800328c <I2C_Master_ADD10>
 80027fc:	e082      	b.n	8002904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_I2C_EV_IRQHandler+0xd2>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fd62 	bl	80032e0 <I2C_Master_ADDR>
 800281c:	e072      	b.n	8002904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d03b      	beq.n	80028a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	f000 80f3 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	09db      	lsrs	r3, r3, #7
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x11c>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x11c>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f942 	bl	8002aea <I2C_MasterTransmit_TXE>
 8002866:	e04d      	b.n	8002904 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80d6 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	0a5b      	lsrs	r3, r3, #9
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80cf 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	2b21      	cmp	r3, #33	; 0x21
 8002888:	d103      	bne.n	8002892 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f9c9 	bl	8002c22 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002890:	e0c7      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	f040 80c4 	bne.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa37 	bl	8002d0e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a0:	e0bf      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b0:	f000 80b7 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00f      	beq.n	80028e0 <HAL_I2C_EV_IRQHandler+0x194>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <HAL_I2C_EV_IRQHandler+0x194>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 faac 	bl	8002e36 <I2C_MasterReceive_RXNE>
 80028de:	e011      	b.n	8002904 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 809a 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	0a5b      	lsrs	r3, r3, #9
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8093 	beq.w	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fb55 	bl	8002fac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002902:	e08e      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002904:	e08d      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e007      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <HAL_I2C_EV_IRQHandler+0x20e>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002950:	69b9      	ldr	r1, [r7, #24]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 ff13 	bl	800377e <I2C_Slave_ADDR>
 8002958:	e066      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_I2C_EV_IRQHandler+0x22e>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	0a5b      	lsrs	r3, r3, #9
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 ff4e 	bl	8003814 <I2C_Slave_STOPF>
 8002978:	e056      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800297a:	7bbb      	ldrb	r3, [r7, #14]
 800297c:	2b21      	cmp	r3, #33	; 0x21
 800297e:	d002      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0x23a>
 8002980:	7bbb      	ldrb	r3, [r7, #14]
 8002982:	2b29      	cmp	r3, #41	; 0x29
 8002984:	d125      	bne.n	80029d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	09db      	lsrs	r3, r3, #7
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00f      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x266>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a9b      	lsrs	r3, r3, #10
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x266>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fe29 	bl	8003602 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029b0:	e039      	b.n	8002a26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d033      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x2da>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02d      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fe56 	bl	800367c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029d0:	e029      	b.n	8002a26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00f      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a9b      	lsrs	r3, r3, #10
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fe61 	bl	80036be <I2C_SlaveReceive_RXNE>
 80029fc:	e014      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	0a5b      	lsrs	r3, r3, #9
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fe8f 	bl	800373a <I2C_SlaveReceive_BTF>
 8002a1c:	e004      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b00:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d150      	bne.n	8002bb2 <I2C_MasterTransmit_TXE+0xc8>
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b21      	cmp	r3, #33	; 0x21
 8002b14:	d14d      	bne.n	8002bb2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d01d      	beq.n	8002b58 <I2C_MasterTransmit_TXE+0x6e>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d01a      	beq.n	8002b58 <I2C_MasterTransmit_TXE+0x6e>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b28:	d016      	beq.n	8002b58 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b38:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2211      	movs	r2, #17
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff6c 	bl	8002a2e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b56:	e060      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b66:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d107      	bne.n	8002ba2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fb3a 	bl	8001214 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ba0:	e03b      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff3f 	bl	8002a2e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bb0:	e033      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b21      	cmp	r3, #33	; 0x21
 8002bb6:	d005      	beq.n	8002bc4 <I2C_MasterTransmit_TXE+0xda>
 8002bb8:	7bbb      	ldrb	r3, [r7, #14]
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d12d      	bne.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b22      	cmp	r3, #34	; 0x22
 8002bc2:	d12a      	bne.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bdc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002bde:	e01c      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d103      	bne.n	8002bf4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f88e 	bl	8002d0e <I2C_MemoryTransmit_TXE_BTF>
}
 8002bf2:	e012      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c18:	e7ff      	b.n	8002c1a <I2C_MasterTransmit_TXE+0x130>
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b21      	cmp	r3, #33	; 0x21
 8002c3a:	d164      	bne.n	8002d06 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002c6a:	e04c      	b.n	8002d06 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d01d      	beq.n	8002cae <I2C_MasterTransmit_BTF+0x8c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d01a      	beq.n	8002cae <I2C_MasterTransmit_BTF+0x8c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7e:	d016      	beq.n	8002cae <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c8e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2211      	movs	r2, #17
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fec1 	bl	8002a2e <HAL_I2C_MasterTxCpltCallback>
}
 8002cac:	e02b      	b.n	8002d06 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cbc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d107      	bne.n	8002cf8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe fa8f 	bl	8001214 <HAL_I2C_MemTxCpltCallback>
}
 8002cf6:	e006      	b.n	8002d06 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fe94 	bl	8002a2e <HAL_I2C_MasterTxCpltCallback>
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11d      	bne.n	8002d62 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10b      	bne.n	8002d46 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002d44:	e073      	b.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	121b      	asrs	r3, r3, #8
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d60:	e065      	b.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d10b      	bne.n	8002d82 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d80:	e055      	b.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d151      	bne.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b22      	cmp	r3, #34	; 0x22
 8002d8e:	d10d      	bne.n	8002dac <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002daa:	e040      	b.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b21      	cmp	r3, #33	; 0x21
 8002dba:	d112      	bne.n	8002de2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002de0:	e025      	b.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d120      	bne.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b21      	cmp	r3, #33	; 0x21
 8002df0:	d11d      	bne.n	8002e2e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e00:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fe f9f3 	bl	8001214 <HAL_I2C_MemTxCpltCallback>
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b22      	cmp	r3, #34	; 0x22
 8002e48:	f040 80ac 	bne.w	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d921      	bls.n	8002e9e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	f040 808c 	bne.w	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002e9c:	e082      	b.n	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d075      	beq.n	8002f92 <I2C_MasterReceive_RXNE+0x15c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d002      	beq.n	8002eb2 <I2C_MasterReceive_RXNE+0x7c>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d16f      	bne.n	8002f92 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 ffb8 	bl	8003e28 <I2C_WaitOnSTOPRequestThroughIT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d142      	bne.n	8002f44 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002edc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d10a      	bne.n	8002f2e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fdc1 	bl	8002aae <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f2c:	e03a      	b.n	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2212      	movs	r2, #18
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fd80 	bl	8002a42 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f42:	e02f      	b.n	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fd99 	bl	8002ac2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f90:	e008      	b.n	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa0:	605a      	str	r2, [r3, #4]
}
 8002fa2:	e7ff      	b.n	8002fa4 <I2C_MasterReceive_RXNE+0x16e>
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d11b      	bne.n	8002ffc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ffa:	e0bd      	b.n	8003178 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b03      	cmp	r3, #3
 8003004:	d129      	bne.n	800305a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d00a      	beq.n	8003032 <I2C_MasterReceive_BTF+0x86>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d007      	beq.n	8003032 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003058:	e08e      	b.n	8003178 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d176      	bne.n	8003152 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <I2C_MasterReceive_BTF+0xc4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d108      	bne.n	8003082 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e019      	b.n	80030b6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d002      	beq.n	800308e <I2C_MasterReceive_BTF+0xe2>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d108      	bne.n	80030a0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e00a      	b.n	80030b6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d007      	beq.n	80030b6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003110:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d10a      	bne.n	800313c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fcba 	bl	8002aae <HAL_I2C_MemRxCpltCallback>
}
 800313a:	e01d      	b.n	8003178 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2212      	movs	r2, #18
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fc79 	bl	8002a42 <HAL_I2C_MasterRxCpltCallback>
}
 8003150:	e012      	b.n	8003178 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d117      	bne.n	80031c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80031ae:	e067      	b.n	8003280 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	e05d      	b.n	8003280 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031cc:	d133      	bne.n	8003236 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b21      	cmp	r3, #33	; 0x21
 80031d8:	d109      	bne.n	80031ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ea:	611a      	str	r2, [r3, #16]
 80031ec:	e008      	b.n	8003200 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <I2C_Master_SB+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	2b00      	cmp	r3, #0
 8003218:	d032      	beq.n	8003280 <I2C_Master_SB+0x100>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d02d      	beq.n	8003280 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003232:	605a      	str	r2, [r3, #4]
}
 8003234:	e024      	b.n	8003280 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	b29b      	uxth	r3, r3
 8003244:	11db      	asrs	r3, r3, #7
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 0306 	and.w	r3, r3, #6
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f063 030f 	orn	r3, r3, #15
 8003252:	b2da      	uxtb	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]
}
 800325a:	e011      	b.n	8003280 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10d      	bne.n	8003280 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	b29b      	uxth	r3, r3
 800326a:	11db      	asrs	r3, r3, #7
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f063 030e 	orn	r3, r3, #14
 8003278:	b2da      	uxtb	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	b2da      	uxtb	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <I2C_Master_ADD10+0x26>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00c      	beq.n	80032d4 <I2C_Master_ADD10+0x48>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	605a      	str	r2, [r3, #4]
  }
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b091      	sub	sp, #68	; 0x44
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b22      	cmp	r3, #34	; 0x22
 8003308:	f040 8169 	bne.w	80035de <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10f      	bne.n	8003334 <I2C_Master_ADDR+0x54>
 8003314:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d10b      	bne.n	8003334 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	633b      	str	r3, [r7, #48]	; 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	e160      	b.n	80035f6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <I2C_Master_ADDR+0x98>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003344:	d118      	bne.n	8003378 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	651a      	str	r2, [r3, #80]	; 0x50
 8003376:	e13e      	b.n	80035f6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e115      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f040 808a 	bne.w	80034ca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033bc:	d137      	bne.n	800342e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033dc:	d113      	bne.n	8003406 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	e0e7      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e0d3      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2b08      	cmp	r3, #8
 8003432:	d02e      	beq.n	8003492 <I2C_Master_ADDR+0x1b2>
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	2b20      	cmp	r3, #32
 8003438:	d02b      	beq.n	8003492 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343c:	2b12      	cmp	r3, #18
 800343e:	d102      	bne.n	8003446 <I2C_Master_ADDR+0x166>
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	2b01      	cmp	r3, #1
 8003444:	d125      	bne.n	8003492 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	2b04      	cmp	r3, #4
 800344a:	d00e      	beq.n	800346a <I2C_Master_ADDR+0x18a>
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2b02      	cmp	r3, #2
 8003450:	d00b      	beq.n	800346a <I2C_Master_ADDR+0x18a>
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	2b10      	cmp	r3, #16
 8003456:	d008      	beq.n	800346a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e007      	b.n	800347a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003478:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	e0a1      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e085      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d14d      	bne.n	8003570 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d016      	beq.n	8003508 <I2C_Master_ADDR+0x228>
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d013      	beq.n	8003508 <I2C_Master_ADDR+0x228>
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d010      	beq.n	8003508 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003516:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003526:	d117      	bne.n	8003558 <I2C_Master_ADDR+0x278>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800352e:	d00b      	beq.n	8003548 <I2C_Master_ADDR+0x268>
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	2b01      	cmp	r3, #1
 8003534:	d008      	beq.n	8003548 <I2C_Master_ADDR+0x268>
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	2b08      	cmp	r3, #8
 800353a:	d005      	beq.n	8003548 <I2C_Master_ADDR+0x268>
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	2b10      	cmp	r3, #16
 8003540:	d002      	beq.n	8003548 <I2C_Master_ADDR+0x268>
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003556:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e032      	b.n	80035d6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800357e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358e:	d117      	bne.n	80035c0 <I2C_Master_ADDR+0x2e0>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003596:	d00b      	beq.n	80035b0 <I2C_Master_ADDR+0x2d0>
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	2b01      	cmp	r3, #1
 800359c:	d008      	beq.n	80035b0 <I2C_Master_ADDR+0x2d0>
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d005      	beq.n	80035b0 <I2C_Master_ADDR+0x2d0>
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d002      	beq.n	80035b0 <I2C_Master_ADDR+0x2d0>
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d107      	bne.n	80035c0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035dc:	e00b      	b.n	80035f6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	e7ff      	b.n	80035f6 <I2C_Master_ADDR+0x316>
 80035f6:	bf00      	nop
 80035f8:	3744      	adds	r7, #68	; 0x44
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02b      	beq.n	8003674 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <I2C_SlaveTransmit_TXE+0x72>
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b29      	cmp	r3, #41	; 0x29
 800364e:	d111      	bne.n	8003674 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2221      	movs	r2, #33	; 0x21
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2228      	movs	r2, #40	; 0x28
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff f9f1 	bl	8002a56 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02c      	beq.n	8003732 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <I2C_SlaveReceive_RXNE+0x74>
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b2a      	cmp	r3, #42	; 0x2a
 800370c:	d111      	bne.n	8003732 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2222      	movs	r2, #34	; 0x22
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2228      	movs	r2, #40	; 0x28
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff f99c 	bl	8002a6a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d012      	beq.n	8003772 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003798:	2b28      	cmp	r3, #40	; 0x28
 800379a:	d127      	bne.n	80037ec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037aa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	09db      	lsrs	r3, r3, #7
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	81bb      	strh	r3, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037de:	89ba      	ldrh	r2, [r7, #12]
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff f94a 	bl	8002a7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037ea:	e00e      	b.n	800380a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003822:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003832:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003870:	d172      	bne.n	8003958 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b22      	cmp	r3, #34	; 0x22
 8003876:	d002      	beq.n	800387e <I2C_Slave_STOPF+0x6a>
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b2a      	cmp	r3, #42	; 0x2a
 800387c:	d135      	bne.n	80038ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fb78 	bl	8001fac <HAL_DMA_GetState>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d049      	beq.n	8003956 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <I2C_Slave_STOPF+0x258>)
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe f9c0 	bl	8001c54 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03d      	beq.n	8003956 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038e8:	e035      	b.n	8003956 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fb42 	bl	8001fac <HAL_DMA_GetState>
 8003928:	4603      	mov	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d014      	beq.n	8003958 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	4a4e      	ldr	r2, [pc, #312]	; (8003a6c <I2C_Slave_STOPF+0x258>)
 8003934:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe f98a 	bl	8001c54 <HAL_DMA_Abort_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003950:	4610      	mov	r0, r2
 8003952:	4798      	blx	r3
 8003954:	e000      	b.n	8003958 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003956:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03e      	beq.n	80039e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d112      	bne.n	8003996 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d112      	bne.n	80039ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f843 	bl	8003a74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039ee:	e039      	b.n	8003a64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d109      	bne.n	8003a0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2228      	movs	r2, #40	; 0x28
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff f830 	bl	8002a6a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b28      	cmp	r3, #40	; 0x28
 8003a14:	d111      	bne.n	8003a3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <I2C_Slave_STOPF+0x25c>)
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff f831 	bl	8002a9a <HAL_I2C_ListenCpltCallback>
}
 8003a38:	e014      	b.n	8003a64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	2b22      	cmp	r3, #34	; 0x22
 8003a40:	d002      	beq.n	8003a48 <I2C_Slave_STOPF+0x234>
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b22      	cmp	r3, #34	; 0x22
 8003a46:	d10d      	bne.n	8003a64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff f803 	bl	8002a6a <HAL_I2C_SlaveRxCpltCallback>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08003cd9 	.word	0x08003cd9
 8003a70:	ffff0000 	.word	0xffff0000

08003a74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d002      	beq.n	8003a98 <I2C_ITError+0x24>
 8003a92:	7bbb      	ldrb	r3, [r7, #14]
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d10a      	bne.n	8003aae <I2C_ITError+0x3a>
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b22      	cmp	r3, #34	; 0x22
 8003a9c:	d107      	bne.n	8003aae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab4:	2b28      	cmp	r3, #40	; 0x28
 8003ab6:	d107      	bne.n	8003ac8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2228      	movs	r2, #40	; 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ac6:	e015      	b.n	8003af4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d00a      	beq.n	8003aee <I2C_ITError+0x7a>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b60      	cmp	r3, #96	; 0x60
 8003adc:	d007      	beq.n	8003aee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d162      	bne.n	8003bca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d020      	beq.n	8003b64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	4a6a      	ldr	r2, [pc, #424]	; (8003cd0 <I2C_ITError+0x25c>)
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f890 	bl	8001c54 <HAL_DMA_Abort_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8089 	beq.w	8003c4e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4798      	blx	r3
 8003b62:	e074      	b.n	8003c4e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	4a59      	ldr	r2, [pc, #356]	; (8003cd0 <I2C_ITError+0x25c>)
 8003b6a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe f86f 	bl	8001c54 <HAL_DMA_Abort_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d068      	beq.n	8003c4e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d10b      	bne.n	8003ba2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4798      	blx	r3
 8003bc8:	e041      	b.n	8003c4e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b60      	cmp	r3, #96	; 0x60
 8003bd4:	d125      	bne.n	8003c22 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d10b      	bne.n	8003c0a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe ff5b 	bl	8002ad6 <HAL_I2C_AbortCpltCallback>
 8003c20:	e015      	b.n	8003c4e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d10b      	bne.n	8003c48 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe ff3a 	bl	8002ac2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d113      	bne.n	8003cc8 <I2C_ITError+0x254>
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b28      	cmp	r3, #40	; 0x28
 8003ca4:	d110      	bne.n	8003cc8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <I2C_ITError+0x260>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe fee9 	bl	8002a9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	ffff0000 	.word	0xffff0000

08003cd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <I2C_DMAAbort+0x148>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <I2C_DMAAbort+0x14c>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a1a      	lsrs	r2, r3, #8
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00da      	lsls	r2, r3, #3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d1e:	e00a      	b.n	8003d36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d34:	d0ea      	beq.n	8003d0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2200      	movs	r2, #0
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	2200      	movs	r2, #0
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	2200      	movs	r2, #0
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2200      	movs	r2, #0
 8003d8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d10e      	bne.n	8003dc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7fe fe89 	bl	8002ad6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dc4:	e027      	b.n	8003e16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dcc:	2b28      	cmp	r3, #40	; 0x28
 8003dce:	d117      	bne.n	8003e00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2228      	movs	r2, #40	; 0x28
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dfe:	e007      	b.n	8003e10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e10:	6978      	ldr	r0, [r7, #20]
 8003e12:	f7fe fe56 	bl	8002ac2 <HAL_I2C_ErrorCallback>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	2000000c 	.word	0x2000000c
 8003e24:	14f8b589 	.word	0x14f8b589

08003e28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	0a1a      	lsrs	r2, r3, #8
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e008      	b.n	8003e78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e74:	d0e9      	beq.n	8003e4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	2000000c 	.word	0x2000000c
 8003e88:	14f8b589 	.word	0x14f8b589

08003e8c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e9c:	d103      	bne.n	8003ea6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ea4:	e007      	b.n	8003eb6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eae:	d102      	bne.n	8003eb6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e267      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d075      	beq.n	8003fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee2:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d00c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b82      	ldr	r3, [pc, #520]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	4b7e      	ldr	r3, [pc, #504]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05b      	beq.n	8003fcc <HAL_RCC_OscConfig+0x108>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d157      	bne.n	8003fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e242      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x74>
 8003f2a:	4b76      	ldr	r3, [pc, #472]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a75      	ldr	r2, [pc, #468]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x98>
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6c      	ldr	r2, [pc, #432]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	4b69      	ldr	r3, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a68      	ldr	r2, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fc46 	bl	800180c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fd fc42 	bl	800180c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e207      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xc0>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fc32 	bl	800180c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fd fc2e 	bl	800180c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1f3      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0xe8>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11c      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b44      	ldr	r3, [pc, #272]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e1c7      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	e03a      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004034:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCC_OscConfig+0x244>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd fbe7 	bl	800180c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004042:	f7fd fbe3 	bl	800180c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1a8      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4925      	ldr	r1, [pc, #148]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_OscConfig+0x244>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd fbc6 	bl	800180c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004084:	f7fd fbc2 	bl	800180c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e187      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d036      	beq.n	800411c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_RCC_OscConfig+0x248>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fba6 	bl	800180c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fd fba2 	bl	800180c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e167      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_OscConfig+0x240>)
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x200>
 80040e2:	e01b      	b.n	800411c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_OscConfig+0x248>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fd fb8f 	bl	800180c <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	e00e      	b.n	8004110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f2:	f7fd fb8b 	bl	800180c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d907      	bls.n	8004110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e150      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
 8004104:	40023800 	.word	0x40023800
 8004108:	42470000 	.word	0x42470000
 800410c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ea      	bne.n	80040f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8097 	beq.w	8004258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412e:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	4b7d      	ldr	r3, [pc, #500]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a7c      	ldr	r2, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415a:	4b77      	ldr	r3, [pc, #476]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d118      	bne.n	8004198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004166:	4b74      	ldr	r3, [pc, #464]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a73      	ldr	r2, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004172:	f7fd fb4b 	bl	800180c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fd fb47 	bl	800180c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e10c      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <HAL_RCC_OscConfig+0x474>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d106      	bne.n	80041ae <HAL_RCC_OscConfig+0x2ea>
 80041a0:	4b64      	ldr	r3, [pc, #400]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a63      	ldr	r2, [pc, #396]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	e01c      	b.n	80041e8 <HAL_RCC_OscConfig+0x324>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x30c>
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	4a5e      	ldr	r2, [pc, #376]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
 80041c2:	4b5c      	ldr	r3, [pc, #368]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	e00b      	b.n	80041e8 <HAL_RCC_OscConfig+0x324>
 80041d0:	4b58      	ldr	r3, [pc, #352]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a57      	ldr	r2, [pc, #348]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	4b55      	ldr	r3, [pc, #340]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a54      	ldr	r2, [pc, #336]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 0304 	bic.w	r3, r3, #4
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd fb0c 	bl	800180c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fd fb08 	bl	800180c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0cb      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ee      	beq.n	80041f8 <HAL_RCC_OscConfig+0x334>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421c:	f7fd faf6 	bl	800180c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fd faf2 	bl	800180c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0b5      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ee      	bne.n	8004224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a1 	beq.w	80043a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b08      	cmp	r3, #8
 800426c:	d05c      	beq.n	8004328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d141      	bne.n	80042fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_OscConfig+0x478>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd fac6 	bl	800180c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd fac2 	bl	800180c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e087      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	491b      	ldr	r1, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x478>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fd fa9b 	bl	800180c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042da:	f7fd fa97 	bl	800180c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e05c      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x416>
 80042f8:	e054      	b.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <HAL_RCC_OscConfig+0x478>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fd fa84 	bl	800180c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004308:	f7fd fa80 	bl	800180c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e045      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_OscConfig+0x470>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x444>
 8004326:	e03d      	b.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e038      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
 8004334:	40023800 	.word	0x40023800
 8004338:	40007000 	.word	0x40007000
 800433c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x4ec>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d028      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d121      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d11a      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	4293      	cmp	r3, r2
 800437a:	d111      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0cc      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d90c      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004408:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	494d      	ldr	r1, [pc, #308]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d044      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d119      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d003      	beq.n	8004472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	2b03      	cmp	r3, #3
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e067      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4934      	ldr	r1, [pc, #208]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a4:	f7fd f9b2 	bl	800180c <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fd f9ae 	bl	800180c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e04f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 020c 	and.w	r2, r3, #12
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1eb      	bne.n	80044ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d20c      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e032      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4916      	ldr	r1, [pc, #88]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453a:	f000 f821 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fd f912 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023c00 	.word	0x40023c00
 8004570:	40023800 	.word	0x40023800
 8004574:	08006db4 	.word	0x08006db4
 8004578:	2000000c 	.word	0x2000000c
 800457c:	20000010 	.word	0x20000010

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b094      	sub	sp, #80	; 0x50
 8004586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	2300      	movs	r3, #0
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004590:	2300      	movs	r3, #0
 8004592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004598:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d00d      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x40>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	f200 80e1 	bhi.w	800476c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x34>
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x3a>
 80045b2:	e0db      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b73      	ldr	r3, [pc, #460]	; (8004784 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045b8:	e0db      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ba:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_GetSysClockFreq+0x208>)
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045be:	e0d8      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c0:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ea:	2300      	movs	r3, #0
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
 80045ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045f2:	4622      	mov	r2, r4
 80045f4:	462b      	mov	r3, r5
 80045f6:	f04f 0000 	mov.w	r0, #0
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	0159      	lsls	r1, r3, #5
 8004600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004604:	0150      	lsls	r0, r2, #5
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4621      	mov	r1, r4
 800460c:	1a51      	subs	r1, r2, r1
 800460e:	6139      	str	r1, [r7, #16]
 8004610:	4629      	mov	r1, r5
 8004612:	eb63 0301 	sbc.w	r3, r3, r1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004624:	4659      	mov	r1, fp
 8004626:	018b      	lsls	r3, r1, #6
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462e:	4651      	mov	r1, sl
 8004630:	018a      	lsls	r2, r1, #6
 8004632:	4651      	mov	r1, sl
 8004634:	ebb2 0801 	subs.w	r8, r2, r1
 8004638:	4659      	mov	r1, fp
 800463a:	eb63 0901 	sbc.w	r9, r3, r1
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004652:	4690      	mov	r8, r2
 8004654:	4699      	mov	r9, r3
 8004656:	4623      	mov	r3, r4
 8004658:	eb18 0303 	adds.w	r3, r8, r3
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	462b      	mov	r3, r5
 8004660:	eb49 0303 	adc.w	r3, r9, r3
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004672:	4629      	mov	r1, r5
 8004674:	024b      	lsls	r3, r1, #9
 8004676:	4621      	mov	r1, r4
 8004678:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800467c:	4621      	mov	r1, r4
 800467e:	024a      	lsls	r2, r1, #9
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004686:	2200      	movs	r2, #0
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004690:	f7fb fdfe 	bl	8000290 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469c:	e058      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	2200      	movs	r2, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	4611      	mov	r1, r2
 80046aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	2300      	movs	r3, #0
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	0159      	lsls	r1, r3, #5
 80046c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ca:	0150      	lsls	r0, r2, #5
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4641      	mov	r1, r8
 80046d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046f0:	ebb2 040a 	subs.w	r4, r2, sl
 80046f4:	eb63 050b 	sbc.w	r5, r3, fp
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	00eb      	lsls	r3, r5, #3
 8004702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004706:	00e2      	lsls	r2, r4, #3
 8004708:	4614      	mov	r4, r2
 800470a:	461d      	mov	r5, r3
 800470c:	4643      	mov	r3, r8
 800470e:	18e3      	adds	r3, r4, r3
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	464b      	mov	r3, r9
 8004714:	eb45 0303 	adc.w	r3, r5, r3
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004726:	4629      	mov	r1, r5
 8004728:	028b      	lsls	r3, r1, #10
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004730:	4621      	mov	r1, r4
 8004732:	028a      	lsls	r2, r1, #10
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473a:	2200      	movs	r2, #0
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	61fa      	str	r2, [r7, #28]
 8004740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004744:	f7fb fda4 	bl	8000290 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_GetSysClockFreq+0x200>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	3301      	adds	r3, #1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476a:	e002      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetSysClockFreq+0x204>)
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004774:	4618      	mov	r0, r3
 8004776:	3750      	adds	r7, #80	; 0x50
 8004778:	46bd      	mov	sp, r7
 800477a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
 8004788:	007a1200 	.word	0x007a1200

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	2000000c 	.word	0x2000000c

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4903      	ldr	r1, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08006dc4 	.word	0x08006dc4

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d0:	f7ff ffdc 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08006dc4 	.word	0x08006dc4

080047f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07b      	b.n	80048fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004816:	d009      	beq.n	800482c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	61da      	str	r2, [r3, #28]
 800481e:	e005      	b.n	800482c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fdae 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b0:	ea42 0103 	orr.w	r1, r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0104 	and.w	r1, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0210 	and.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_SPI_Transmit+0x22>
 8004924:	2302      	movs	r3, #2
 8004926:	e126      	b.n	8004b76 <HAL_SPI_Transmit+0x270>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004930:	f7fc ff6c 	bl	800180c <HAL_GetTick>
 8004934:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494a:	e10b      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Transmit+0x52>
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800495c:	e102      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2203      	movs	r2, #3
 8004962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a4:	d10f      	bne.n	80049c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d007      	beq.n	80049e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ec:	d14b      	bne.n	8004a86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0xf6>
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d13e      	bne.n	8004a7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a20:	e02b      	b.n	8004a7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d112      	bne.n	8004a56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a54:	e011      	b.n	8004a7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a56:	f7fc fed9 	bl	800180c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d803      	bhi.n	8004a6e <HAL_SPI_Transmit+0x168>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_Transmit+0x16e>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a78:	e074      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ce      	bne.n	8004a22 <HAL_SPI_Transmit+0x11c>
 8004a84:	e04c      	b.n	8004b20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Transmit+0x18e>
 8004a8e:	8afb      	ldrh	r3, [r7, #22]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d140      	bne.n	8004b16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aba:	e02c      	b.n	8004b16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d113      	bne.n	8004af2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8004af0:	e011      	b.n	8004b16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fc fe8b 	bl	800180c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x204>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x20a>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b14:	e026      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1cd      	bne.n	8004abc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fa0d 	bl	8004f44 <SPI_EndRxTxTransaction>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e000      	b.n	8004b64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_Transmit_DMA+0x20>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e09b      	b.n	8004cd8 <HAL_SPI_Transmit_DMA+0x158>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb8:	e089      	b.n	8004cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Transmit_DMA+0x46>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bca:	e080      	b.n	8004cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c12:	d10f      	bne.n	8004c34 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	4a29      	ldr	r2, [pc, #164]	; (8004ce0 <HAL_SPI_Transmit_DMA+0x160>)
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <HAL_SPI_Transmit_DMA+0x164>)
 8004c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <HAL_SPI_Transmit_DMA+0x168>)
 8004c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	2200      	movs	r2, #0
 8004c52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c6c:	f7fc ff9a 	bl	8001ba4 <HAL_DMA_Start_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004c8e:	e01e      	b.n	8004cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d007      	beq.n	8004cae <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0220 	orr.w	r2, r2, #32
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0202 	orr.w	r2, r2, #2
 8004ccc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004dd9 	.word	0x08004dd9
 8004ce4:	08004d31 	.word	0x08004d31
 8004ce8:	08004df5 	.word	0x08004df5

08004cec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d22:	b2db      	uxtb	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3e:	f7fc fd65 	bl	800180c <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d03b      	beq.n	8004dcc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0220 	bic.w	r2, r2, #32
 8004d62:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0202 	bic.w	r2, r2, #2
 8004d72:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	2164      	movs	r1, #100	; 0x64
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f000 f8e3 	bl	8004f44 <SPI_EndRxTxTransaction>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7ff ff9b 	bl	8004d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004dca:	e002      	b.n	8004dd2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7fc f9ff 	bl	80011d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ff80 	bl	8004cec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0203 	bic.w	r2, r2, #3
 8004e10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0210 	orr.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff ff6a 	bl	8004d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e44:	f7fc fce2 	bl	800180c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e54:	f7fc fcda 	bl	800180c <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	015b      	lsls	r3, r3, #5
 8004e60:	0d1b      	lsrs	r3, r3, #20
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6a:	e054      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d050      	beq.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e74:	f7fc fcca 	bl	800180c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d902      	bls.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d13d      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea2:	d111      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eac:	d004      	beq.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d107      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed0:	d10f      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e017      	b.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d19b      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f50:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <SPI_EndRxTxTransaction+0x7c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <SPI_EndRxTxTransaction+0x80>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0d5b      	lsrs	r3, r3, #21
 8004f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6e:	d112      	bne.n	8004f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff5a 	bl	8004e34 <SPI_WaitFlagStateUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d0f2      	beq.n	8004f96 <SPI_EndRxTxTransaction+0x52>
 8004fb0:	e000      	b.n	8004fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004fb2:	bf00      	nop
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	2000000c 	.word	0x2000000c
 8004fc4:	165e9f81 	.word	0x165e9f81

08004fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e041      	b.n	800505e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fa74 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fa8a 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e03c      	b.n	80050fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_Base_Start+0xa0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_TIM_Base_Start+0x5c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d013      	beq.n	80050c4 <HAL_TIM_Base_Start+0x5c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1a      	ldr	r2, [pc, #104]	; (800510c <HAL_TIM_Base_Start+0xa4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_Base_Start+0x5c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a19      	ldr	r2, [pc, #100]	; (8005110 <HAL_TIM_Base_Start+0xa8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_Base_Start+0x5c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a17      	ldr	r2, [pc, #92]	; (8005114 <HAL_TIM_Base_Start+0xac>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_Base_Start+0x5c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a16      	ldr	r2, [pc, #88]	; (8005118 <HAL_TIM_Base_Start+0xb0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000

0800511c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d122      	bne.n	8005178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d11b      	bne.n	8005178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0202 	mvn.w	r2, #2
 8005148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9bf 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9b1 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f9c2 	bl	80054f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b04      	cmp	r3, #4
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b04      	cmp	r3, #4
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0204 	mvn.w	r2, #4
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f995 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f987 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f998 	bl	80054f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0208 	mvn.w	r2, #8
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f96b 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f95d 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f96e 	bl	80054f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b10      	cmp	r3, #16
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0210 	mvn.w	r2, #16
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2208      	movs	r2, #8
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f941 	bl	80054e2 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f933 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f944 	bl	80054f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10e      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0201 	mvn.w	r2, #1
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f90d 	bl	80054ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	2b80      	cmp	r3, #128	; 0x80
 80052ac:	d10e      	bne.n	80052cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d107      	bne.n	80052cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fabc 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d107      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f909 	bl	800550a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b20      	cmp	r3, #32
 8005304:	d10e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b20      	cmp	r3, #32
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0220 	mvn.w	r2, #32
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa86 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIM_ConfigClockSource+0x1c>
 8005344:	2302      	movs	r3, #2
 8005346:	e0b4      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x186>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d03e      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0xd4>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	f200 8087 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	f000 8086 	beq.w	800549e <HAL_TIM_ConfigClockSource+0x172>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d87f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d01a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xa6>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d87b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d050      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x11a>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d877      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b50      	cmp	r3, #80	; 0x50
 80053aa:	d03c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xfa>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d873      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d058      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x13a>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d86f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d064      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d86b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d060      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d867      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d05a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	e062      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f000 f997 	bl	8005714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e04f      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 f980 	bl	8005714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005422:	609a      	str	r2, [r3, #8]
      break;
 8005424:	e03c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 f8f4 	bl	8005620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2150      	movs	r1, #80	; 0x50
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f94d 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8005444:	e02c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 f913 	bl	800567e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2160      	movs	r1, #96	; 0x60
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f93d 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8005464:	e01c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 f8d4 	bl	8005620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f92d 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 f924 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8005496:	e003      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e000      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800549e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a34      	ldr	r2, [pc, #208]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a31      	ldr	r2, [pc, #196]	; (8005608 <TIM_Base_SetConfig+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a30      	ldr	r2, [pc, #192]	; (800560c <TIM_Base_SetConfig+0xec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <TIM_Base_SetConfig+0xf0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a25      	ldr	r2, [pc, #148]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a22      	ldr	r2, [pc, #136]	; (8005608 <TIM_Base_SetConfig+0xe8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a21      	ldr	r2, [pc, #132]	; (800560c <TIM_Base_SetConfig+0xec>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a20      	ldr	r2, [pc, #128]	; (8005610 <TIM_Base_SetConfig+0xf0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <TIM_Base_SetConfig+0xf4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <TIM_Base_SetConfig+0xf8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	; (800561c <TIM_Base_SetConfig+0xfc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 030a 	bic.w	r3, r3, #10
 800565c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567e:	b480      	push	{r7}
 8005680:	b087      	sub	sp, #28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0210 	bic.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f043 0307 	orr.w	r3, r3, #7
 8005700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	431a      	orrs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e050      	b.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d013      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10c      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40014000 	.word	0x40014000

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fe52 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f929 	bl	8005af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08a      	sub	sp, #40	; 0x28
 80058f6:	af02      	add	r7, sp, #8
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d17c      	bne.n	8005a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_UART_Transmit+0x2c>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e075      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_UART_Transmit+0x3e>
 800592c:	2302      	movs	r3, #2
 800592e:	e06e      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fb ff61 	bl	800180c <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d108      	bne.n	8005974 <HAL_UART_Transmit+0x82>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005984:	e02a      	b.n	80059dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f840 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e036      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3302      	adds	r3, #2
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e007      	b.n	80059ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cf      	bne.n	8005986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2140      	movs	r1, #64	; 0x40
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f810 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b090      	sub	sp, #64	; 0x40
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a26:	e050      	b.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d04c      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a36:	f7fb fee9 	bl	800180c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d241      	bcs.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a66:	637a      	str	r2, [r7, #52]	; 0x34
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a9a:	623a      	str	r2, [r7, #32]
 8005a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	69f9      	ldr	r1, [r7, #28]
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e00f      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d09f      	beq.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3740      	adds	r7, #64	; 0x40
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b0c0      	sub	sp, #256	; 0x100
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	68d9      	ldr	r1, [r3, #12]
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	ea40 0301 	orr.w	r3, r0, r1
 8005b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b4c:	f021 010c 	bic.w	r1, r1, #12
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6e:	6999      	ldr	r1, [r3, #24]
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	ea40 0301 	orr.w	r3, r0, r1
 8005b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b8f      	ldr	r3, [pc, #572]	; (8005dc0 <UART_SetConfig+0x2cc>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d005      	beq.n	8005b94 <UART_SetConfig+0xa0>
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b8d      	ldr	r3, [pc, #564]	; (8005dc4 <UART_SetConfig+0x2d0>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d104      	bne.n	8005b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fe fe1a 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8005b98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b9c:	e003      	b.n	8005ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7fe fe01 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	f040 810c 	bne.w	8005dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	eb12 0801 	adds.w	r8, r2, r1
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb43 0901 	adc.w	r9, r3, r1
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf6:	4690      	mov	r8, r2
 8005bf8:	4699      	mov	r9, r3
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	eb18 0303 	adds.w	r3, r8, r3
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c04:	462b      	mov	r3, r5
 8005c06:	eb49 0303 	adc.w	r3, r9, r3
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c22:	460b      	mov	r3, r1
 8005c24:	18db      	adds	r3, r3, r3
 8005c26:	653b      	str	r3, [r7, #80]	; 0x50
 8005c28:	4613      	mov	r3, r2
 8005c2a:	eb42 0303 	adc.w	r3, r2, r3
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c38:	f7fa fb2a 	bl	8000290 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4b61      	ldr	r3, [pc, #388]	; (8005dc8 <UART_SetConfig+0x2d4>)
 8005c42:	fba3 2302 	umull	r2, r3, r3, r2
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	011c      	lsls	r4, r3, #4
 8005c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	1891      	adds	r1, r2, r2
 8005c62:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c64:	415b      	adcs	r3, r3
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c72:	4649      	mov	r1, r9
 8005c74:	eb43 0b01 	adc.w	fp, r3, r1
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	469b      	mov	fp, r3
 8005c90:	4643      	mov	r3, r8
 8005c92:	eb1a 0303 	adds.w	r3, sl, r3
 8005c96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	18db      	adds	r3, r3, r3
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	eb42 0303 	adc.w	r3, r2, r3
 8005cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cce:	f7fa fadf 	bl	8000290 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2301 	umull	r2, r3, r3, r1
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2264      	movs	r2, #100	; 0x64
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	1acb      	subs	r3, r1, r3
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cee:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <UART_SetConfig+0x2d4>)
 8005cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cfc:	441c      	add	r4, r3
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d20:	4641      	mov	r1, r8
 8005d22:	1851      	adds	r1, r2, r1
 8005d24:	6339      	str	r1, [r7, #48]	; 0x30
 8005d26:	4649      	mov	r1, r9
 8005d28:	414b      	adcs	r3, r1
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d38:	4659      	mov	r1, fp
 8005d3a:	00cb      	lsls	r3, r1, #3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d42:	4651      	mov	r1, sl
 8005d44:	00ca      	lsls	r2, r1, #3
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d54:	464b      	mov	r3, r9
 8005d56:	460a      	mov	r2, r1
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d74:	460b      	mov	r3, r1
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d8a:	f7fa fa81 	bl	8000290 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <UART_SetConfig+0x2d4>)
 8005d94:	fba3 1302 	umull	r1, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	2164      	movs	r1, #100	; 0x64
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	3332      	adds	r3, #50	; 0x32
 8005da6:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <UART_SetConfig+0x2d4>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f003 0207 	and.w	r2, r3, #7
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4422      	add	r2, r4
 8005dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dbc:	e105      	b.n	8005fca <UART_SetConfig+0x4d6>
 8005dbe:	bf00      	nop
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40011400 	.word	0x40011400
 8005dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	6239      	str	r1, [r7, #32]
 8005de6:	415b      	adcs	r3, r3
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dee:	4641      	mov	r1, r8
 8005df0:	1854      	adds	r4, r2, r1
 8005df2:	4649      	mov	r1, r9
 8005df4:	eb43 0501 	adc.w	r5, r3, r1
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	00eb      	lsls	r3, r5, #3
 8005e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e06:	00e2      	lsls	r2, r4, #3
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18e3      	adds	r3, r4, r3
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e14:	464b      	mov	r3, r9
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	008b      	lsls	r3, r1, #2
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e44:	4621      	mov	r1, r4
 8005e46:	008a      	lsls	r2, r1, #2
 8005e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e4c:	f7fa fa20 	bl	8000290 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b60      	ldr	r3, [pc, #384]	; (8005fd8 <UART_SetConfig+0x4e4>)
 8005e56:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	011c      	lsls	r4, r3, #4
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	61b9      	str	r1, [r7, #24]
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e80:	4641      	mov	r1, r8
 8005e82:	1851      	adds	r1, r2, r1
 8005e84:	6139      	str	r1, [r7, #16]
 8005e86:	4649      	mov	r1, r9
 8005e88:	414b      	adcs	r3, r1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e98:	4659      	mov	r1, fp
 8005e9a:	00cb      	lsls	r3, r1, #3
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	00ca      	lsls	r2, r1, #3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4642      	mov	r2, r8
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	eb42 0303 	adc.w	r3, r2, r3
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ed8:	4649      	mov	r1, r9
 8005eda:	008b      	lsls	r3, r1, #2
 8005edc:	4641      	mov	r1, r8
 8005ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	008a      	lsls	r2, r1, #2
 8005ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eea:	f7fa f9d1 	bl	8000290 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <UART_SetConfig+0x4e4>)
 8005ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	2164      	movs	r1, #100	; 0x64
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	3332      	adds	r3, #50	; 0x32
 8005f06:	4a34      	ldr	r2, [pc, #208]	; (8005fd8 <UART_SetConfig+0x4e4>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f12:	441c      	add	r4, r3
 8005f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f18:	2200      	movs	r2, #0
 8005f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f1c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f22:	4642      	mov	r2, r8
 8005f24:	464b      	mov	r3, r9
 8005f26:	1891      	adds	r1, r2, r2
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	415b      	adcs	r3, r3
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f32:	4641      	mov	r1, r8
 8005f34:	1851      	adds	r1, r2, r1
 8005f36:	6039      	str	r1, [r7, #0]
 8005f38:	4649      	mov	r1, r9
 8005f3a:	414b      	adcs	r3, r1
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	00cb      	lsls	r3, r1, #3
 8005f4e:	4651      	mov	r1, sl
 8005f50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f54:	4651      	mov	r1, sl
 8005f56:	00ca      	lsls	r2, r1, #3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4642      	mov	r2, r8
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f64:	464b      	mov	r3, r9
 8005f66:	460a      	mov	r2, r1
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	663b      	str	r3, [r7, #96]	; 0x60
 8005f78:	667a      	str	r2, [r7, #100]	; 0x64
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f86:	4649      	mov	r1, r9
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f90:	4641      	mov	r1, r8
 8005f92:	008a      	lsls	r2, r1, #2
 8005f94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f98:	f7fa f97a 	bl	8000290 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <UART_SetConfig+0x4e4>)
 8005fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2164      	movs	r1, #100	; 0x64
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	3332      	adds	r3, #50	; 0x32
 8005fb4:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <UART_SetConfig+0x4e4>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4422      	add	r2, r4
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	bf00      	nop
 8005fcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd6:	bf00      	nop
 8005fd8:	51eb851f 	.word	0x51eb851f

08005fdc <__errno>:
 8005fdc:	4b01      	ldr	r3, [pc, #4]	; (8005fe4 <__errno+0x8>)
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000018 	.word	0x20000018

08005fe8 <__libc_init_array>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	4d0d      	ldr	r5, [pc, #52]	; (8006020 <__libc_init_array+0x38>)
 8005fec:	4c0d      	ldr	r4, [pc, #52]	; (8006024 <__libc_init_array+0x3c>)
 8005fee:	1b64      	subs	r4, r4, r5
 8005ff0:	10a4      	asrs	r4, r4, #2
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	42a6      	cmp	r6, r4
 8005ff6:	d109      	bne.n	800600c <__libc_init_array+0x24>
 8005ff8:	4d0b      	ldr	r5, [pc, #44]	; (8006028 <__libc_init_array+0x40>)
 8005ffa:	4c0c      	ldr	r4, [pc, #48]	; (800602c <__libc_init_array+0x44>)
 8005ffc:	f000 fcea 	bl	80069d4 <_init>
 8006000:	1b64      	subs	r4, r4, r5
 8006002:	10a4      	asrs	r4, r4, #2
 8006004:	2600      	movs	r6, #0
 8006006:	42a6      	cmp	r6, r4
 8006008:	d105      	bne.n	8006016 <__libc_init_array+0x2e>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006010:	4798      	blx	r3
 8006012:	3601      	adds	r6, #1
 8006014:	e7ee      	b.n	8005ff4 <__libc_init_array+0xc>
 8006016:	f855 3b04 	ldr.w	r3, [r5], #4
 800601a:	4798      	blx	r3
 800601c:	3601      	adds	r6, #1
 800601e:	e7f2      	b.n	8006006 <__libc_init_array+0x1e>
 8006020:	08006e34 	.word	0x08006e34
 8006024:	08006e34 	.word	0x08006e34
 8006028:	08006e34 	.word	0x08006e34
 800602c:	08006e38 	.word	0x08006e38

08006030 <__itoa>:
 8006030:	1e93      	subs	r3, r2, #2
 8006032:	2b22      	cmp	r3, #34	; 0x22
 8006034:	b510      	push	{r4, lr}
 8006036:	460c      	mov	r4, r1
 8006038:	d904      	bls.n	8006044 <__itoa+0x14>
 800603a:	2300      	movs	r3, #0
 800603c:	700b      	strb	r3, [r1, #0]
 800603e:	461c      	mov	r4, r3
 8006040:	4620      	mov	r0, r4
 8006042:	bd10      	pop	{r4, pc}
 8006044:	2a0a      	cmp	r2, #10
 8006046:	d109      	bne.n	800605c <__itoa+0x2c>
 8006048:	2800      	cmp	r0, #0
 800604a:	da07      	bge.n	800605c <__itoa+0x2c>
 800604c:	232d      	movs	r3, #45	; 0x2d
 800604e:	700b      	strb	r3, [r1, #0]
 8006050:	4240      	negs	r0, r0
 8006052:	2101      	movs	r1, #1
 8006054:	4421      	add	r1, r4
 8006056:	f000 f82d 	bl	80060b4 <__utoa>
 800605a:	e7f1      	b.n	8006040 <__itoa+0x10>
 800605c:	2100      	movs	r1, #0
 800605e:	e7f9      	b.n	8006054 <__itoa+0x24>

08006060 <itoa>:
 8006060:	f7ff bfe6 	b.w	8006030 <__itoa>

08006064 <memset>:
 8006064:	4402      	add	r2, r0
 8006066:	4603      	mov	r3, r0
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	f803 1b01 	strb.w	r1, [r3], #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <siprintf>:
 8006074:	b40e      	push	{r1, r2, r3}
 8006076:	b500      	push	{lr}
 8006078:	b09c      	sub	sp, #112	; 0x70
 800607a:	ab1d      	add	r3, sp, #116	; 0x74
 800607c:	9002      	str	r0, [sp, #8]
 800607e:	9006      	str	r0, [sp, #24]
 8006080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006084:	4809      	ldr	r0, [pc, #36]	; (80060ac <siprintf+0x38>)
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	9104      	str	r1, [sp, #16]
 800608a:	4909      	ldr	r1, [pc, #36]	; (80060b0 <siprintf+0x3c>)
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	a902      	add	r1, sp, #8
 8006098:	f000 f8aa 	bl	80061f0 <_svfiprintf_r>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	b01c      	add	sp, #112	; 0x70
 80060a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a8:	b003      	add	sp, #12
 80060aa:	4770      	bx	lr
 80060ac:	20000018 	.word	0x20000018
 80060b0:	ffff0208 	.word	0xffff0208

080060b4 <__utoa>:
 80060b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b6:	4c1f      	ldr	r4, [pc, #124]	; (8006134 <__utoa+0x80>)
 80060b8:	b08b      	sub	sp, #44	; 0x2c
 80060ba:	4605      	mov	r5, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	466e      	mov	r6, sp
 80060c0:	f104 0c20 	add.w	ip, r4, #32
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	6861      	ldr	r1, [r4, #4]
 80060c8:	4637      	mov	r7, r6
 80060ca:	c703      	stmia	r7!, {r0, r1}
 80060cc:	3408      	adds	r4, #8
 80060ce:	4564      	cmp	r4, ip
 80060d0:	463e      	mov	r6, r7
 80060d2:	d1f7      	bne.n	80060c4 <__utoa+0x10>
 80060d4:	7921      	ldrb	r1, [r4, #4]
 80060d6:	7139      	strb	r1, [r7, #4]
 80060d8:	1e91      	subs	r1, r2, #2
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	6038      	str	r0, [r7, #0]
 80060de:	2922      	cmp	r1, #34	; 0x22
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	d904      	bls.n	80060f0 <__utoa+0x3c>
 80060e6:	7019      	strb	r1, [r3, #0]
 80060e8:	460b      	mov	r3, r1
 80060ea:	4618      	mov	r0, r3
 80060ec:	b00b      	add	sp, #44	; 0x2c
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	1e58      	subs	r0, r3, #1
 80060f2:	4684      	mov	ip, r0
 80060f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80060f8:	fb02 5617 	mls	r6, r2, r7, r5
 80060fc:	3628      	adds	r6, #40	; 0x28
 80060fe:	446e      	add	r6, sp
 8006100:	460c      	mov	r4, r1
 8006102:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006106:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800610a:	462e      	mov	r6, r5
 800610c:	42b2      	cmp	r2, r6
 800610e:	f101 0101 	add.w	r1, r1, #1
 8006112:	463d      	mov	r5, r7
 8006114:	d9ee      	bls.n	80060f4 <__utoa+0x40>
 8006116:	2200      	movs	r2, #0
 8006118:	545a      	strb	r2, [r3, r1]
 800611a:	1919      	adds	r1, r3, r4
 800611c:	1aa5      	subs	r5, r4, r2
 800611e:	42aa      	cmp	r2, r5
 8006120:	dae3      	bge.n	80060ea <__utoa+0x36>
 8006122:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006126:	780e      	ldrb	r6, [r1, #0]
 8006128:	7006      	strb	r6, [r0, #0]
 800612a:	3201      	adds	r2, #1
 800612c:	f801 5901 	strb.w	r5, [r1], #-1
 8006130:	e7f4      	b.n	800611c <__utoa+0x68>
 8006132:	bf00      	nop
 8006134:	08006dd4 	.word	0x08006dd4

08006138 <__ssputs_r>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	688e      	ldr	r6, [r1, #8]
 800613e:	429e      	cmp	r6, r3
 8006140:	4682      	mov	sl, r0
 8006142:	460c      	mov	r4, r1
 8006144:	4690      	mov	r8, r2
 8006146:	461f      	mov	r7, r3
 8006148:	d838      	bhi.n	80061bc <__ssputs_r+0x84>
 800614a:	898a      	ldrh	r2, [r1, #12]
 800614c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006150:	d032      	beq.n	80061b8 <__ssputs_r+0x80>
 8006152:	6825      	ldr	r5, [r4, #0]
 8006154:	6909      	ldr	r1, [r1, #16]
 8006156:	eba5 0901 	sub.w	r9, r5, r1
 800615a:	6965      	ldr	r5, [r4, #20]
 800615c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006164:	3301      	adds	r3, #1
 8006166:	444b      	add	r3, r9
 8006168:	106d      	asrs	r5, r5, #1
 800616a:	429d      	cmp	r5, r3
 800616c:	bf38      	it	cc
 800616e:	461d      	movcc	r5, r3
 8006170:	0553      	lsls	r3, r2, #21
 8006172:	d531      	bpl.n	80061d8 <__ssputs_r+0xa0>
 8006174:	4629      	mov	r1, r5
 8006176:	f000 fb63 	bl	8006840 <_malloc_r>
 800617a:	4606      	mov	r6, r0
 800617c:	b950      	cbnz	r0, 8006194 <__ssputs_r+0x5c>
 800617e:	230c      	movs	r3, #12
 8006180:	f8ca 3000 	str.w	r3, [sl]
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	6921      	ldr	r1, [r4, #16]
 8006196:	464a      	mov	r2, r9
 8006198:	f000 fabe 	bl	8006718 <memcpy>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	6126      	str	r6, [r4, #16]
 80061aa:	6165      	str	r5, [r4, #20]
 80061ac:	444e      	add	r6, r9
 80061ae:	eba5 0509 	sub.w	r5, r5, r9
 80061b2:	6026      	str	r6, [r4, #0]
 80061b4:	60a5      	str	r5, [r4, #8]
 80061b6:	463e      	mov	r6, r7
 80061b8:	42be      	cmp	r6, r7
 80061ba:	d900      	bls.n	80061be <__ssputs_r+0x86>
 80061bc:	463e      	mov	r6, r7
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	4632      	mov	r2, r6
 80061c2:	4641      	mov	r1, r8
 80061c4:	f000 fab6 	bl	8006734 <memmove>
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	1b9b      	subs	r3, r3, r6
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	4433      	add	r3, r6
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e7db      	b.n	8006190 <__ssputs_r+0x58>
 80061d8:	462a      	mov	r2, r5
 80061da:	f000 fba5 	bl	8006928 <_realloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1e1      	bne.n	80061a8 <__ssputs_r+0x70>
 80061e4:	6921      	ldr	r1, [r4, #16]
 80061e6:	4650      	mov	r0, sl
 80061e8:	f000 fabe 	bl	8006768 <_free_r>
 80061ec:	e7c7      	b.n	800617e <__ssputs_r+0x46>
	...

080061f0 <_svfiprintf_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4698      	mov	r8, r3
 80061f6:	898b      	ldrh	r3, [r1, #12]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	b09d      	sub	sp, #116	; 0x74
 80061fc:	4607      	mov	r7, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	4614      	mov	r4, r2
 8006202:	d50e      	bpl.n	8006222 <_svfiprintf_r+0x32>
 8006204:	690b      	ldr	r3, [r1, #16]
 8006206:	b963      	cbnz	r3, 8006222 <_svfiprintf_r+0x32>
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	f000 fb19 	bl	8006840 <_malloc_r>
 800620e:	6028      	str	r0, [r5, #0]
 8006210:	6128      	str	r0, [r5, #16]
 8006212:	b920      	cbnz	r0, 800621e <_svfiprintf_r+0x2e>
 8006214:	230c      	movs	r3, #12
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e0d1      	b.n	80063c2 <_svfiprintf_r+0x1d2>
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	616b      	str	r3, [r5, #20]
 8006222:	2300      	movs	r3, #0
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	2320      	movs	r3, #32
 8006228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800622c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006230:	2330      	movs	r3, #48	; 0x30
 8006232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063dc <_svfiprintf_r+0x1ec>
 8006236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800623a:	f04f 0901 	mov.w	r9, #1
 800623e:	4623      	mov	r3, r4
 8006240:	469a      	mov	sl, r3
 8006242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006246:	b10a      	cbz	r2, 800624c <_svfiprintf_r+0x5c>
 8006248:	2a25      	cmp	r2, #37	; 0x25
 800624a:	d1f9      	bne.n	8006240 <_svfiprintf_r+0x50>
 800624c:	ebba 0b04 	subs.w	fp, sl, r4
 8006250:	d00b      	beq.n	800626a <_svfiprintf_r+0x7a>
 8006252:	465b      	mov	r3, fp
 8006254:	4622      	mov	r2, r4
 8006256:	4629      	mov	r1, r5
 8006258:	4638      	mov	r0, r7
 800625a:	f7ff ff6d 	bl	8006138 <__ssputs_r>
 800625e:	3001      	adds	r0, #1
 8006260:	f000 80aa 	beq.w	80063b8 <_svfiprintf_r+0x1c8>
 8006264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006266:	445a      	add	r2, fp
 8006268:	9209      	str	r2, [sp, #36]	; 0x24
 800626a:	f89a 3000 	ldrb.w	r3, [sl]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80a2 	beq.w	80063b8 <_svfiprintf_r+0x1c8>
 8006274:	2300      	movs	r3, #0
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800627e:	f10a 0a01 	add.w	sl, sl, #1
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800628a:	931a      	str	r3, [sp, #104]	; 0x68
 800628c:	4654      	mov	r4, sl
 800628e:	2205      	movs	r2, #5
 8006290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006294:	4851      	ldr	r0, [pc, #324]	; (80063dc <_svfiprintf_r+0x1ec>)
 8006296:	f7f9 ffab 	bl	80001f0 <memchr>
 800629a:	9a04      	ldr	r2, [sp, #16]
 800629c:	b9d8      	cbnz	r0, 80062d6 <_svfiprintf_r+0xe6>
 800629e:	06d0      	lsls	r0, r2, #27
 80062a0:	bf44      	itt	mi
 80062a2:	2320      	movmi	r3, #32
 80062a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a8:	0711      	lsls	r1, r2, #28
 80062aa:	bf44      	itt	mi
 80062ac:	232b      	movmi	r3, #43	; 0x2b
 80062ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b2a      	cmp	r3, #42	; 0x2a
 80062b8:	d015      	beq.n	80062e6 <_svfiprintf_r+0xf6>
 80062ba:	9a07      	ldr	r2, [sp, #28]
 80062bc:	4654      	mov	r4, sl
 80062be:	2000      	movs	r0, #0
 80062c0:	f04f 0c0a 	mov.w	ip, #10
 80062c4:	4621      	mov	r1, r4
 80062c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ca:	3b30      	subs	r3, #48	; 0x30
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d94e      	bls.n	800636e <_svfiprintf_r+0x17e>
 80062d0:	b1b0      	cbz	r0, 8006300 <_svfiprintf_r+0x110>
 80062d2:	9207      	str	r2, [sp, #28]
 80062d4:	e014      	b.n	8006300 <_svfiprintf_r+0x110>
 80062d6:	eba0 0308 	sub.w	r3, r0, r8
 80062da:	fa09 f303 	lsl.w	r3, r9, r3
 80062de:	4313      	orrs	r3, r2
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	46a2      	mov	sl, r4
 80062e4:	e7d2      	b.n	800628c <_svfiprintf_r+0x9c>
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	1d19      	adds	r1, r3, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	9103      	str	r1, [sp, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfbb      	ittet	lt
 80062f2:	425b      	neglt	r3, r3
 80062f4:	f042 0202 	orrlt.w	r2, r2, #2
 80062f8:	9307      	strge	r3, [sp, #28]
 80062fa:	9307      	strlt	r3, [sp, #28]
 80062fc:	bfb8      	it	lt
 80062fe:	9204      	strlt	r2, [sp, #16]
 8006300:	7823      	ldrb	r3, [r4, #0]
 8006302:	2b2e      	cmp	r3, #46	; 0x2e
 8006304:	d10c      	bne.n	8006320 <_svfiprintf_r+0x130>
 8006306:	7863      	ldrb	r3, [r4, #1]
 8006308:	2b2a      	cmp	r3, #42	; 0x2a
 800630a:	d135      	bne.n	8006378 <_svfiprintf_r+0x188>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	9203      	str	r2, [sp, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb8      	it	lt
 8006318:	f04f 33ff 	movlt.w	r3, #4294967295
 800631c:	3402      	adds	r4, #2
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063ec <_svfiprintf_r+0x1fc>
 8006324:	7821      	ldrb	r1, [r4, #0]
 8006326:	2203      	movs	r2, #3
 8006328:	4650      	mov	r0, sl
 800632a:	f7f9 ff61 	bl	80001f0 <memchr>
 800632e:	b140      	cbz	r0, 8006342 <_svfiprintf_r+0x152>
 8006330:	2340      	movs	r3, #64	; 0x40
 8006332:	eba0 000a 	sub.w	r0, r0, sl
 8006336:	fa03 f000 	lsl.w	r0, r3, r0
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	4303      	orrs	r3, r0
 800633e:	3401      	adds	r4, #1
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006346:	4826      	ldr	r0, [pc, #152]	; (80063e0 <_svfiprintf_r+0x1f0>)
 8006348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800634c:	2206      	movs	r2, #6
 800634e:	f7f9 ff4f 	bl	80001f0 <memchr>
 8006352:	2800      	cmp	r0, #0
 8006354:	d038      	beq.n	80063c8 <_svfiprintf_r+0x1d8>
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <_svfiprintf_r+0x1f4>)
 8006358:	bb1b      	cbnz	r3, 80063a2 <_svfiprintf_r+0x1b2>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	3307      	adds	r3, #7
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	3308      	adds	r3, #8
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	4433      	add	r3, r6
 800636a:	9309      	str	r3, [sp, #36]	; 0x24
 800636c:	e767      	b.n	800623e <_svfiprintf_r+0x4e>
 800636e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006372:	460c      	mov	r4, r1
 8006374:	2001      	movs	r0, #1
 8006376:	e7a5      	b.n	80062c4 <_svfiprintf_r+0xd4>
 8006378:	2300      	movs	r3, #0
 800637a:	3401      	adds	r4, #1
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	4619      	mov	r1, r3
 8006380:	f04f 0c0a 	mov.w	ip, #10
 8006384:	4620      	mov	r0, r4
 8006386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800638a:	3a30      	subs	r2, #48	; 0x30
 800638c:	2a09      	cmp	r2, #9
 800638e:	d903      	bls.n	8006398 <_svfiprintf_r+0x1a8>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0c5      	beq.n	8006320 <_svfiprintf_r+0x130>
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	e7c3      	b.n	8006320 <_svfiprintf_r+0x130>
 8006398:	fb0c 2101 	mla	r1, ip, r1, r2
 800639c:	4604      	mov	r4, r0
 800639e:	2301      	movs	r3, #1
 80063a0:	e7f0      	b.n	8006384 <_svfiprintf_r+0x194>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <_svfiprintf_r+0x1f8>)
 80063aa:	a904      	add	r1, sp, #16
 80063ac:	4638      	mov	r0, r7
 80063ae:	f3af 8000 	nop.w
 80063b2:	1c42      	adds	r2, r0, #1
 80063b4:	4606      	mov	r6, r0
 80063b6:	d1d6      	bne.n	8006366 <_svfiprintf_r+0x176>
 80063b8:	89ab      	ldrh	r3, [r5, #12]
 80063ba:	065b      	lsls	r3, r3, #25
 80063bc:	f53f af2c 	bmi.w	8006218 <_svfiprintf_r+0x28>
 80063c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c2:	b01d      	add	sp, #116	; 0x74
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <_svfiprintf_r+0x1f8>)
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f000 f87a 	bl	80064cc <_printf_i>
 80063d8:	e7eb      	b.n	80063b2 <_svfiprintf_r+0x1c2>
 80063da:	bf00      	nop
 80063dc:	08006df9 	.word	0x08006df9
 80063e0:	08006e03 	.word	0x08006e03
 80063e4:	00000000 	.word	0x00000000
 80063e8:	08006139 	.word	0x08006139
 80063ec:	08006dff 	.word	0x08006dff

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	68e5      	ldr	r5, [r4, #12]
 800645a:	6832      	ldr	r2, [r6, #0]
 800645c:	f003 0306 	and.w	r3, r3, #6
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf08      	it	eq
 8006464:	1aad      	subeq	r5, r5, r2
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d8 	beq.w	800669e <_printf_i+0x1d2>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80a3 	beq.w	800663a <_printf_i+0x16e>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	08006685 	.word	0x08006685
 800653c:	080065a9 	.word	0x080065a9
 8006540:	08006667 	.word	0x08006667
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080066a7 	.word	0x080066a7
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800666f 	.word	0x0800666f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e0a3      	b.n	80066c0 <_printf_i+0x1f4>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	0606      	lsls	r6, r0, #24
 800657e:	f101 0304 	add.w	r3, r1, #4
 8006582:	d50a      	bpl.n	800659a <_printf_i+0xce>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	2e00      	cmp	r6, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xc8>
 800658c:	232d      	movs	r3, #45	; 0x2d
 800658e:	4276      	negs	r6, r6
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	485e      	ldr	r0, [pc, #376]	; (8006710 <_printf_i+0x244>)
 8006596:	230a      	movs	r3, #10
 8006598:	e019      	b.n	80065ce <_printf_i+0x102>
 800659a:	680e      	ldr	r6, [r1, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a2:	bf18      	it	ne
 80065a4:	b236      	sxthne	r6, r6
 80065a6:	e7ef      	b.n	8006588 <_printf_i+0xbc>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0601      	lsls	r1, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xec>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xf2>
 80065b8:	0646      	lsls	r6, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe8>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <_printf_i+0x244>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x118>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04d      	beq.n	8006680 <_printf_i+0x1b4>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x11a>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x14c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x14c>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee2 	bl	80063f0 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14c      	bne.n	80066ca <_printf_i+0x1fe>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	4835      	ldr	r0, [pc, #212]	; (8006710 <_printf_i+0x244>)
 800663c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	6029      	str	r1, [r5, #0]
 800664a:	061d      	lsls	r5, r3, #24
 800664c:	d514      	bpl.n	8006678 <_printf_i+0x1ac>
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	bf44      	itt	mi
 8006652:	f043 0320 	orrmi.w	r3, r3, #32
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x196>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7b0      	b.n	80065c8 <_printf_i+0xfc>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f043 0320 	orr.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2378      	movs	r3, #120	; 0x78
 8006670:	4828      	ldr	r0, [pc, #160]	; (8006714 <_printf_i+0x248>)
 8006672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006676:	e7e3      	b.n	8006640 <_printf_i+0x174>
 8006678:	0659      	lsls	r1, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2b6      	uxthmi	r6, r6
 800667e:	e7e6      	b.n	800664e <_printf_i+0x182>
 8006680:	4615      	mov	r5, r2
 8006682:	e7bb      	b.n	80065fc <_printf_i+0x130>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	6826      	ldr	r6, [r4, #0]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	1d18      	adds	r0, r3, #4
 800668c:	6028      	str	r0, [r5, #0]
 800668e:	0635      	lsls	r5, r6, #24
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	d501      	bpl.n	8006698 <_printf_i+0x1cc>
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	e002      	b.n	800669e <_printf_i+0x1d2>
 8006698:	0670      	lsls	r0, r6, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0x1c8>
 800669c:	8019      	strh	r1, [r3, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7ba      	b.n	800661c <_printf_i+0x150>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 fd9c 	bl	80001f0 <memchr>
 80066b8:	b108      	cbz	r0, 80066be <_printf_i+0x1f2>
 80066ba:	1b40      	subs	r0, r0, r5
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x150>
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0ab      	beq.n	8006630 <_printf_i+0x164>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	d413      	bmi.n	8006706 <_printf_i+0x23a>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	4298      	cmp	r0, r3
 80066e4:	bfb8      	it	lt
 80066e6:	4618      	movlt	r0, r3
 80066e8:	e7a4      	b.n	8006634 <_printf_i+0x168>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d09b      	beq.n	8006630 <_printf_i+0x164>
 80066f8:	3501      	adds	r5, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	9903      	ldr	r1, [sp, #12]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	42ab      	cmp	r3, r5
 8006702:	dcf2      	bgt.n	80066ea <_printf_i+0x21e>
 8006704:	e7eb      	b.n	80066de <_printf_i+0x212>
 8006706:	2500      	movs	r5, #0
 8006708:	f104 0619 	add.w	r6, r4, #25
 800670c:	e7f5      	b.n	80066fa <_printf_i+0x22e>
 800670e:	bf00      	nop
 8006710:	08006e0a 	.word	0x08006e0a
 8006714:	08006e1b 	.word	0x08006e1b

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <memmove>:
 8006734:	4288      	cmp	r0, r1
 8006736:	b510      	push	{r4, lr}
 8006738:	eb01 0402 	add.w	r4, r1, r2
 800673c:	d902      	bls.n	8006744 <memmove+0x10>
 800673e:	4284      	cmp	r4, r0
 8006740:	4623      	mov	r3, r4
 8006742:	d807      	bhi.n	8006754 <memmove+0x20>
 8006744:	1e43      	subs	r3, r0, #1
 8006746:	42a1      	cmp	r1, r4
 8006748:	d008      	beq.n	800675c <memmove+0x28>
 800674a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800674e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006752:	e7f8      	b.n	8006746 <memmove+0x12>
 8006754:	4402      	add	r2, r0
 8006756:	4601      	mov	r1, r0
 8006758:	428a      	cmp	r2, r1
 800675a:	d100      	bne.n	800675e <memmove+0x2a>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006766:	e7f7      	b.n	8006758 <memmove+0x24>

08006768 <_free_r>:
 8006768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800676a:	2900      	cmp	r1, #0
 800676c:	d044      	beq.n	80067f8 <_free_r+0x90>
 800676e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006772:	9001      	str	r0, [sp, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f1a1 0404 	sub.w	r4, r1, #4
 800677a:	bfb8      	it	lt
 800677c:	18e4      	addlt	r4, r4, r3
 800677e:	f000 f913 	bl	80069a8 <__malloc_lock>
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <_free_r+0x94>)
 8006784:	9801      	ldr	r0, [sp, #4]
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	b933      	cbnz	r3, 8006798 <_free_r+0x30>
 800678a:	6063      	str	r3, [r4, #4]
 800678c:	6014      	str	r4, [r2, #0]
 800678e:	b003      	add	sp, #12
 8006790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006794:	f000 b90e 	b.w	80069b4 <__malloc_unlock>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d908      	bls.n	80067ae <_free_r+0x46>
 800679c:	6825      	ldr	r5, [r4, #0]
 800679e:	1961      	adds	r1, r4, r5
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf01      	itttt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	1949      	addeq	r1, r1, r5
 80067aa:	6021      	streq	r1, [r4, #0]
 80067ac:	e7ed      	b.n	800678a <_free_r+0x22>
 80067ae:	461a      	mov	r2, r3
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b10b      	cbz	r3, 80067b8 <_free_r+0x50>
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d9fa      	bls.n	80067ae <_free_r+0x46>
 80067b8:	6811      	ldr	r1, [r2, #0]
 80067ba:	1855      	adds	r5, r2, r1
 80067bc:	42a5      	cmp	r5, r4
 80067be:	d10b      	bne.n	80067d8 <_free_r+0x70>
 80067c0:	6824      	ldr	r4, [r4, #0]
 80067c2:	4421      	add	r1, r4
 80067c4:	1854      	adds	r4, r2, r1
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	d1e0      	bne.n	800678e <_free_r+0x26>
 80067cc:	681c      	ldr	r4, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	6053      	str	r3, [r2, #4]
 80067d2:	4421      	add	r1, r4
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	e7da      	b.n	800678e <_free_r+0x26>
 80067d8:	d902      	bls.n	80067e0 <_free_r+0x78>
 80067da:	230c      	movs	r3, #12
 80067dc:	6003      	str	r3, [r0, #0]
 80067de:	e7d6      	b.n	800678e <_free_r+0x26>
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1961      	adds	r1, r4, r5
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf04      	itt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	6063      	str	r3, [r4, #4]
 80067ee:	bf04      	itt	eq
 80067f0:	1949      	addeq	r1, r1, r5
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	6054      	str	r4, [r2, #4]
 80067f6:	e7ca      	b.n	800678e <_free_r+0x26>
 80067f8:	b003      	add	sp, #12
 80067fa:	bd30      	pop	{r4, r5, pc}
 80067fc:	200006dc 	.word	0x200006dc

08006800 <sbrk_aligned>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4e0e      	ldr	r6, [pc, #56]	; (800683c <sbrk_aligned+0x3c>)
 8006804:	460c      	mov	r4, r1
 8006806:	6831      	ldr	r1, [r6, #0]
 8006808:	4605      	mov	r5, r0
 800680a:	b911      	cbnz	r1, 8006812 <sbrk_aligned+0x12>
 800680c:	f000 f8bc 	bl	8006988 <_sbrk_r>
 8006810:	6030      	str	r0, [r6, #0]
 8006812:	4621      	mov	r1, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f000 f8b7 	bl	8006988 <_sbrk_r>
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	d00a      	beq.n	8006834 <sbrk_aligned+0x34>
 800681e:	1cc4      	adds	r4, r0, #3
 8006820:	f024 0403 	bic.w	r4, r4, #3
 8006824:	42a0      	cmp	r0, r4
 8006826:	d007      	beq.n	8006838 <sbrk_aligned+0x38>
 8006828:	1a21      	subs	r1, r4, r0
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f8ac 	bl	8006988 <_sbrk_r>
 8006830:	3001      	adds	r0, #1
 8006832:	d101      	bne.n	8006838 <sbrk_aligned+0x38>
 8006834:	f04f 34ff 	mov.w	r4, #4294967295
 8006838:	4620      	mov	r0, r4
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	200006e0 	.word	0x200006e0

08006840 <_malloc_r>:
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	1ccd      	adds	r5, r1, #3
 8006846:	f025 0503 	bic.w	r5, r5, #3
 800684a:	3508      	adds	r5, #8
 800684c:	2d0c      	cmp	r5, #12
 800684e:	bf38      	it	cc
 8006850:	250c      	movcc	r5, #12
 8006852:	2d00      	cmp	r5, #0
 8006854:	4607      	mov	r7, r0
 8006856:	db01      	blt.n	800685c <_malloc_r+0x1c>
 8006858:	42a9      	cmp	r1, r5
 800685a:	d905      	bls.n	8006868 <_malloc_r+0x28>
 800685c:	230c      	movs	r3, #12
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	2600      	movs	r6, #0
 8006862:	4630      	mov	r0, r6
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006868:	4e2e      	ldr	r6, [pc, #184]	; (8006924 <_malloc_r+0xe4>)
 800686a:	f000 f89d 	bl	80069a8 <__malloc_lock>
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	461c      	mov	r4, r3
 8006872:	bb34      	cbnz	r4, 80068c2 <_malloc_r+0x82>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff ffc2 	bl	8006800 <sbrk_aligned>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	4604      	mov	r4, r0
 8006880:	d14d      	bne.n	800691e <_malloc_r+0xde>
 8006882:	6834      	ldr	r4, [r6, #0]
 8006884:	4626      	mov	r6, r4
 8006886:	2e00      	cmp	r6, #0
 8006888:	d140      	bne.n	800690c <_malloc_r+0xcc>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	4631      	mov	r1, r6
 800688e:	4638      	mov	r0, r7
 8006890:	eb04 0803 	add.w	r8, r4, r3
 8006894:	f000 f878 	bl	8006988 <_sbrk_r>
 8006898:	4580      	cmp	r8, r0
 800689a:	d13a      	bne.n	8006912 <_malloc_r+0xd2>
 800689c:	6821      	ldr	r1, [r4, #0]
 800689e:	3503      	adds	r5, #3
 80068a0:	1a6d      	subs	r5, r5, r1
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	4629      	mov	r1, r5
 80068b0:	4638      	mov	r0, r7
 80068b2:	f7ff ffa5 	bl	8006800 <sbrk_aligned>
 80068b6:	3001      	adds	r0, #1
 80068b8:	d02b      	beq.n	8006912 <_malloc_r+0xd2>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	442b      	add	r3, r5
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	e00e      	b.n	80068e0 <_malloc_r+0xa0>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	1b52      	subs	r2, r2, r5
 80068c6:	d41e      	bmi.n	8006906 <_malloc_r+0xc6>
 80068c8:	2a0b      	cmp	r2, #11
 80068ca:	d916      	bls.n	80068fa <_malloc_r+0xba>
 80068cc:	1961      	adds	r1, r4, r5
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	6025      	str	r5, [r4, #0]
 80068d2:	bf18      	it	ne
 80068d4:	6059      	strne	r1, [r3, #4]
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	bf08      	it	eq
 80068da:	6031      	streq	r1, [r6, #0]
 80068dc:	5162      	str	r2, [r4, r5]
 80068de:	604b      	str	r3, [r1, #4]
 80068e0:	4638      	mov	r0, r7
 80068e2:	f104 060b 	add.w	r6, r4, #11
 80068e6:	f000 f865 	bl	80069b4 <__malloc_unlock>
 80068ea:	f026 0607 	bic.w	r6, r6, #7
 80068ee:	1d23      	adds	r3, r4, #4
 80068f0:	1af2      	subs	r2, r6, r3
 80068f2:	d0b6      	beq.n	8006862 <_malloc_r+0x22>
 80068f4:	1b9b      	subs	r3, r3, r6
 80068f6:	50a3      	str	r3, [r4, r2]
 80068f8:	e7b3      	b.n	8006862 <_malloc_r+0x22>
 80068fa:	6862      	ldr	r2, [r4, #4]
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	bf0c      	ite	eq
 8006900:	6032      	streq	r2, [r6, #0]
 8006902:	605a      	strne	r2, [r3, #4]
 8006904:	e7ec      	b.n	80068e0 <_malloc_r+0xa0>
 8006906:	4623      	mov	r3, r4
 8006908:	6864      	ldr	r4, [r4, #4]
 800690a:	e7b2      	b.n	8006872 <_malloc_r+0x32>
 800690c:	4634      	mov	r4, r6
 800690e:	6876      	ldr	r6, [r6, #4]
 8006910:	e7b9      	b.n	8006886 <_malloc_r+0x46>
 8006912:	230c      	movs	r3, #12
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4638      	mov	r0, r7
 8006918:	f000 f84c 	bl	80069b4 <__malloc_unlock>
 800691c:	e7a1      	b.n	8006862 <_malloc_r+0x22>
 800691e:	6025      	str	r5, [r4, #0]
 8006920:	e7de      	b.n	80068e0 <_malloc_r+0xa0>
 8006922:	bf00      	nop
 8006924:	200006dc 	.word	0x200006dc

08006928 <_realloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	4680      	mov	r8, r0
 800692e:	4614      	mov	r4, r2
 8006930:	460e      	mov	r6, r1
 8006932:	b921      	cbnz	r1, 800693e <_realloc_r+0x16>
 8006934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4611      	mov	r1, r2
 800693a:	f7ff bf81 	b.w	8006840 <_malloc_r>
 800693e:	b92a      	cbnz	r2, 800694c <_realloc_r+0x24>
 8006940:	f7ff ff12 	bl	8006768 <_free_r>
 8006944:	4625      	mov	r5, r4
 8006946:	4628      	mov	r0, r5
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	f000 f838 	bl	80069c0 <_malloc_usable_size_r>
 8006950:	4284      	cmp	r4, r0
 8006952:	4607      	mov	r7, r0
 8006954:	d802      	bhi.n	800695c <_realloc_r+0x34>
 8006956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800695a:	d812      	bhi.n	8006982 <_realloc_r+0x5a>
 800695c:	4621      	mov	r1, r4
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff ff6e 	bl	8006840 <_malloc_r>
 8006964:	4605      	mov	r5, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0ed      	beq.n	8006946 <_realloc_r+0x1e>
 800696a:	42bc      	cmp	r4, r7
 800696c:	4622      	mov	r2, r4
 800696e:	4631      	mov	r1, r6
 8006970:	bf28      	it	cs
 8006972:	463a      	movcs	r2, r7
 8006974:	f7ff fed0 	bl	8006718 <memcpy>
 8006978:	4631      	mov	r1, r6
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fef4 	bl	8006768 <_free_r>
 8006980:	e7e1      	b.n	8006946 <_realloc_r+0x1e>
 8006982:	4635      	mov	r5, r6
 8006984:	e7df      	b.n	8006946 <_realloc_r+0x1e>
	...

08006988 <_sbrk_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_sbrk_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fa fe62 	bl	800165c <_sbrk>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_sbrk_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_sbrk_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200006e4 	.word	0x200006e4

080069a8 <__malloc_lock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__malloc_lock+0x8>)
 80069aa:	f000 b811 	b.w	80069d0 <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	200006e8 	.word	0x200006e8

080069b4 <__malloc_unlock>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__malloc_unlock+0x8>)
 80069b6:	f000 b80c 	b.w	80069d2 <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	200006e8 	.word	0x200006e8

080069c0 <_malloc_usable_size_r>:
 80069c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c4:	1f18      	subs	r0, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfbc      	itt	lt
 80069ca:	580b      	ldrlt	r3, [r1, r0]
 80069cc:	18c0      	addlt	r0, r0, r3
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_acquire_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <__retarget_lock_release_recursive>:
 80069d2:	4770      	bx	lr

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
