
OLED_Universal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006078  08006078  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006080  08006080  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000014  0800609c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800609c  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f656  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  0002f69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000026b1  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e4e  00000000  00000000  00034cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000894e7  00000000  00000000  00045b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ceff6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bd8  00000000  00000000  000cf048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033d0  00000000  00000000  000cfc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005aec 	.word	0x08005aec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005aec 	.word	0x08005aec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 faad 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f871 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f98f 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ee:	f000 f965 	bl	80007bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f939 	bl	8000768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f6:	f000 f8d3 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80004fa:	f000 f8ff 	bl	80006fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80004fe:	f000 ff1d 	bl	800133c <OLED_Init>
  HAL_Delay(1000);
 8000502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000506:	f001 fb0d 	bl	8001b24 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  HAL_Delay(1000);
	  SSD1306_Fill(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f001 f866 	bl	80015dc <SSD1306_Fill>
	  SSD1306_Putstring(2, 2, "DESERT EAGLE", &Arial_new_7x10, SSD1306_COLOR_WHITE);
 8000510:	2301      	movs	r3, #1
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <main+0xe0>)
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <main+0xe4>)
 8000518:	2102      	movs	r1, #2
 800051a:	2002      	movs	r0, #2
 800051c:	f000 fbac 	bl	8000c78 <SSD1306_Putstring>
	  SSD1306_DrawLine(2, 14, 128, 14, SSD1306_COLOR_WHITE);
 8000520:	2301      	movs	r3, #1
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	230e      	movs	r3, #14
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	210e      	movs	r1, #14
 800052a:	2002      	movs	r0, #2
 800052c:	f000 fbd3 	bl	8000cd6 <SSD1306_DrawLine>
	  SSD1306_DrawFilledCircle(95, 6, 4, SSD1306_COLOR_WHITE);
 8000530:	2301      	movs	r3, #1
 8000532:	2204      	movs	r2, #4
 8000534:	2106      	movs	r1, #6
 8000536:	205f      	movs	r0, #95	; 0x5f
 8000538:	f000 fe25 	bl	8001186 <SSD1306_DrawFilledCircle>
	  SSD1306_DrawRectangle(102, 2, 20, 8, SSD1306_COLOR_WHITE);
 800053c:	2301      	movs	r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2308      	movs	r3, #8
 8000542:	2214      	movs	r2, #20
 8000544:	2102      	movs	r1, #2
 8000546:	2066      	movs	r0, #102	; 0x66
 8000548:	f000 fcc0 	bl	8000ecc <SSD1306_DrawRectangle>
	  SSD1306_DrawTriangle(5, 55, 35, 55, 20, 35, SSD1306_COLOR_WHITE);
 800054c:	2301      	movs	r3, #1
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2323      	movs	r3, #35	; 0x23
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2314      	movs	r3, #20
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2337      	movs	r3, #55	; 0x37
 800055a:	2223      	movs	r2, #35	; 0x23
 800055c:	2137      	movs	r1, #55	; 0x37
 800055e:	2005      	movs	r0, #5
 8000560:	f000 fd1e 	bl	8000fa0 <SSD1306_DrawTriangle>
	  SSD1306_DrawFilledTriangle(15, 50, 25, 50, 20, 40, SSD1306_COLOR_WHITE);
 8000564:	2301      	movs	r3, #1
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2328      	movs	r3, #40	; 0x28
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2314      	movs	r3, #20
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2332      	movs	r3, #50	; 0x32
 8000572:	2219      	movs	r2, #25
 8000574:	2132      	movs	r1, #50	; 0x32
 8000576:	200f      	movs	r0, #15
 8000578:	f000 fd43 	bl	8001002 <SSD1306_DrawFilledTriangle>
	  SSD1306_DrawBitmap(30, 23, (const unsigned char*)deagle_56x36, 56, 36, SSD1306_COLOR_WHITE);
 800057c:	2301      	movs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2324      	movs	r3, #36	; 0x24
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2338      	movs	r3, #56	; 0x38
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <main+0xe8>)
 8000588:	2117      	movs	r1, #23
 800058a:	201e      	movs	r0, #30
 800058c:	f000 fa80 	bl	8000a90 <SSD1306_DrawBitmap>

	  SSD1306_DrawBitmap(95, 18, (const unsigned char*)agh_24x44, 24, 44, SSD1306_COLOR_WHITE);
 8000590:	2301      	movs	r3, #1
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	232c      	movs	r3, #44	; 0x2c
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2318      	movs	r3, #24
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0xec>)
 800059c:	2112      	movs	r1, #18
 800059e:	205f      	movs	r0, #95	; 0x5f
 80005a0:	f000 fa76 	bl	8000a90 <SSD1306_DrawBitmap>
	  OLED_UpdateScreen();
 80005a4:	f000 ffbe 	bl	8001524 <OLED_UpdateScreen>
//	  HAL_Delay(4000);

	  SSD1306_ToggleInvert();
 80005a8:	f000 ff32 	bl	8001410 <SSD1306_ToggleInvert>
	  OLED_UpdateScreen();
 80005ac:	f000 ffba 	bl	8001524 <OLED_UpdateScreen>
	  HAL_Delay(2000);
 80005b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b4:	f001 fab6 	bl	8001b24 <HAL_Delay>
	  SSD1306_Fill(0);
 80005b8:	e7a7      	b.n	800050a <main+0x2e>
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000
 80005c0:	08005b04 	.word	0x08005b04
 80005c4:	08005ed8 	.word	0x08005ed8
 80005c8:	08005fd4 	.word	0x08005fd4

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fa7e 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fdda 	bl	800420c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f96d 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f83c 	bl	80046fc <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f957 	bl	800093c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f002 f895 	bl	800280c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f928 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40005400 	.word	0x40005400
 80006f8:	00061a80 	.word	0x00061a80

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2210      	movs	r2, #16
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f004 f9f5 	bl	8004b3c <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f8f0 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000e4 	.word	0x200000e4
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f004 fdb6 	bl	8005310 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f8c7 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000019c 	.word	0x2000019c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_DMA_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_DMA_Init+0x4c>)
 80007cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_DMA_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200c      	movs	r0, #12
 80007e4:	f001 fa9d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007e8:	200c      	movs	r0, #12
 80007ea:	f001 fab6 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200f      	movs	r0, #15
 80007f4:	f001 fa95 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007f8:	200f      	movs	r0, #15
 80007fa:	f001 faae 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <MX_GPIO_Init+0x120>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a40      	ldr	r2, [pc, #256]	; (800092c <MX_GPIO_Init+0x120>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <MX_GPIO_Init+0x120>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <MX_GPIO_Init+0x120>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a39      	ldr	r2, [pc, #228]	; (800092c <MX_GPIO_Init+0x120>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0x120>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0x120>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <MX_GPIO_Init+0x120>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0x120>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <MX_GPIO_Init+0x120>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RES_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000898:	4825      	ldr	r0, [pc, #148]	; (8000930 <MX_GPIO_Init+0x124>)
 800089a:	f001 ff9d 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0x128>)
 80008a4:	f001 ff98 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x12c>)
 80008ae:	f001 ff93 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x128>)
 80008ca:	f001 fe01 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RES_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RES_Pin;
 80008ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0x124>)
 80008e8:	f001 fdf2 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0x128>)
 8000904:	f001 fde4 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000908:	2310      	movs	r3, #16
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000920:	f001 fdd6 	bl	80024d0 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <sh1106_SPI_Write>:
	SH1106_CS_L();
	HAL_SPI_Transmit(&hspi2, data, count, 20);
	SH1106_CS_H(); //?
}

void sh1106_SPI_Write(uint8_t data){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	SH1106_CS_H();
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <sh1106_SPI_Write+0x48>)
 8000958:	f001 ff3e 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 800095c:	2200      	movs	r2, #0
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <sh1106_SPI_Write+0x4c>)
 8000962:	f001 ff39 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <sh1106_SPI_Write+0x48>)
 800096c:	f001 ff34 	bl	80027d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 20);
 8000970:	1df9      	adds	r1, r7, #7
 8000972:	2314      	movs	r3, #20
 8000974:	2201      	movs	r2, #1
 8000976:	4808      	ldr	r0, [pc, #32]	; (8000998 <sh1106_SPI_Write+0x50>)
 8000978:	f004 f969 	bl	8004c4e <HAL_SPI_Transmit>
	SH1106_CS_H();
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <sh1106_SPI_Write+0x48>)
 8000982:	f001 ff29 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800
 8000998:	200000e4 	.word	0x200000e4

0800099c <sh1106_SPI_WriteMulti_DMA>:
#if defined(USE_DMA)
extern volatile uint8_t dmaCounter; //temp



void sh1106_SPI_WriteMulti_DMA(uint8_t* data, uint16_t count) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
//		HAL_Delay(1);
	SH1106_CS_H();
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <sh1106_SPI_WriteMulti_DMA+0x58>)
 80009ae:	f001 ff13 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_DC_H();
 80009b2:	2201      	movs	r2, #1
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <sh1106_SPI_WriteMulti_DMA+0x5c>)
 80009b8:	f001 ff0e 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 80009bc:	2200      	movs	r2, #0
 80009be:	2110      	movs	r1, #16
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <sh1106_SPI_WriteMulti_DMA+0x58>)
 80009c2:	f001 ff09 	bl	80027d8 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Hello, 1!\r\n", 14, HAL_MAX_DELAY);
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	220e      	movs	r2, #14
 80009cc:	490b      	ldr	r1, [pc, #44]	; (80009fc <sh1106_SPI_WriteMulti_DMA+0x60>)
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <sh1106_SPI_WriteMulti_DMA+0x64>)
 80009d0:	f004 fceb 	bl	80053aa <HAL_UART_Transmit>
	HAL_SPI_Transmit_DMA(&hspi2, data, count);
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	461a      	mov	r2, r3
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <sh1106_SPI_WriteMulti_DMA+0x68>)
 80009dc:	f004 fa74 	bl	8004ec8 <HAL_SPI_Transmit_DMA>
//	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {}
//	uint8_t v=2500;
//	while (v>0)
//		v--;
	SH1106_CS_H();
 80009e0:	2201      	movs	r2, #1
 80009e2:	2110      	movs	r1, #16
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <sh1106_SPI_WriteMulti_DMA+0x58>)
 80009e6:	f001 fef7 	bl	80027d8 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40020800 	.word	0x40020800
 80009fc:	08005b14 	.word	0x08005b14
 8000a00:	2000019c 	.word	0x2000019c
 8000a04:	200000e4 	.word	0x200000e4

08000a08 <testowy>:
#endif
#endif

void testowy(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
//	SH1106_CS_H();
	SH1106_RST_L();
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <testowy+0x14>)
 8000a14:	f001 fee0 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40020000 	.word	0x40020000

08000a20 <OLED_Prepare_Interface>:
/////// PREPARE INTERFACE ///////

uint8_t OLED_Prepare_Interface(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
		/* Return false */
		return 0;
	}
#elif defined(INTERFACE_SPI)
	/* Check if LCD connected to SPI */
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET) {
 8000a24:	4816      	ldr	r0, [pc, #88]	; (8000a80 <OLED_Prepare_Interface+0x60>)
 8000a26:	f004 fb19 	bl	800505c <HAL_SPI_GetState>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <OLED_Prepare_Interface+0x14>
		return 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e022      	b.n	8000a7a <OLED_Prepare_Interface+0x5a>
	}
	/*Init SPI*/
	SH1106_CS_H();
 8000a34:	2201      	movs	r2, #1
 8000a36:	2110      	movs	r1, #16
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <OLED_Prepare_Interface+0x64>)
 8000a3a:	f001 fecd 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <OLED_Prepare_Interface+0x68>)
 8000a44:	f001 fec8 	bl	80027d8 <HAL_GPIO_WritePin>
	SH1106_RST_H();
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <OLED_Prepare_Interface+0x6c>)
 8000a50:	f001 fec2 	bl	80027d8 <HAL_GPIO_WritePin>
	/* A little delay */
	HAL_Delay(1); // add delay function in micro (10u)
 8000a54:	2001      	movs	r0, #1
 8000a56:	f001 f865 	bl	8001b24 <HAL_Delay>
	SH1106_RST_L();
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a60:	480a      	ldr	r0, [pc, #40]	; (8000a8c <OLED_Prepare_Interface+0x6c>)
 8000a62:	f001 feb9 	bl	80027d8 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 100u
 8000a66:	2001      	movs	r0, #1
 8000a68:	f001 f85c 	bl	8001b24 <HAL_Delay>
	SH1106_RST_H();
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <OLED_Prepare_Interface+0x6c>)
 8000a74:	f001 feb0 	bl	80027d8 <HAL_GPIO_WritePin>
#endif
	return 1;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e4 	.word	0x200000e4
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <SSD1306_DrawBitmap>:
#include "oled_functions.h"
#define ABS(x)   ((x) > 0 ? (x) : -(x))


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	81fb      	strh	r3, [r7, #14]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	81bb      	strh	r3, [r7, #12]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aaa:	3307      	adds	r3, #7
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da00      	bge.n	8000ab2 <SSD1306_DrawBitmap+0x22>
 8000ab0:	3307      	adds	r3, #7
 8000ab2:	10db      	asrs	r3, r3, #3
 8000ab4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	82bb      	strh	r3, [r7, #20]
 8000abe:	e044      	b.n	8000b4a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	827b      	strh	r3, [r7, #18]
 8000ac4:	e02f      	b.n	8000b26 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ac6:	8a7b      	ldrh	r3, [r7, #18]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
 8000ad6:	e012      	b.n	8000afe <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ad8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000adc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ae0:	fb03 f202 	mul.w	r2, r3, r2
 8000ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da00      	bge.n	8000aee <SSD1306_DrawBitmap+0x5e>
 8000aec:	3307      	adds	r3, #7
 8000aee:	10db      	asrs	r3, r3, #3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da09      	bge.n	8000b1a <SSD1306_DrawBitmap+0x8a>
 8000b06:	89fa      	ldrh	r2, [r7, #14]
 8000b08:	8a7b      	ldrh	r3, [r7, #18]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	89b9      	ldrh	r1, [r7, #12]
 8000b10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fca5 	bl	8001464 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	3301      	adds	r3, #1
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	827b      	strh	r3, [r7, #18]
 8000b26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbc9      	blt.n	8000ac6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	82bb      	strh	r3, [r7, #20]
 8000b3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	81bb      	strh	r3, [r7, #12]
 8000b4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbb4      	blt.n	8000ac0 <SSD1306_DrawBitmap+0x30>
		}
    }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SSD1306_Putchar>:


char SSD1306_Putchar(uint8_t chXpos, uint8_t chYpos, char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	71bb      	strb	r3, [r7, #6]
 8000b70:	4613      	mov	r3, r2
 8000b72:	717b      	strb	r3, [r7, #5]

	uint8_t i, j;
	uint8_t byte, byteWidth, rowWidthBytes;
	if (
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	8812      	ldrh	r2, [r2, #0]
 8000b7a:	4413      	add	r3, r2
	if (
 8000b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7e:	dc05      	bgt.n	8000b8c <SSD1306_Putchar+0x2c>
		SSD1306_HEIGHT <= (chYpos + Font->FontHeight)
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	8852      	ldrh	r2, [r2, #2]
 8000b86:	4413      	add	r3, r2
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000b88:	2b3f      	cmp	r3, #63	; 0x3f
 8000b8a:	dd01      	ble.n	8000b90 <SSD1306_Putchar+0x30>
	) {
		/* Error */
		return 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e06f      	b.n	8000c70 <SSD1306_Putchar+0x110>
	}
	byte = 0; // that variable is useful for greater fonts
 8000b90:	2300      	movs	r3, #0
 8000b92:	737b      	strb	r3, [r7, #13]
	byteWidth = (Font->FontWidth + 7) / 8; // that variable transform bits to bytes of font width
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3307      	adds	r3, #7
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da00      	bge.n	8000ba0 <SSD1306_Putchar+0x40>
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	10db      	asrs	r3, r3, #3
 8000ba2:	733b      	strb	r3, [r7, #12]
	rowWidthBytes = Font->FontHeight * byteWidth;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	885b      	ldrh	r3, [r3, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7b3a      	ldrb	r2, [r7, #12]
 8000bac:	fb12 f303 	smulbb	r3, r2, r3
 8000bb0:	72fb      	strb	r3, [r7, #11]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e054      	b.n	8000c62 <SSD1306_Putchar+0x102>
			for (j = 0; j < Font->FontWidth; j++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73bb      	strb	r3, [r7, #14]
 8000bbc:	e048      	b.n	8000c50 <SSD1306_Putchar+0xf0>
				if(j & 7) // gdy i =1,2,3,4,5,6 - to przesuwamy bity o jeden w lewo w kazdej iteracji
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <SSD1306_Putchar+0x70>
				{
					byte <<= 1;
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
 8000bce:	e012      	b.n	8000bf6 <SSD1306_Putchar+0x96>
				}else /* gdy i==0 to pobieram zerowy element z tablicy,
					   * i==8,==16 itd. to pobieram sasiedni element**/
				{
					byte = Font->data[(ch - 32) * rowWidthBytes + i * byteWidth + j / 8];
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	797a      	ldrb	r2, [r7, #5]
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	7af9      	ldrb	r1, [r7, #11]
 8000bda:	fb02 f101 	mul.w	r1, r2, r1
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	7b38      	ldrb	r0, [r7, #12]
 8000be2:	fb00 f202 	mul.w	r2, r0, r2
 8000be6:	440a      	add	r2, r1
 8000be8:	7bb9      	ldrb	r1, [r7, #14]
 8000bea:	08c9      	lsrs	r1, r1, #3
 8000bec:	b2c9      	uxtb	r1, r1
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	737b      	strb	r3, [r7, #13]
				}
				if (byte & 0x80){
 8000bf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da10      	bge.n	8000c20 <SSD1306_Putchar+0xc0>
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t) color);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b298      	uxth	r0, r3
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	7e3a      	ldrb	r2, [r7, #24]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f000 fc23 	bl	8001464 <SSD1306_DrawPixel>
 8000c1e:	e014      	b.n	8000c4a <SSD1306_Putchar+0xea>
				} else {
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t)!color);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b298      	uxth	r0, r3
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	b299      	uxth	r1, r3
 8000c38:	7e3b      	ldrb	r3, [r7, #24]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2301      	moveq	r3, #1
 8000c40:	2300      	movne	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	f000 fc0d 	bl	8001464 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73bb      	strb	r3, [r7, #14]
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3b0      	bcc.n	8000bbe <SSD1306_Putchar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	885b      	ldrh	r3, [r3, #2]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3a4      	bcc.n	8000bb8 <SSD1306_Putchar+0x58>
				}
			}
		}
	/* Return character written */
	return ch;
 8000c6e:	797b      	ldrb	r3, [r7, #5]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SSD1306_Putstring>:

char SSD1306_Putstring(uint8_t chXpos, uint8_t chYpos, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60ba      	str	r2, [r7, #8]
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	460b      	mov	r3, r1
 8000c88:	73bb      	strb	r3, [r7, #14]

	/* Write characters */
	while (*str) {
 8000c8a:	e01a      	b.n	8000cc2 <SSD1306_Putstring+0x4a>
		/* Check available space in LCD */
		if (SSD1306_Putchar(chXpos, chYpos, *str, Font, color) != *str) {
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	7bb9      	ldrb	r1, [r7, #14]
 8000c92:	7bf8      	ldrb	r0, [r7, #15]
 8000c94:	7e3b      	ldrb	r3, [r7, #24]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f7ff ff61 	bl	8000b60 <SSD1306_Putchar>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d002      	beq.n	8000cb0 <SSD1306_Putstring+0x38>
			/* Return error */
			return *str;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	e00e      	b.n	8000cce <SSD1306_Putstring+0x56>
		}
		/* Increase position */
		chXpos += Font->FontWidth;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	4413      	add	r3, r2
 8000cba:	73fb      	strb	r3, [r7, #15]
		/* Increase string pointer */
		str++;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1e0      	bne.n	8000c8c <SSD1306_Putstring+0x14>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000cd6:	b590      	push	{r4, r7, lr}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4604      	mov	r4, r0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	4603      	mov	r3, r0
 8000cea:	80bb      	strh	r3, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf8:	d901      	bls.n	8000cfe <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000cfa:	237f      	movs	r3, #127	; 0x7f
 8000cfc:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	2b7f      	cmp	r3, #127	; 0x7f
 8000d02:	d901      	bls.n	8000d08 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d04:	237f      	movs	r3, #127	; 0x7f
 8000d06:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0c:	d901      	bls.n	8000d12 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d0e:	233f      	movs	r3, #63	; 0x3f
 8000d10:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d12:	883b      	ldrh	r3, [r7, #0]
 8000d14:	2b3f      	cmp	r3, #63	; 0x3f
 8000d16:	d901      	bls.n	8000d1c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d18:	233f      	movs	r3, #63	; 0x3f
 8000d1a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d205      	bcs.n	8000d30 <SSD1306_DrawLine+0x5a>
 8000d24:	887a      	ldrh	r2, [r7, #2]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	e004      	b.n	8000d3a <SSD1306_DrawLine+0x64>
 8000d30:	88fa      	ldrh	r2, [r7, #6]
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d205      	bcs.n	8000d50 <SSD1306_DrawLine+0x7a>
 8000d44:	883a      	ldrh	r2, [r7, #0]
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	e004      	b.n	8000d5a <SSD1306_DrawLine+0x84>
 8000d50:	88ba      	ldrh	r2, [r7, #4]
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d201      	bcs.n	8000d68 <SSD1306_DrawLine+0x92>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e001      	b.n	8000d6c <SSD1306_DrawLine+0x96>
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000d6e:	88ba      	ldrh	r2, [r7, #4]
 8000d70:	883b      	ldrh	r3, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d201      	bcs.n	8000d7a <SSD1306_DrawLine+0xa4>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e001      	b.n	8000d7e <SSD1306_DrawLine+0xa8>
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000d80:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dd06      	ble.n	8000d9a <SSD1306_DrawLine+0xc4>
 8000d8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d90:	0fda      	lsrs	r2, r3, #31
 8000d92:	4413      	add	r3, r2
 8000d94:	105b      	asrs	r3, r3, #1
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	e006      	b.n	8000da8 <SSD1306_DrawLine+0xd2>
 8000d9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d9e:	0fda      	lsrs	r2, r3, #31
 8000da0:	4413      	add	r3, r2
 8000da2:	105b      	asrs	r3, r3, #1
 8000da4:	425b      	negs	r3, r3
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000daa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d129      	bne.n	8000e06 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000db2:	883a      	ldrh	r2, [r7, #0]
 8000db4:	88bb      	ldrh	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d205      	bcs.n	8000dc6 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000dba:	883b      	ldrh	r3, [r7, #0]
 8000dbc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000dc2:	893b      	ldrh	r3, [r7, #8]
 8000dc4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d205      	bcs.n	8000dda <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000dd6:	893b      	ldrh	r3, [r7, #8]
 8000dd8:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	82bb      	strh	r3, [r7, #20]
 8000dde:	e00c      	b.n	8000dfa <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000de0:	8ab9      	ldrh	r1, [r7, #20]
 8000de2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fb3b 	bl	8001464 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000dee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	82bb      	strh	r3, [r7, #20]
 8000dfa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dfe:	883b      	ldrh	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dded      	ble.n	8000de0 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000e04:	e05f      	b.n	8000ec6 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000e06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d129      	bne.n	8000e62 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e0e:	883a      	ldrh	r2, [r7, #0]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d205      	bcs.n	8000e22 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e1e:	893b      	ldrh	r3, [r7, #8]
 8000e20:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d205      	bcs.n	8000e36 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e32:	893b      	ldrh	r3, [r7, #8]
 8000e34:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	82bb      	strh	r3, [r7, #20]
 8000e3a:	e00c      	b.n	8000e56 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e3c:	8abb      	ldrh	r3, [r7, #20]
 8000e3e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e42:	88b9      	ldrh	r1, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fb0d 	bl	8001464 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	82bb      	strh	r3, [r7, #20]
 8000e56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dded      	ble.n	8000e3c <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000e60:	e031      	b.n	8000ec6 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000e62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e66:	88b9      	ldrh	r1, [r7, #4]
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fafa 	bl	8001464 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000e70:	88fa      	ldrh	r2, [r7, #6]
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d103      	bne.n	8000e80 <SSD1306_DrawLine+0x1aa>
 8000e78:	88ba      	ldrh	r2, [r7, #4]
 8000e7a:	883b      	ldrh	r3, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d021      	beq.n	8000ec4 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000e80:	8afb      	ldrh	r3, [r7, #22]
 8000e82:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000e84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dd08      	ble.n	8000ea4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000e92:	8afa      	ldrh	r2, [r7, #22]
 8000e94:	8a3b      	ldrh	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000ea4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dad8      	bge.n	8000e62 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000eb0:	8afa      	ldrh	r2, [r7, #22]
 8000eb2:	8a7b      	ldrh	r3, [r7, #18]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000eba:	89ba      	ldrh	r2, [r7, #12]
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000ec2:	e7ce      	b.n	8000e62 <SSD1306_DrawLine+0x18c>
			break;
 8000ec4:	bf00      	nop
		}
	}
}
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}

08000ecc <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80bb      	strh	r3, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	2b7f      	cmp	r3, #127	; 0x7f
 8000eee:	d853      	bhi.n	8000f98 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef4:	d850      	bhi.n	8000f98 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	2b7f      	cmp	r3, #127	; 0x7f
 8000efe:	dd03      	ble.n	8000f08 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f06:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f08:	88ba      	ldrh	r2, [r7, #4]
 8000f0a:	883b      	ldrh	r3, [r7, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f10:	dd03      	ble.n	8000f1a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f18:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f1a:	88fa      	ldrh	r2, [r7, #6]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	88bc      	ldrh	r4, [r7, #4]
 8000f24:	88b9      	ldrh	r1, [r7, #4]
 8000f26:	88f8      	ldrh	r0, [r7, #6]
 8000f28:	7e3b      	ldrb	r3, [r7, #24]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	f7ff fed2 	bl	8000cd6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	883b      	ldrh	r3, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29c      	uxth	r4, r3
 8000f42:	88ba      	ldrh	r2, [r7, #4]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	88f8      	ldrh	r0, [r7, #6]
 8000f4c:	7e3b      	ldrb	r3, [r7, #24]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	4622      	mov	r2, r4
 8000f54:	f7ff febf 	bl	8000cd6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000f58:	88ba      	ldrh	r2, [r7, #4]
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29c      	uxth	r4, r3
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	88b9      	ldrh	r1, [r7, #4]
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	7e3b      	ldrb	r3, [r7, #24]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	f7ff feb3 	bl	8000cd6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	4413      	add	r3, r2
 8000f76:	b298      	uxth	r0, r3
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29c      	uxth	r4, r3
 8000f80:	88ba      	ldrh	r2, [r7, #4]
 8000f82:	883b      	ldrh	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88b9      	ldrh	r1, [r7, #4]
 8000f8a:	7e3b      	ldrb	r3, [r7, #24]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	4622      	mov	r2, r4
 8000f92:	f7ff fea0 	bl	8000cd6 <SSD1306_DrawLine>
 8000f96:	e000      	b.n	8000f9a <SSD1306_DrawRectangle+0xce>
		return;
 8000f98:	bf00      	nop
}
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <SSD1306_DrawTriangle>:
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	4623      	mov	r3, r4
 8000fb0:	80fb      	strh	r3, [r7, #6]
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80bb      	strh	r3, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	807b      	strh	r3, [r7, #2]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8000fbe:	883c      	ldrh	r4, [r7, #0]
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	88b9      	ldrh	r1, [r7, #4]
 8000fc4:	88f8      	ldrh	r0, [r7, #6]
 8000fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4623      	mov	r3, r4
 8000fce:	f7ff fe82 	bl	8000cd6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8000fd2:	8bbc      	ldrh	r4, [r7, #28]
 8000fd4:	8b3a      	ldrh	r2, [r7, #24]
 8000fd6:	8839      	ldrh	r1, [r7, #0]
 8000fd8:	8878      	ldrh	r0, [r7, #2]
 8000fda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	f7ff fe78 	bl	8000cd6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8000fe6:	88bc      	ldrh	r4, [r7, #4]
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	8bb9      	ldrh	r1, [r7, #28]
 8000fec:	8b38      	ldrh	r0, [r7, #24]
 8000fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	f7ff fe6e 	bl	8000cd6 <SSD1306_DrawLine>
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}

08001002 <SSD1306_DrawFilledTriangle>:


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8001002:	b590      	push	{r4, r7, lr}
 8001004:	b08d      	sub	sp, #52	; 0x34
 8001006:	af02      	add	r7, sp, #8
 8001008:	4604      	mov	r4, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4611      	mov	r1, r2
 800100e:	461a      	mov	r2, r3
 8001010:	4623      	mov	r3, r4
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	4603      	mov	r3, r0
 8001016:	80bb      	strh	r3, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001020:	2300      	movs	r3, #0
 8001022:	823b      	strh	r3, [r7, #16]
 8001024:	2300      	movs	r3, #0
 8001026:	81fb      	strh	r3, [r7, #14]
 8001028:	2300      	movs	r3, #0
 800102a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800102c:	2300      	movs	r3, #0
 800102e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001030:	2300      	movs	r3, #0
 8001032:	847b      	strh	r3, [r7, #34]	; 0x22
 8001034:	2300      	movs	r3, #0
 8001036:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001038:	2300      	movs	r3, #0
 800103a:	83fb      	strh	r3, [r7, #30]
 800103c:	2300      	movs	r3, #0
 800103e:	83bb      	strh	r3, [r7, #28]
 8001040:	2300      	movs	r3, #0
 8001042:	837b      	strh	r3, [r7, #26]
 8001044:	2300      	movs	r3, #0
 8001046:	833b      	strh	r3, [r7, #24]
 8001048:	2300      	movs	r3, #0
 800104a:	82fb      	strh	r3, [r7, #22]
 800104c:	2300      	movs	r3, #0
 800104e:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	bfb8      	it	lt
 800105e:	425b      	neglt	r3, r3
 8001060:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001062:	883a      	ldrh	r2, [r7, #0]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	bfb8      	it	lt
 800106c:	425b      	neglt	r3, r3
 800106e:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d304      	bcc.n	800108a <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	843b      	strh	r3, [r7, #32]
 8001088:	e005      	b.n	8001096 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 800108a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001096:	883a      	ldrh	r2, [r7, #0]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d304      	bcc.n	80010a8 <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	83bb      	strh	r3, [r7, #28]
 80010a6:	e005      	b.n	80010b4 <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 80010a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ac:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80010ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b2:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 80010b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010bc:	429a      	cmp	r2, r3
 80010be:	db10      	blt.n	80010e2 <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80010c8:	8a3b      	ldrh	r3, [r7, #16]
 80010ca:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80010cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010d0:	0fda      	lsrs	r2, r3, #31
 80010d2:	4413      	add	r3, r2
 80010d4:	105b      	asrs	r3, r3, #1
 80010d6:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80010dc:	8a3b      	ldrh	r3, [r7, #16]
 80010de:	82bb      	strh	r3, [r7, #20]
 80010e0:	e00f      	b.n	8001102 <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f2:	0fda      	lsrs	r2, r3, #31
 80010f4:	4413      	add	r3, r2
 80010f6:	105b      	asrs	r3, r3, #1
 80010f8:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80010fa:	8a3b      	ldrh	r3, [r7, #16]
 80010fc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001102:	2300      	movs	r3, #0
 8001104:	827b      	strh	r3, [r7, #18]
 8001106:	e033      	b.n	8001170 <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8001108:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800110a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800110c:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800110e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001110:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f7ff fddd 	bl	8000cd6 <SSD1306_DrawLine>

		num += numadd;
 800111c:	8b3a      	ldrh	r2, [r7, #24]
 800111e:	8afb      	ldrh	r3, [r7, #22]
 8001120:	4413      	add	r3, r2
 8001122:	b29b      	uxth	r3, r3
 8001124:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001126:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800112a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800112e:	429a      	cmp	r2, r3
 8001130:	db0e      	blt.n	8001150 <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8001132:	8b3a      	ldrh	r2, [r7, #24]
 8001134:	8b7b      	ldrh	r3, [r7, #26]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 800113c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800113e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001150:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001152:	8c3b      	ldrh	r3, [r7, #32]
 8001154:	4413      	add	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 800115a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800115c:	8bbb      	ldrh	r3, [r7, #28]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001168:	b29b      	uxth	r3, r3
 800116a:	3301      	adds	r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	827b      	strh	r3, [r7, #18]
 8001170:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001174:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	ddc5      	ble.n	8001108 <SSD1306_DrawFilledTriangle+0x106>
	}
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	372c      	adds	r7, #44	; 0x2c
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001186:	b590      	push	{r4, r7, lr}
 8001188:	b089      	sub	sp, #36	; 0x24
 800118a:	af02      	add	r7, sp, #8
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4623      	mov	r3, r4
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	80bb      	strh	r3, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	f1c3 0301 	rsb	r3, r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	461a      	mov	r2, r3
 80011b6:	03d2      	lsls	r2, r2, #15
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	88ba      	ldrh	r2, [r7, #4]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	4413      	add	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	787a      	ldrb	r2, [r7, #1]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f000 f945 	bl	8001464 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80011da:	88f8      	ldrh	r0, [r7, #6]
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	787a      	ldrb	r2, [r7, #1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	f000 f93c 	bl	8001464 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	88b9      	ldrh	r1, [r7, #4]
 80011f6:	787a      	ldrb	r2, [r7, #1]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f933 	bl	8001464 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	88b9      	ldrh	r1, [r7, #4]
 8001208:	787a      	ldrb	r2, [r7, #1]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f92a 	bl	8001464 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	b298      	uxth	r0, r3
 8001218:	88b9      	ldrh	r1, [r7, #4]
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4413      	add	r3, r2
 8001220:	b29a      	uxth	r2, r3
 8001222:	88bc      	ldrh	r4, [r7, #4]
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4623      	mov	r3, r4
 800122a:	f7ff fd54 	bl	8000cd6 <SSD1306_DrawLine>

    while (x < y) {
 800122e:	e079      	b.n	8001324 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001230:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0e      	blt.n	8001256 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001244:	8a7b      	ldrh	r3, [r7, #18]
 8001246:	3302      	adds	r3, #2
 8001248:	b29b      	uxth	r3, r3
 800124a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800124c:	8afa      	ldrh	r2, [r7, #22]
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	4413      	add	r3, r2
 8001252:	b29b      	uxth	r3, r3
 8001254:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001256:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800125a:	b29b      	uxth	r3, r3
 800125c:	3301      	adds	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001262:	8abb      	ldrh	r3, [r7, #20]
 8001264:	3302      	adds	r3, #2
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800126a:	8afa      	ldrh	r2, [r7, #22]
 800126c:	8abb      	ldrh	r3, [r7, #20]
 800126e:	4413      	add	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	8a3b      	ldrh	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b298      	uxth	r0, r3
 800127c:	88ba      	ldrh	r2, [r7, #4]
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	4413      	add	r3, r2
 8001282:	b299      	uxth	r1, r3
 8001284:	88fa      	ldrh	r2, [r7, #6]
 8001286:	8a3b      	ldrh	r3, [r7, #16]
 8001288:	4413      	add	r3, r2
 800128a:	b29c      	uxth	r4, r3
 800128c:	88ba      	ldrh	r2, [r7, #4]
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	4413      	add	r3, r2
 8001292:	b29a      	uxth	r2, r3
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	4622      	mov	r2, r4
 800129c:	f7ff fd1b 	bl	8000cd6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	8a3b      	ldrh	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	b298      	uxth	r0, r3
 80012a8:	88ba      	ldrh	r2, [r7, #4]
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b299      	uxth	r1, r3
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	8a3b      	ldrh	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b29c      	uxth	r4, r3
 80012b8:	88ba      	ldrh	r2, [r7, #4]
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b29a      	uxth	r2, r3
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	4622      	mov	r2, r4
 80012c8:	f7ff fd05 	bl	8000cd6 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80012cc:	88fa      	ldrh	r2, [r7, #6]
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	4413      	add	r3, r2
 80012d2:	b298      	uxth	r0, r3
 80012d4:	88ba      	ldrh	r2, [r7, #4]
 80012d6:	8a3b      	ldrh	r3, [r7, #16]
 80012d8:	4413      	add	r3, r2
 80012da:	b299      	uxth	r1, r3
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	b29c      	uxth	r4, r3
 80012e4:	88ba      	ldrh	r2, [r7, #4]
 80012e6:	8a3b      	ldrh	r3, [r7, #16]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	4622      	mov	r2, r4
 80012f4:	f7ff fcef 	bl	8000cd6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80012f8:	88fa      	ldrh	r2, [r7, #6]
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	4413      	add	r3, r2
 80012fe:	b298      	uxth	r0, r3
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	8a3b      	ldrh	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b299      	uxth	r1, r3
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29c      	uxth	r4, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	8a3b      	ldrh	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	4622      	mov	r2, r4
 8001320:	f7ff fcd9 	bl	8000cd6 <SSD1306_DrawLine>
    while (x < y) {
 8001324:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132c:	429a      	cmp	r2, r3
 800132e:	f6ff af7f 	blt.w	8001230 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}

0800133c <OLED_Init>:

#define SSD1306_DEACTIVATE_SCROLL   0x2E // Stop scroll
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7

uint8_t OLED_Init(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	OLED_Prepare_Interface();
 8001340:	f7ff fb6e 	bl	8000a20 <OLED_Prepare_Interface>
	OLED_WRITECMD(0xAE); //display off
 8001344:	20ae      	movs	r0, #174	; 0xae
 8001346:	f7ff faff 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //Set Memory Addressing Mode
 800134a:	2020      	movs	r0, #32
 800134c:	f7ff fafc 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001350:	2010      	movs	r0, #16
 8001352:	f7ff faf9 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001356:	20b0      	movs	r0, #176	; 0xb0
 8001358:	f7ff faf6 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xC8); //Set COM Output Scan Direction
 800135c:	20c8      	movs	r0, #200	; 0xc8
 800135e:	f7ff faf3 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //---set low column address
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff faf0 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //---set high column address
 8001368:	2010      	movs	r0, #16
 800136a:	f7ff faed 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x40); //--set start line address
 800136e:	2040      	movs	r0, #64	; 0x40
 8001370:	f7ff faea 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x81); //--set contrast control register
 8001374:	2081      	movs	r0, #129	; 0x81
 8001376:	f7ff fae7 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xFF);
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff fae4 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA1); //--set segment re-map 0 to 127
 8001380:	20a1      	movs	r0, #161	; 0xa1
 8001382:	f7ff fae1 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA6); //--set normal display
 8001386:	20a6      	movs	r0, #166	; 0xa6
 8001388:	f7ff fade 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA8); //--set multiplex ratio(1 to 64)
 800138c:	20a8      	movs	r0, #168	; 0xa8
 800138e:	f7ff fadb 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x3F); //1/64 duty
 8001392:	203f      	movs	r0, #63	; 0x3f
 8001394:	f7ff fad8 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001398:	20a4      	movs	r0, #164	; 0xa4
 800139a:	f7ff fad5 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD3); //-set display offset
 800139e:	20d3      	movs	r0, #211	; 0xd3
 80013a0:	f7ff fad2 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //-not offset
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff facf 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD5); //--set display clock divide ratio/oscillator frequency
 80013aa:	20d5      	movs	r0, #213	; 0xd5
 80013ac:	f7ff facc 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xF0); //--set divide ratio
 80013b0:	20f0      	movs	r0, #240	; 0xf0
 80013b2:	f7ff fac9 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD9); //--set pre-charge period
 80013b6:	20d9      	movs	r0, #217	; 0xd9
 80013b8:	f7ff fac6 	bl	8000948 <sh1106_SPI_Write>
		OLED_WRITECMD(0x11); //--set pre-charge period
 80013bc:	2011      	movs	r0, #17
 80013be:	f7ff fac3 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x22); //
 80013c2:	2022      	movs	r0, #34	; 0x22
 80013c4:	f7ff fac0 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xDA); //--set com pins hardware configuration
 80013c8:	20da      	movs	r0, #218	; 0xda
 80013ca:	f7ff fabd 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x12);
 80013ce:	2012      	movs	r0, #18
 80013d0:	f7ff faba 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xDB); //--set vcomh
 80013d4:	20db      	movs	r0, #219	; 0xdb
 80013d6:	f7ff fab7 	bl	8000948 <sh1106_SPI_Write>
		OLED_WRITECMD(0x35); //--set vcomh
 80013da:	2035      	movs	r0, #53	; 0x35
 80013dc:	f7ff fab4 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //0x20,0.77xVcc
 80013e0:	2020      	movs	r0, #32
 80013e2:	f7ff fab1 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x8D); //--set DC-DC enablev
 80013e6:	208d      	movs	r0, #141	; 0x8d
 80013e8:	f7ff faae 	bl	8000948 <sh1106_SPI_Write>
//		OLED_WRITECMD(0xAD); //--set DC-DC enable
//		OLED_WRITECMD(0x8B); //--set DC-DC enable
	OLED_WRITECMD(0x14); //
 80013ec:	2014      	movs	r0, #20
 80013ee:	f7ff faab 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xAF); //--turn on SSD1306 panel
 80013f2:	20af      	movs	r0, #175	; 0xaf
 80013f4:	f7ff faa8 	bl	8000948 <sh1106_SPI_Write>

	/*initialised*/
	OLED_DISPLAY.Initialised=1;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <OLED_Init+0xd0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
	/*normal colour*/
	OLED_DISPLAY.Inverted=0;
 80013fe:	4b03      	ldr	r3, [pc, #12]	; (800140c <OLED_Init+0xd0>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	/* Return OK */
	return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001e0 	.word	0x200001e0

08001410 <SSD1306_ToggleInvert>:
//
// GRAM
//
/////////////////////////////////////////////////////////////////////////

void SSD1306_ToggleInvert(void) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
	uint16_t i;
	/* Toggle invert */
	OLED_DISPLAY.Inverted = !OLED_DISPLAY.Inverted;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <SSD1306_ToggleInvert+0x4c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <SSD1306_ToggleInvert+0x4c>)
 8001428:	701a      	strb	r2, [r3, #0]
	/* Do memory toggle */
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	e00a      	b.n	8001446 <SSD1306_ToggleInvert+0x36>
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <SSD1306_ToggleInvert+0x50>)
 8001434:	5cd2      	ldrb	r2, [r2, r3]
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	43d2      	mvns	r2, r2
 800143a:	b2d1      	uxtb	r1, r2
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <SSD1306_ToggleInvert+0x50>)
 800143e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	3301      	adds	r3, #1
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144c:	d3f0      	bcc.n	8001430 <SSD1306_ToggleInvert+0x20>
	}
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	200001e0 	.word	0x200001e0
 8001460:	200001e4 	.word	0x200001e4

08001464 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	460b      	mov	r3, r1
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	70fb      	strb	r3, [r7, #3]
	if (
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	2b7f      	cmp	r3, #127	; 0x7f
 800147a:	d848      	bhi.n	800150e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	2b3f      	cmp	r3, #63	; 0x3f
 8001480:	d845      	bhi.n	800150e <SSD1306_DrawPixel+0xaa>
	) {
		/* Error */
		return;
	}
	/* Check if pixels are inverted */
	if (OLED_DISPLAY.Inverted) {
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <SSD1306_DrawPixel+0xb8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	70fb      	strb	r3, [r7, #3]
	}
	/* Set colour */
	if (color == SSD1306_COLOR_WHITE) {
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11a      	bne.n	80014d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	b298      	uxth	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	01db      	lsls	r3, r3, #7
 80014aa:	4413      	add	r3, r2
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <SSD1306_DrawPixel+0xbc>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	2101      	movs	r1, #1
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b259      	sxtb	r1, r3
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	b2c9      	uxtb	r1, r1
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <SSD1306_DrawPixel+0xbc>)
 80014d0:	54d1      	strb	r1, [r2, r3]
 80014d2:	e01d      	b.n	8001510 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	b298      	uxth	r0, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	01db      	lsls	r3, r3, #7
 80014e0:	4413      	add	r3, r2
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <SSD1306_DrawPixel+0xbc>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4013      	ands	r3, r2
 80014fc:	b259      	sxtb	r1, r3
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	4603      	mov	r3, r0
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	4413      	add	r3, r2
 8001506:	b2c9      	uxtb	r1, r1
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SSD1306_DrawPixel+0xbc>)
 800150a:	54d1      	strb	r1, [r2, r3]
 800150c:	e000      	b.n	8001510 <SSD1306_DrawPixel+0xac>
		return;
 800150e:	bf00      	nop
	}
}
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200001e0 	.word	0x200001e0
 8001520:	200001e4 	.word	0x200001e4

08001524 <OLED_UpdateScreen>:
#elif defined(USE_DMA)
volatile uint8_t dmaCounter = 0;

extern SPI_HandleTypeDef hspi2; //temp
////////////////////////////////////////////////////
void OLED_UpdateScreen(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if (dmaCounter == -1) {
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <OLED_UpdateScreen+0x3c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
		dmaCounter = 0;
	}
	OLED_WRITECMD(0xB0 + dmaCounter);
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <OLED_UpdateScreen+0x3c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3b50      	subs	r3, #80	; 0x50
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fa06 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00);
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fa03 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10);
 8001542:	2010      	movs	r0, #16
 8001544:	f7ff fa00 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITEDATA_DMA(&SSD1306_Buffer[SSD1306_WIDTH * dmaCounter], SSD1306_WIDTH);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <OLED_UpdateScreen+0x3c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	01db      	lsls	r3, r3, #7
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <OLED_UpdateScreen+0x40>)
 8001552:	4413      	add	r3, r2
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fa20 	bl	800099c <sh1106_SPI_WriteMulti_DMA>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200005e4 	.word	0x200005e4
 8001564:	200001e4 	.word	0x200001e4

08001568 <HAL_I2C_MemTxCpltCallback>:
//I2C DMA-------to dziala
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    // Trigger the next DMA transferig
	dmaCounter ++;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_I2C_MemTxCpltCallback+0x34>)
 800157c:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8) {
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b07      	cmp	r3, #7
 8001586:	d802      	bhi.n	800158e <HAL_I2C_MemTxCpltCallback+0x26>
		OLED_UpdateScreen();
 8001588:	f7ff ffcc 	bl	8001524 <OLED_UpdateScreen>
	}else
		dmaCounter = -1;
}
 800158c:	e002      	b.n	8001594 <HAL_I2C_MemTxCpltCallback+0x2c>
		dmaCounter = -1;
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001590:	22ff      	movs	r2, #255	; 0xff
 8001592:	701a      	strb	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200005e4 	.word	0x200005e4

080015a0 <HAL_SPI_TxCpltCallback>:
//--------------

//------- tu juz lipa
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    // Trigger the next DMA transferig
	dmaCounter ++;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_SPI_TxCpltCallback+0x38>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_SPI_TxCpltCallback+0x38>)
 80015b4:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8) {
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_SPI_TxCpltCallback+0x38>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d802      	bhi.n	80015c6 <HAL_SPI_TxCpltCallback+0x26>
		OLED_UpdateScreen();
 80015c0:	f7ff ffb0 	bl	8001524 <OLED_UpdateScreen>
	}else{
		dmaCounter=-1;
		testowy();
	}
}
 80015c4:	e004      	b.n	80015d0 <HAL_SPI_TxCpltCallback+0x30>
		dmaCounter=-1;
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_SPI_TxCpltCallback+0x38>)
 80015c8:	22ff      	movs	r2, #255	; 0xff
 80015ca:	701a      	strb	r2, [r3, #0]
		testowy();
 80015cc:	f7ff fa1c 	bl	8000a08 <testowy>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200005e4 	.word	0x200005e4

080015dc <SSD1306_Fill>:
//-------
////////////////////////////////////////////////////
#endif


void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	if (OLED_DISPLAY.Inverted) {
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <SSD1306_Fill+0x40>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <SSD1306_Fill+0x20>
		color = (SSD1306_COLOR_t)!color;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	71fb      	strb	r3, [r7, #7]
	}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <SSD1306_Fill+0x2a>
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <SSD1306_Fill+0x2c>
 8001606:	23ff      	movs	r3, #255	; 0xff
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	4619      	mov	r1, r3
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <SSD1306_Fill+0x44>)
 8001610:	f004 fa64 	bl	8005adc <memset>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001e0 	.word	0x200001e0
 8001620:	200001e4 	.word	0x200001e4

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001662:	2007      	movs	r0, #7
 8001664:	f000 fb52 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a33      	ldr	r2, [pc, #204]	; (8001760 <HAL_I2C_MspInit+0xec>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d160      	bne.n	8001758 <HAL_I2C_MspInit+0xe4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a31      	ldr	r2, [pc, #196]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b6:	2312      	movs	r3, #18
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4826      	ldr	r0, [pc, #152]	; (8001768 <HAL_I2C_MspInit+0xf4>)
 80016ce:	f000 feff 	bl	80024d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_I2C_MspInit+0xf0>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_I2C_MspInit+0xf8>)
 80016f0:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <HAL_I2C_MspInit+0xfc>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_I2C_MspInit+0xf8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_I2C_MspInit+0xf8>)
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_I2C_MspInit+0xf8>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_I2C_MspInit+0xf8>)
 800172e:	f000 fb2f 	bl	8001d90 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8001738:	f7ff f900 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_I2C_MspInit+0xf8>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	201f      	movs	r0, #31
 800174e:	f000 fae8 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001752:	201f      	movs	r0, #31
 8001754:	f000 fb01 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005400 	.word	0x40005400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400
 800176c:	20000084 	.word	0x20000084
 8001770:	40026028 	.word	0x40026028

08001774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_SPI_MspInit+0x11c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d177      	bne.n	8001886 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_SPI_MspInit+0x120>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a36      	ldr	r2, [pc, #216]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_SPI_MspInit+0x120>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ea:	2308      	movs	r3, #8
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4824      	ldr	r0, [pc, #144]	; (8001898 <HAL_SPI_MspInit+0x124>)
 8001806:	f000 fe63 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181c:	2305      	movs	r3, #5
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	481d      	ldr	r0, [pc, #116]	; (800189c <HAL_SPI_MspInit+0x128>)
 8001828:	f000 fe52 	bl	80024d0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_SPI_MspInit+0x130>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800186c:	f000 fa90 	bl	8001d90 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001876:	f7ff f861 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 800187e:	649a      	str	r2, [r3, #72]	; 0x48
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_SPI_MspInit+0x12c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40003800 	.word	0x40003800
 8001894:	40023800 	.word	0x40023800
 8001898:	40020800 	.word	0x40020800
 800189c:	40020400 	.word	0x40020400
 80018a0:	2000013c 	.word	0x2000013c
 80018a4:	40026070 	.word	0x40026070

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_UART_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12b      	bne.n	8001922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_UART_MspInit+0x88>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001902:	230c      	movs	r3, #12
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001912:	2307      	movs	r3, #7
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_UART_MspInit+0x8c>)
 800191e:	f000 fdd7 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40004400 	.word	0x40004400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f8ae 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Stream1_IRQHandler+0x10>)
 8001992:	f000 fb25 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000084 	.word	0x20000084

080019a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Stream4_IRQHandler+0x10>)
 80019a6:	f000 fb1b 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000013c 	.word	0x2000013c

080019b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <I2C1_EV_IRQHandler+0x10>)
 80019ba:	f001 f86b 	bl	8002a94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000030 	.word	0x20000030

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f2:	490e      	ldr	r1, [pc, #56]	; (8001a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f4:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f8:	e002      	b.n	8001a00 <LoopCopyDataInit>

080019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fe:	3304      	adds	r3, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a04:	d3f9      	bcc.n	80019fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a08:	4c0b      	ldr	r4, [pc, #44]	; (8001a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a0c:	e001      	b.n	8001a12 <LoopFillZerobss>

08001a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a10:	3204      	adds	r2, #4

08001a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a14:	d3fb      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a16:	f7ff ffd7 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f004 f83b 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7fe fd5d 	bl	80004dc <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a30:	08006088 	.word	0x08006088
  ldr r2, =_sbss
 8001a34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a38:	200005ec 	.word	0x200005ec

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <HAL_Init+0x40>)
 8001a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_Init+0x40>)
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_Init+0x40>)
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f94f 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fdd6 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f967 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f92f 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	2000000c 	.word	0x2000000c

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000010 	.word	0x20000010
 8001b08:	200005e8 	.word	0x200005e8

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200005e8 	.word	0x200005e8

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000010 	.word	0x20000010

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff feb6 	bl	8001b0c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e099      	b.n	8001ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dcc:	e00f      	b.n	8001dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fe9d 	bl	8001b0c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d908      	bls.n	8001dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e078      	b.n	8001ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e8      	bne.n	8001dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_DMA_Init+0x158>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4313      	orrs	r3, r2
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d117      	bne.n	8001eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa9f 	bl	80023d8 <DMA_CheckFifoParam>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e016      	b.n	8001ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa56 	bl	800236c <DMA_CalcBaseAndBitshift>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	223f      	movs	r2, #63	; 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	f010803f 	.word	0xf010803f

08001eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Start_IT+0x26>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e040      	b.n	8001f94 <HAL_DMA_Start_IT+0xa8>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12f      	bne.n	8001f86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f9e8 	bl	8002310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0216 	orr.w	r2, r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e005      	b.n	8001f92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00c      	b.n	8001fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_DMA_IRQHandler+0x248>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a8e      	ldr	r2, [pc, #568]	; (800222c <HAL_DMA_IRQHandler+0x24c>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01a      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2208      	movs	r2, #8
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2204      	movs	r2, #4
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2204      	movs	r2, #4
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2210      	movs	r2, #16
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d043      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03c      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2210      	movs	r2, #16
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d018      	beq.n	8002122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d024      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
 800210e:	e01f      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e016      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0208 	bic.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2220      	movs	r2, #32
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 808f 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8087 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2220      	movs	r2, #32
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b05      	cmp	r3, #5
 8002188:	d136      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0216 	bic.w	r2, r2, #22
 8002198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <HAL_DMA_IRQHandler+0x1da>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	223f      	movs	r2, #63	; 0x3f
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07e      	beq.n	80022ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
        }
        return;
 80021f6:	e079      	b.n	80022ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01d      	beq.n	8002242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	2b00      	cmp	r3, #0
 800221a:	d031      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e02c      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e01e      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	2b00      	cmp	r3, #0
 8002286:	d032      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d022      	beq.n	80022da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2205      	movs	r2, #5
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d307      	bcc.n	80022c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f2      	bne.n	80022ac <HAL_DMA_IRQHandler+0x2cc>
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
 80022ea:	e000      	b.n	80022ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80022ec:	bf00      	nop
    }
  }
}
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002302:	b2db      	uxtb	r3, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800232c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b40      	cmp	r3, #64	; 0x40
 800233c:	d108      	bne.n	8002350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800234e:	e007      	b.n	8002360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3b10      	subs	r3, #16
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <DMA_CalcBaseAndBitshift+0x64>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d909      	bls.n	80023ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	659a      	str	r2, [r3, #88]	; 0x58
 80023ac:	e007      	b.n	80023be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	aaaaaaab 	.word	0xaaaaaaab
 80023d4:	08006070 	.word	0x08006070

080023d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d856      	bhi.n	80024a6 <DMA_CheckFifoParam+0xce>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <DMA_CheckFifoParam+0x28>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002411 	.word	0x08002411
 8002404:	08002423 	.word	0x08002423
 8002408:	08002411 	.word	0x08002411
 800240c:	080024a7 	.word	0x080024a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d046      	beq.n	80024aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002420:	e043      	b.n	80024aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242a:	d140      	bne.n	80024ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002430:	e03d      	b.n	80024ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243a:	d121      	bne.n	8002480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d837      	bhi.n	80024b2 <DMA_CheckFifoParam+0xda>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x70>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002459 	.word	0x08002459
 800244c:	0800245f 	.word	0x0800245f
 8002450:	08002459 	.word	0x08002459
 8002454:	08002471 	.word	0x08002471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e030      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d025      	beq.n	80024b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e022      	b.n	80024b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800247e:	e01c      	b.n	80024ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d903      	bls.n	800248e <DMA_CheckFifoParam+0xb6>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d003      	beq.n	8002494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800248c:	e018      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      break;
 8002492:	e015      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e00b      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024a6:	bf00      	nop
 80024a8:	e00a      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e008      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e006      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e004      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e002      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
    }
  } 
  
  return status; 
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e159      	b.n	80027a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8148 	bne.w	800279a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	2b02      	cmp	r3, #2
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a2 	beq.w	800279a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b57      	ldr	r3, [pc, #348]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a56      	ldr	r2, [pc, #344]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x2e8>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_GPIO_Init+0x2ec>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a49      	ldr	r2, [pc, #292]	; (80027c0 <HAL_GPIO_Init+0x2f0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x202>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_GPIO_Init+0x2f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x1fe>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_GPIO_Init+0x2f8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x1fa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a46      	ldr	r2, [pc, #280]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x1f6>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <HAL_GPIO_Init+0x300>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x1f2>
 80026be:	2304      	movs	r3, #4
 80026c0:	e008      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e004      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x204>
 80026d2:	2300      	movs	r3, #0
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f002 0203 	and.w	r2, r2, #3
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4093      	lsls	r3, r2
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e4:	4935      	ldr	r1, [pc, #212]	; (80027bc <HAL_GPIO_Init+0x2ec>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_GPIO_Init+0x304>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	f67f aea2 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e12b      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe ff1e 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800286e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002870:	f002 f93c 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a81      	ldr	r2, [pc, #516]	; (8002a80 <HAL_I2C_Init+0x274>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d807      	bhi.n	8002890 <HAL_I2C_Init+0x84>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_I2C_Init+0x278>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e006      	b.n	800289e <HAL_I2C_Init+0x92>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a7d      	ldr	r2, [pc, #500]	; (8002a88 <HAL_I2C_Init+0x27c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e7      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a78      	ldr	r2, [pc, #480]	; (8002a8c <HAL_I2C_Init+0x280>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9b      	lsrs	r3, r3, #18
 80028b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_I2C_Init+0x274>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d802      	bhi.n	80028e0 <HAL_I2C_Init+0xd4>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	e009      	b.n	80028f4 <HAL_I2C_Init+0xe8>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_I2C_Init+0x284>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	3301      	adds	r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	495c      	ldr	r1, [pc, #368]	; (8002a80 <HAL_I2C_Init+0x274>)
 8002910:	428b      	cmp	r3, r1
 8002912:	d819      	bhi.n	8002948 <HAL_I2C_Init+0x13c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e59      	subs	r1, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002922:	1c59      	adds	r1, r3, #1
 8002924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002928:	400b      	ands	r3, r1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_I2C_Init+0x138>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e59      	subs	r1, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fbb1 f3f3 	udiv	r3, r1, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	e051      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002944:	2304      	movs	r3, #4
 8002946:	e04f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_I2C_Init+0x168>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e012      	b.n	800299a <HAL_I2C_Init+0x18e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x196>
 800299e:	2301      	movs	r3, #1
 80029a0:	e022      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_I2C_Init+0x1bc>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	440b      	add	r3, r1
 80029b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6809      	ldr	r1, [r1, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6911      	ldr	r1, [r2, #16]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000186a0 	.word	0x000186a0
 8002a84:	001e847f 	.word	0x001e847f
 8002a88:	003d08ff 	.word	0x003d08ff
 8002a8c:	431bde83 	.word	0x431bde83
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d003      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x38>
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	f040 80c1 	bne.w	8002c4e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_I2C_EV_IRQHandler+0x6e>
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002aec:	d003      	beq.n	8002af6 <HAL_I2C_EV_IRQHandler+0x62>
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_EV_IRQHandler+0x66>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x68>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f000 8132 	beq.w	8002d66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <HAL_I2C_EV_IRQHandler+0x92>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	0a5b      	lsrs	r3, r3, #9
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f001 fb5b 	bl	80041d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fcd2 	bl	80034c8 <I2C_Master_SB>
 8002b24:	e092      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fd48 	bl	80035d4 <I2C_Master_ADD10>
 8002b44:	e082      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	0a5b      	lsrs	r3, r3, #9
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fd62 	bl	8003628 <I2C_Master_ADDR>
 8002b64:	e072      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03b      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b80:	f000 80f3 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	09db      	lsrs	r3, r3, #7
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00f      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	0a9b      	lsrs	r3, r3, #10
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f942 	bl	8002e32 <I2C_MasterTransmit_TXE>
 8002bae:	e04d      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80d6 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	0a5b      	lsrs	r3, r3, #9
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80cf 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	2b21      	cmp	r3, #33	; 0x21
 8002bd0:	d103      	bne.n	8002bda <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9c9 	bl	8002f6a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd8:	e0c7      	b.n	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	f040 80c4 	bne.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa37 	bl	8003056 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be8:	e0bf      	b.n	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf8:	f000 80b7 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00f      	beq.n	8002c28 <HAL_I2C_EV_IRQHandler+0x194>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	0a9b      	lsrs	r3, r3, #10
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_I2C_EV_IRQHandler+0x194>
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 faac 	bl	800317e <I2C_MasterReceive_RXNE>
 8002c26:	e011      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 809a 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	0a5b      	lsrs	r3, r3, #9
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8093 	beq.w	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fb55 	bl	80032f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c4a:	e08e      	b.n	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c4c:	e08d      	b.n	8002d6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e007      	b.n	8002c70 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	0a5b      	lsrs	r3, r3, #9
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c98:	69b9      	ldr	r1, [r7, #24]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 ff13 	bl	8003ac6 <I2C_Slave_ADDR>
 8002ca0:	e066      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 ff4e 	bl	8003b5c <I2C_Slave_STOPF>
 8002cc0:	e056      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	2b21      	cmp	r3, #33	; 0x21
 8002cc6:	d002      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x23a>
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	2b29      	cmp	r3, #41	; 0x29
 8002ccc:	d125      	bne.n	8002d1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	09db      	lsrs	r3, r3, #7
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00f      	beq.n	8002cfa <HAL_I2C_EV_IRQHandler+0x266>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	0a9b      	lsrs	r3, r3, #10
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_I2C_EV_IRQHandler+0x266>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fe29 	bl	800394a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf8:	e039      	b.n	8002d6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d033      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x2da>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	0a5b      	lsrs	r3, r3, #9
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02d      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fe56 	bl	80039c4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d18:	e029      	b.n	8002d6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00f      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	0a9b      	lsrs	r3, r3, #10
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fe61 	bl	8003a06 <I2C_SlaveReceive_RXNE>
 8002d44:	e014      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0a5b      	lsrs	r3, r3, #9
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fe8f 	bl	8003a82 <I2C_SlaveReceive_BTF>
 8002d64:	e004      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d66:	bf00      	nop
 8002d68:	e002      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e48:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d150      	bne.n	8002efa <I2C_MasterTransmit_TXE+0xc8>
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b21      	cmp	r3, #33	; 0x21
 8002e5c:	d14d      	bne.n	8002efa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d01d      	beq.n	8002ea0 <I2C_MasterTransmit_TXE+0x6e>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d01a      	beq.n	8002ea0 <I2C_MasterTransmit_TXE+0x6e>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e70:	d016      	beq.n	8002ea0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e80:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2211      	movs	r2, #17
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff6c 	bl	8002d76 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e9e:	e060      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d107      	bne.n	8002eea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fb40 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ee8:	e03b      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff3f 	bl	8002d76 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ef8:	e033      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b21      	cmp	r3, #33	; 0x21
 8002efe:	d005      	beq.n	8002f0c <I2C_MasterTransmit_TXE+0xda>
 8002f00:	7bbb      	ldrb	r3, [r7, #14]
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d12d      	bne.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b22      	cmp	r3, #34	; 0x22
 8002f0a:	d12a      	bne.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f26:	e01c      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d103      	bne.n	8002f3c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f88e 	bl	8003056 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f3a:	e012      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f60:	e7ff      	b.n	8002f62 <I2C_MasterTransmit_TXE+0x130>
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b21      	cmp	r3, #33	; 0x21
 8002f82:	d164      	bne.n	800304e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fb2:	e04c      	b.n	800304e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d01d      	beq.n	8002ff6 <I2C_MasterTransmit_BTF+0x8c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d01a      	beq.n	8002ff6 <I2C_MasterTransmit_BTF+0x8c>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fc6:	d016      	beq.n	8002ff6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fd6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2211      	movs	r2, #17
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fec1 	bl	8002d76 <HAL_I2C_MasterTxCpltCallback>
}
 8002ff4:	e02b      	b.n	800304e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003004:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d107      	bne.n	8003040 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fe fa95 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
}
 800303e:	e006      	b.n	800304e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fe94 	bl	8002d76 <HAL_I2C_MasterTxCpltCallback>
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11d      	bne.n	80030aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10b      	bne.n	800308e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307a:	b2da      	uxtb	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800308c:	e073      	b.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	b29b      	uxth	r3, r3
 8003094:	121b      	asrs	r3, r3, #8
 8003096:	b2da      	uxtb	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030a8:	e065      	b.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10b      	bne.n	80030ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c8:	e055      	b.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d151      	bne.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b22      	cmp	r3, #34	; 0x22
 80030d6:	d10d      	bne.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030f2:	e040      	b.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b21      	cmp	r3, #33	; 0x21
 8003102:	d112      	bne.n	800312a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003128:	e025      	b.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d120      	bne.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b21      	cmp	r3, #33	; 0x21
 8003138:	d11d      	bne.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003148:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003158:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fe f9f9 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b22      	cmp	r3, #34	; 0x22
 8003190:	f040 80ac 	bne.w	80032ec <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d921      	bls.n	80031e6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	f040 808c 	bne.w	80032ec <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031e4:	e082      	b.n	80032ec <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d075      	beq.n	80032da <I2C_MasterReceive_RXNE+0x15c>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d002      	beq.n	80031fa <I2C_MasterReceive_RXNE+0x7c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d16f      	bne.n	80032da <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ffb8 	bl	8004170 <I2C_WaitOnSTOPRequestThroughIT>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d142      	bne.n	800328c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003214:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003224:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d10a      	bne.n	8003276 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdc1 	bl	8002df6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003274:	e03a      	b.n	80032ec <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2212      	movs	r2, #18
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fd80 	bl	8002d8a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800328a:	e02f      	b.n	80032ec <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800329a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fd99 	bl	8002e0a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032d8:	e008      	b.n	80032ec <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	605a      	str	r2, [r3, #4]
}
 80032ea:	e7ff      	b.n	80032ec <I2C_MasterReceive_RXNE+0x16e>
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b04      	cmp	r3, #4
 800330a:	d11b      	bne.n	8003344 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003342:	e0bd      	b.n	80034c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b03      	cmp	r3, #3
 800334c:	d129      	bne.n	80033a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00a      	beq.n	800337a <I2C_MasterReceive_BTF+0x86>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d007      	beq.n	800337a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033a0:	e08e      	b.n	80034c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d176      	bne.n	800349a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <I2C_MasterReceive_BTF+0xc4>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d108      	bne.n	80033ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e019      	b.n	80033fe <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d002      	beq.n	80033d6 <I2C_MasterReceive_BTF+0xe2>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d108      	bne.n	80033e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e00a      	b.n	80033fe <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d007      	beq.n	80033fe <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003458:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d10a      	bne.n	8003484 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fcba 	bl	8002df6 <HAL_I2C_MemRxCpltCallback>
}
 8003482:	e01d      	b.n	80034c0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2212      	movs	r2, #18
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fc79 	bl	8002d8a <HAL_I2C_MasterRxCpltCallback>
}
 8003498:	e012      	b.n	80034c0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d117      	bne.n	800350c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034f6:	e067      	b.n	80035c8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
}
 800350a:	e05d      	b.n	80035c8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003514:	d133      	bne.n	800357e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b21      	cmp	r3, #33	; 0x21
 8003520:	d109      	bne.n	8003536 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	e008      	b.n	8003548 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <I2C_Master_SB+0x92>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d108      	bne.n	800356c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d032      	beq.n	80035c8 <I2C_Master_SB+0x100>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02d      	beq.n	80035c8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357a:	605a      	str	r2, [r3, #4]
}
 800357c:	e024      	b.n	80035c8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	b29b      	uxth	r3, r3
 800358c:	11db      	asrs	r3, r3, #7
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 0306 	and.w	r3, r3, #6
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f063 030f 	orn	r3, r3, #15
 800359a:	b2da      	uxtb	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]
}
 80035a2:	e011      	b.n	80035c8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10d      	bne.n	80035c8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	11db      	asrs	r3, r3, #7
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0306 	and.w	r3, r3, #6
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f063 030e 	orn	r3, r3, #14
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <I2C_Master_ADD10+0x26>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <I2C_Master_ADD10+0x48>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361a:	605a      	str	r2, [r3, #4]
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b091      	sub	sp, #68	; 0x44
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b22      	cmp	r3, #34	; 0x22
 8003650:	f040 8169 	bne.w	8003926 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10f      	bne.n	800367c <I2C_Master_ADDR+0x54>
 800365c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d10b      	bne.n	800367c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003664:	2300      	movs	r3, #0
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	633b      	str	r3, [r7, #48]	; 0x30
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	e160      	b.n	800393e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_Master_ADDR+0x98>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800368c:	d118      	bne.n	80036c0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	651a      	str	r2, [r3, #80]	; 0x50
 80036be:	e13e      	b.n	800393e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d113      	bne.n	80036f2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e115      	b.n	800391e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 808a 	bne.w	8003812 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003704:	d137      	bne.n	8003776 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003714:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003724:	d113      	bne.n	800374e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	e0e7      	b.n	800391e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e0d3      	b.n	800391e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	2b08      	cmp	r3, #8
 800377a:	d02e      	beq.n	80037da <I2C_Master_ADDR+0x1b2>
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	2b20      	cmp	r3, #32
 8003780:	d02b      	beq.n	80037da <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	2b12      	cmp	r3, #18
 8003786:	d102      	bne.n	800378e <I2C_Master_ADDR+0x166>
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2b01      	cmp	r3, #1
 800378c:	d125      	bne.n	80037da <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00e      	beq.n	80037b2 <I2C_Master_ADDR+0x18a>
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b02      	cmp	r3, #2
 8003798:	d00b      	beq.n	80037b2 <I2C_Master_ADDR+0x18a>
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b10      	cmp	r3, #16
 800379e:	d008      	beq.n	80037b2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	e0a1      	b.n	800391e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e085      	b.n	800391e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d14d      	bne.n	80038b8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	2b04      	cmp	r3, #4
 8003820:	d016      	beq.n	8003850 <I2C_Master_ADDR+0x228>
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b02      	cmp	r3, #2
 8003826:	d013      	beq.n	8003850 <I2C_Master_ADDR+0x228>
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	2b10      	cmp	r3, #16
 800382c:	d010      	beq.n	8003850 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e007      	b.n	8003860 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386e:	d117      	bne.n	80038a0 <I2C_Master_ADDR+0x278>
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003876:	d00b      	beq.n	8003890 <I2C_Master_ADDR+0x268>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b01      	cmp	r3, #1
 800387c:	d008      	beq.n	8003890 <I2C_Master_ADDR+0x268>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b08      	cmp	r3, #8
 8003882:	d005      	beq.n	8003890 <I2C_Master_ADDR+0x268>
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b10      	cmp	r3, #16
 8003888:	d002      	beq.n	8003890 <I2C_Master_ADDR+0x268>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b20      	cmp	r3, #32
 800388e:	d107      	bne.n	80038a0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800389e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	e032      	b.n	800391e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d6:	d117      	bne.n	8003908 <I2C_Master_ADDR+0x2e0>
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038de:	d00b      	beq.n	80038f8 <I2C_Master_ADDR+0x2d0>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d008      	beq.n	80038f8 <I2C_Master_ADDR+0x2d0>
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d005      	beq.n	80038f8 <I2C_Master_ADDR+0x2d0>
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d002      	beq.n	80038f8 <I2C_Master_ADDR+0x2d0>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d107      	bne.n	8003908 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003906:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003924:	e00b      	b.n	800393e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	e7ff      	b.n	800393e <I2C_Master_ADDR+0x316>
 800393e:	bf00      	nop
 8003940:	3744      	adds	r7, #68	; 0x44
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d02b      	beq.n	80039bc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d114      	bne.n	80039bc <I2C_SlaveTransmit_TXE+0x72>
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b29      	cmp	r3, #41	; 0x29
 8003996:	d111      	bne.n	80039bc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2228      	movs	r2, #40	; 0x28
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff f9f1 	bl	8002d9e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02c      	beq.n	8003a7a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d114      	bne.n	8003a7a <I2C_SlaveReceive_RXNE+0x74>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b2a      	cmp	r3, #42	; 0x2a
 8003a54:	d111      	bne.n	8003a7a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2222      	movs	r2, #34	; 0x22
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2228      	movs	r2, #40	; 0x28
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff f99c 	bl	8002db2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae0:	2b28      	cmp	r3, #40	; 0x28
 8003ae2:	d127      	bne.n	8003b34 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	09db      	lsrs	r3, r3, #7
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	81bb      	strh	r3, [r7, #12]
 8003b16:	e002      	b.n	8003b1e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b26:	89ba      	ldrh	r2, [r7, #12]
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff f94a 	bl	8002dc6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b32:	e00e      	b.n	8003b52 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	d172      	bne.n	8003ca0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b22      	cmp	r3, #34	; 0x22
 8003bbe:	d002      	beq.n	8003bc6 <I2C_Slave_STOPF+0x6a>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc4:	d135      	bne.n	8003c32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f043 0204 	orr.w	r2, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fb78 	bl	80022f4 <HAL_DMA_GetState>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d049      	beq.n	8003c9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	4a69      	ldr	r2, [pc, #420]	; (8003db4 <I2C_Slave_STOPF+0x258>)
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe f9c0 	bl	8001f9c <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03d      	beq.n	8003c9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c30:	e035      	b.n	8003c9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fb42 	bl	80022f4 <HAL_DMA_GetState>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d014      	beq.n	8003ca0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	4a4e      	ldr	r2, [pc, #312]	; (8003db4 <I2C_Slave_STOPF+0x258>)
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe f98a 	bl	8001f9c <HAL_DMA_Abort_IT>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4798      	blx	r3
 8003c9c:	e000      	b.n	8003ca0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d03e      	beq.n	8003d28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d112      	bne.n	8003cde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d112      	bne.n	8003d12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f843 	bl	8003dbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d36:	e039      	b.n	8003dac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3c:	d109      	bne.n	8003d52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2228      	movs	r2, #40	; 0x28
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff f830 	bl	8002db2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b28      	cmp	r3, #40	; 0x28
 8003d5c:	d111      	bne.n	8003d82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <I2C_Slave_STOPF+0x25c>)
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff f831 	bl	8002de2 <HAL_I2C_ListenCpltCallback>
}
 8003d80:	e014      	b.n	8003dac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	2b22      	cmp	r3, #34	; 0x22
 8003d88:	d002      	beq.n	8003d90 <I2C_Slave_STOPF+0x234>
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b22      	cmp	r3, #34	; 0x22
 8003d8e:	d10d      	bne.n	8003dac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff f803 	bl	8002db2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	08004021 	.word	0x08004021
 8003db8:	ffff0000 	.word	0xffff0000

08003dbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dd4:	7bbb      	ldrb	r3, [r7, #14]
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d002      	beq.n	8003de0 <I2C_ITError+0x24>
 8003dda:	7bbb      	ldrb	r3, [r7, #14]
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d10a      	bne.n	8003df6 <I2C_ITError+0x3a>
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b22      	cmp	r3, #34	; 0x22
 8003de4:	d107      	bne.n	8003df6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dfc:	2b28      	cmp	r3, #40	; 0x28
 8003dfe:	d107      	bne.n	8003e10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2228      	movs	r2, #40	; 0x28
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e0e:	e015      	b.n	8003e3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d00a      	beq.n	8003e36 <I2C_ITError+0x7a>
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b60      	cmp	r3, #96	; 0x60
 8003e24:	d007      	beq.n	8003e36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4a:	d162      	bne.n	8003f12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d020      	beq.n	8003eac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <I2C_ITError+0x25c>)
 8003e70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f890 	bl	8001f9c <HAL_DMA_Abort_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8089 	beq.w	8003f96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4798      	blx	r3
 8003eaa:	e074      	b.n	8003f96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <I2C_ITError+0x25c>)
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f86f 	bl	8001f9c <HAL_DMA_Abort_IT>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d068      	beq.n	8003f96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d10b      	bne.n	8003eea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4798      	blx	r3
 8003f10:	e041      	b.n	8003f96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b60      	cmp	r3, #96	; 0x60
 8003f1c:	d125      	bne.n	8003f6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d10b      	bne.n	8003f52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fe ff5b 	bl	8002e1e <HAL_I2C_AbortCpltCallback>
 8003f68:	e015      	b.n	8003f96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d10b      	bne.n	8003f90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fe ff3a 	bl	8002e0a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d113      	bne.n	8004010 <I2C_ITError+0x254>
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b28      	cmp	r3, #40	; 0x28
 8003fec:	d110      	bne.n	8004010 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <I2C_ITError+0x260>)
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe fee9 	bl	8002de2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	08004021 	.word	0x08004021
 800401c:	ffff0000 	.word	0xffff0000

08004020 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800403a:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <I2C_DMAAbort+0x148>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	4a4a      	ldr	r2, [pc, #296]	; (800416c <I2C_DMAAbort+0x14c>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0a1a      	lsrs	r2, r3, #8
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00da      	lsls	r2, r3, #3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004066:	e00a      	b.n	800407e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b01      	subs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d0ea      	beq.n	8004054 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	2200      	movs	r2, #0
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	2200      	movs	r2, #0
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	2200      	movs	r2, #0
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	2200      	movs	r2, #0
 80040d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b60      	cmp	r3, #96	; 0x60
 80040ee:	d10e      	bne.n	800410e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7fe fe89 	bl	8002e1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800410c:	e027      	b.n	800415e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004114:	2b28      	cmp	r3, #40	; 0x28
 8004116:	d117      	bne.n	8004148 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004136:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2228      	movs	r2, #40	; 0x28
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004146:	e007      	b.n	8004158 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f7fe fe56 	bl	8002e0a <HAL_I2C_ErrorCallback>
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000008 	.word	0x20000008
 800416c:	14f8b589 	.word	0x14f8b589

08004170 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	08db      	lsrs	r3, r3, #3
 8004182:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	0a1a      	lsrs	r2, r3, #8
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e008      	b.n	80041c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041bc:	d0e9      	beq.n	8004192 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	20000008 	.word	0x20000008
 80041d0:	14f8b589 	.word	0x14f8b589

080041d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041e4:	d103      	bne.n	80041ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ec:	e007      	b.n	80041fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041f6:	d102      	bne.n	80041fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2208      	movs	r2, #8
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e267      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00c      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d112      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b82      	ldr	r3, [pc, #520]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e242      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x74>
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x98>
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6f      	ldr	r2, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6c      	ldr	r2, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a68      	ldr	r2, [pc, #416]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd fc22 	bl	8001b0c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd fc1e 	bl	8001b0c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e207      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b5b      	ldr	r3, [pc, #364]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fd fc0e 	bl	8001b0c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fc0a 	bl	8001b0c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e1f3      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004336:	2b08      	cmp	r3, #8
 8004338:	d11c      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1c7      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4937      	ldr	r1, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	e03a      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	4b34      	ldr	r3, [pc, #208]	; (8004450 <HAL_RCC_OscConfig+0x244>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd fbc3 	bl	8001b0c <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd fbbf 	bl	8001b0c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1a8      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x244>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fba2 	bl	8001b0c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fb9e 	bl	8001b0c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e187      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d036      	beq.n	8004464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x248>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fd fb82 	bl	8001b0c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440c:	f7fd fb7e 	bl	8001b0c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e167      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x200>
 800442a:	e01b      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x248>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fd fb6b 	bl	8001b0c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e00e      	b.n	8004458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fb67 	bl	8001b0c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d907      	bls.n	8004458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e150      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ea      	bne.n	800443a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8097 	beq.w	80045a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b81      	ldr	r3, [pc, #516]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	4b7d      	ldr	r3, [pc, #500]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a7c      	ldr	r2, [pc, #496]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b7a      	ldr	r3, [pc, #488]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b77      	ldr	r3, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b74      	ldr	r3, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fb27 	bl	8001b0c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fb23 	bl	8001b0c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e10c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b6a      	ldr	r3, [pc, #424]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2ea>
 80044e8:	4b64      	ldr	r3, [pc, #400]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a63      	ldr	r2, [pc, #396]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	e01c      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x30c>
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a5e      	ldr	r2, [pc, #376]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5b      	ldr	r2, [pc, #364]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 8004518:	4b58      	ldr	r3, [pc, #352]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b55      	ldr	r3, [pc, #340]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a54      	ldr	r2, [pc, #336]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd fae8 	bl	8001b0c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd fae4 	bl	8001b0c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0cb      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCC_OscConfig+0x334>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fd fad2 	bl	8001b0c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fd face 	bl	8001b0c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0b5      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	4b3e      	ldr	r3, [pc, #248]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a38      	ldr	r2, [pc, #224]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a1 	beq.w	80046ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d05c      	beq.n	8004670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d141      	bne.n	8004642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd faa2 	bl	8001b0c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd fa9e 	bl	8001b0c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e087      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b27      	ldr	r3, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	491b      	ldr	r1, [pc, #108]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fd fa77 	bl	8001b0c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7fd fa73 	bl	8001b0c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e05c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x416>
 8004640:	e054      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd fa60 	bl	8001b0c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fa5c 	bl	8001b0c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e045      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x444>
 800466e:	e03d      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e038      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000
 8004684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d121      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d11a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d111      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	3b01      	subs	r3, #1
 80046d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800

080046fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0cc      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d90c      	bls.n	8004738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b8      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	494d      	ldr	r1, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d044      	beq.n	800481c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d119      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e067      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4934      	ldr	r1, [pc, #208]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fd f98e 	bl	8001b0c <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd f98a 	bl	8001b0c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d20c      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e032      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4916      	ldr	r1, [pc, #88]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	490e      	ldr	r1, [pc, #56]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004882:	f000 f821 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	490a      	ldr	r1, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd f8ee 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023c00 	.word	0x40023c00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08006058 	.word	0x08006058
 80048c0:	20000008 	.word	0x20000008
 80048c4:	2000000c 	.word	0x2000000c

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b094      	sub	sp, #80	; 0x50
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
 80048d4:	2300      	movs	r3, #0
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	2300      	movs	r3, #0
 80048da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d00d      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x40>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f200 80e1 	bhi.w	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x34>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fa:	e0db      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004900:	e0db      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b73      	ldr	r3, [pc, #460]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004906:	e0d8      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b6f      	ldr	r3, [pc, #444]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004912:	4b6d      	ldr	r3, [pc, #436]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	2200      	movs	r2, #0
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
 8004928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
 8004932:	2300      	movs	r3, #0
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4621      	mov	r1, r4
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	6139      	str	r1, [r7, #16]
 8004958:	4629      	mov	r1, r5
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800496c:	4659      	mov	r1, fp
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4651      	mov	r1, sl
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4651      	mov	r1, sl
 800497c:	ebb2 0801 	subs.w	r8, r2, r1
 8004980:	4659      	mov	r1, fp
 8004982:	eb63 0901 	sbc.w	r9, r3, r1
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800499a:	4690      	mov	r8, r2
 800499c:	4699      	mov	r9, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	eb18 0303 	adds.w	r3, r8, r3
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	462b      	mov	r3, r5
 80049a8:	eb49 0303 	adc.w	r3, r9, r3
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ba:	4629      	mov	r1, r5
 80049bc:	024b      	lsls	r3, r1, #9
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c4:	4621      	mov	r1, r4
 80049c6:	024a      	lsls	r2, r1, #9
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ce:	2200      	movs	r2, #0
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d8:	f7fb fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	e058      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e6:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	2200      	movs	r2, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	4611      	mov	r1, r2
 80049f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a00:	4642      	mov	r2, r8
 8004a02:	464b      	mov	r3, r9
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a12:	0150      	lsls	r0, r2, #5
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4641      	mov	r1, r8
 8004a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a38:	ebb2 040a 	subs.w	r4, r2, sl
 8004a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	00eb      	lsls	r3, r5, #3
 8004a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4e:	00e2      	lsls	r2, r4, #3
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	18e3      	adds	r3, r4, r3
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	028b      	lsls	r3, r1, #10
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a78:	4621      	mov	r1, r4
 8004a7a:	028a      	lsls	r2, r1, #10
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	61fa      	str	r2, [r7, #28]
 8004a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a8c:	f7fb fba4 	bl	80001d8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab2:	e002      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3750      	adds	r7, #80	; 0x50
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000008 	.word	0x20000008

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004af0:	f7ff fff0 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0a9b      	lsrs	r3, r3, #10
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4903      	ldr	r1, [pc, #12]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	08006068 	.word	0x08006068

08004b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b18:	f7ff ffdc 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0b5b      	lsrs	r3, r3, #13
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	08006068 	.word	0x08006068

08004b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07b      	b.n	8004c46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d108      	bne.n	8004b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5e:	d009      	beq.n	8004b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	61da      	str	r2, [r3, #28]
 8004b66:	e005      	b.n	8004b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fdf0 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	ea42 0103 	orr.w	r1, r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0104 	and.w	r1, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0210 	and.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_SPI_Transmit+0x22>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e126      	b.n	8004ebe <HAL_SPI_Transmit+0x270>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c78:	f7fc ff48 	bl	8001b0c <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c92:	e10b      	b.n	8004eac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0x52>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca4:	e102      	b.n	8004eac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2203      	movs	r2, #3
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cec:	d10f      	bne.n	8004d0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d007      	beq.n	8004d2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d34:	d14b      	bne.n	8004dce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_SPI_Transmit+0xf6>
 8004d3e:	8afb      	ldrh	r3, [r7, #22]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d13e      	bne.n	8004dc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d68:	e02b      	b.n	8004dc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d112      	bne.n	8004d9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d9c:	e011      	b.n	8004dc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9e:	f7fc feb5 	bl	8001b0c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d803      	bhi.n	8004db6 <HAL_SPI_Transmit+0x168>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d102      	bne.n	8004dbc <HAL_SPI_Transmit+0x16e>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc0:	e074      	b.n	8004eac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ce      	bne.n	8004d6a <HAL_SPI_Transmit+0x11c>
 8004dcc:	e04c      	b.n	8004e68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_SPI_Transmit+0x18e>
 8004dd6:	8afb      	ldrh	r3, [r7, #22]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d140      	bne.n	8004e5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e02:	e02c      	b.n	8004e5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d113      	bne.n	8004e3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e38:	e011      	b.n	8004e5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3a:	f7fc fe67 	bl	8001b0c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d803      	bhi.n	8004e52 <HAL_SPI_Transmit+0x204>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_Transmit+0x20a>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e5c:	e026      	b.n	8004eac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1cd      	bne.n	8004e04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa0d 	bl	800528c <SPI_EndRxTxTransaction>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e000      	b.n	8004eac <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_SPI_Transmit_DMA+0x20>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e09b      	b.n	8005020 <HAL_SPI_Transmit_DMA+0x158>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d002      	beq.n	8004f02 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f00:	e089      	b.n	8005016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit_DMA+0x46>
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f12:	e080      	b.n	8005016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2203      	movs	r2, #3
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5a:	d10f      	bne.n	8004f7c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f80:	4a29      	ldr	r2, [pc, #164]	; (8005028 <HAL_SPI_Transmit_DMA+0x160>)
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_SPI_Transmit_DMA+0x164>)
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <HAL_SPI_Transmit_DMA+0x168>)
 8004f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f98:	2200      	movs	r2, #0
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fb4:	f7fc ff9a 	bl	8001eec <HAL_DMA_Start_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004fd6:	e01e      	b.n	8005016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d007      	beq.n	8004ff6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0220 	orr.w	r2, r2, #32
 8005004:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0202 	orr.w	r2, r2, #2
 8005014:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08005121 	.word	0x08005121
 800502c:	08005079 	.word	0x08005079
 8005030:	0800513d 	.word	0x0800513d

08005034 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506a:	b2db      	uxtb	r3, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005086:	f7fc fd41 	bl	8001b0c <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d03b      	beq.n	8005114 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0220 	bic.w	r2, r2, #32
 80050aa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0202 	bic.w	r2, r2, #2
 80050ba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f000 f8e3 	bl	800528c <SPI_EndRxTxTransaction>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800510c:	6978      	ldr	r0, [r7, #20]
 800510e:	f7ff ff9b 	bl	8005048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005112:	e002      	b.n	800511a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f7fc fa43 	bl	80015a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff80 	bl	8005034 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0203 	bic.w	r2, r2, #3
 8005158:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff6a 	bl	8005048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800518c:	f7fc fcbe 	bl	8001b0c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4413      	add	r3, r2
 800519a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800519c:	f7fc fcb6 	bl	8001b0c <HAL_GetTick>
 80051a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a2:	4b39      	ldr	r3, [pc, #228]	; (8005288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	0d1b      	lsrs	r3, r3, #20
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b2:	e054      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d050      	beq.n	800525e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051bc:	f7fc fca6 	bl	8001b0c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d13d      	bne.n	800524e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ea:	d111      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f4:	d004      	beq.n	8005200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d107      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d10f      	bne.n	800523a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e017      	b.n	800527e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3b01      	subs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d19b      	bne.n	80051b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000008 	.word	0x20000008

0800528c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <SPI_EndRxTxTransaction+0x7c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <SPI_EndRxTxTransaction+0x80>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0d5b      	lsrs	r3, r3, #21
 80052a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b6:	d112      	bne.n	80052de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff ff5a 	bl	800517c <SPI_WaitFlagStateUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e00f      	b.n	80052fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d0f2      	beq.n	80052de <SPI_EndRxTxTransaction+0x52>
 80052f8:	e000      	b.n	80052fc <SPI_EndRxTxTransaction+0x70>
        break;
 80052fa:	bf00      	nop
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000008 	.word	0x20000008
 800530c:	165e9f81 	.word	0x165e9f81

08005310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e03f      	b.n	80053a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc fab6 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	; 0x24
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f929 	bl	80055ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b08a      	sub	sp, #40	; 0x28
 80053ae:	af02      	add	r7, sp, #8
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d17c      	bne.n	80054c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_UART_Transmit+0x2c>
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e075      	b.n	80054c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_UART_Transmit+0x3e>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e06e      	b.n	80054c6 <HAL_UART_Transmit+0x11c>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2221      	movs	r2, #33	; 0x21
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053fe:	f7fc fb85 	bl	8001b0c <HAL_GetTick>
 8005402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005418:	d108      	bne.n	800542c <HAL_UART_Transmit+0x82>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e003      	b.n	8005434 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800543c:	e02a      	b.n	8005494 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	2180      	movs	r1, #128	; 0x80
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f840 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e036      	b.n	80054c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800546c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	3302      	adds	r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	e007      	b.n	8005486 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	3301      	adds	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1cf      	bne.n	800543e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2140      	movs	r1, #64	; 0x40
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f810 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e006      	b.n	80054c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b090      	sub	sp, #64	; 0x40
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	e050      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	d04c      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <UART_WaitOnFlagUntilTimeout+0x30>
 80054ee:	f7fc fb0d 	bl	8001b0c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d241      	bcs.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800551e:	637a      	str	r2, [r7, #52]	; 0x34
 8005520:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	613b      	str	r3, [r7, #16]
   return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005552:	623a      	str	r2, [r7, #32]
 8005554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	69f9      	ldr	r1, [r7, #28]
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e00f      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d09f      	beq.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3740      	adds	r7, #64	; 0x40
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0c0      	sub	sp, #256	; 0x100
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	ea40 0301 	orr.w	r3, r0, r1
 80055d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005604:	f021 010c 	bic.w	r1, r1, #12
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005612:	430b      	orrs	r3, r1
 8005614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	6999      	ldr	r1, [r3, #24]
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	ea40 0301 	orr.w	r3, r0, r1
 8005632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b8f      	ldr	r3, [pc, #572]	; (8005878 <UART_SetConfig+0x2cc>)
 800563c:	429a      	cmp	r2, r3
 800563e:	d005      	beq.n	800564c <UART_SetConfig+0xa0>
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8d      	ldr	r3, [pc, #564]	; (800587c <UART_SetConfig+0x2d0>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d104      	bne.n	8005656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7ff fa62 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 8005650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005654:	e003      	b.n	800565e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005656:	f7ff fa49 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 800565a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	f040 810c 	bne.w	8005884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800566c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800567a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800567e:	4622      	mov	r2, r4
 8005680:	462b      	mov	r3, r5
 8005682:	1891      	adds	r1, r2, r2
 8005684:	65b9      	str	r1, [r7, #88]	; 0x58
 8005686:	415b      	adcs	r3, r3
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800568e:	4621      	mov	r1, r4
 8005690:	eb12 0801 	adds.w	r8, r2, r1
 8005694:	4629      	mov	r1, r5
 8005696:	eb43 0901 	adc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056bc:	462b      	mov	r3, r5
 80056be:	eb49 0303 	adc.w	r3, r9, r3
 80056c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056da:	460b      	mov	r3, r1
 80056dc:	18db      	adds	r3, r3, r3
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
 80056e0:	4613      	mov	r3, r2
 80056e2:	eb42 0303 	adc.w	r3, r2, r3
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
 80056e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056f0:	f7fa fd72 	bl	80001d8 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <UART_SetConfig+0x2d4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800570c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	64b9      	str	r1, [r7, #72]	; 0x48
 800571c:	415b      	adcs	r3, r3
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005724:	4641      	mov	r1, r8
 8005726:	eb12 0a01 	adds.w	sl, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb43 0b01 	adc.w	fp, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800573c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005744:	4692      	mov	sl, r2
 8005746:	469b      	mov	fp, r3
 8005748:	4643      	mov	r3, r8
 800574a:	eb1a 0303 	adds.w	r3, sl, r3
 800574e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005752:	464b      	mov	r3, r9
 8005754:	eb4b 0303 	adc.w	r3, fp, r3
 8005758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800576c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	643b      	str	r3, [r7, #64]	; 0x40
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
 800577e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005786:	f7fa fd27 	bl	80001d8 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4611      	mov	r1, r2
 8005790:	4b3b      	ldr	r3, [pc, #236]	; (8005880 <UART_SetConfig+0x2d4>)
 8005792:	fba3 2301 	umull	r2, r3, r3, r1
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2264      	movs	r2, #100	; 0x64
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	1acb      	subs	r3, r1, r3
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057a6:	4b36      	ldr	r3, [pc, #216]	; (8005880 <UART_SetConfig+0x2d4>)
 80057a8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057b4:	441c      	add	r4, r3
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80057d0:	415b      	adcs	r3, r3
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6339      	str	r1, [r7, #48]	; 0x30
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800580c:	464b      	mov	r3, r9
 800580e:	460a      	mov	r2, r1
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800583a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800583e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005842:	f7fa fcc9 	bl	80001d8 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <UART_SetConfig+0x2d4>)
 800584c:	fba3 1302 	umull	r1, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	2164      	movs	r1, #100	; 0x64
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3332      	adds	r3, #50	; 0x32
 800585e:	4a08      	ldr	r2, [pc, #32]	; (8005880 <UART_SetConfig+0x2d4>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4422      	add	r2, r4
 8005872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005874:	e105      	b.n	8005a82 <UART_SetConfig+0x4d6>
 8005876:	bf00      	nop
 8005878:	40011000 	.word	0x40011000
 800587c:	40011400 	.word	0x40011400
 8005880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005888:	2200      	movs	r2, #0
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800588e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005896:	4642      	mov	r2, r8
 8005898:	464b      	mov	r3, r9
 800589a:	1891      	adds	r1, r2, r2
 800589c:	6239      	str	r1, [r7, #32]
 800589e:	415b      	adcs	r3, r3
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
 80058a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058a6:	4641      	mov	r1, r8
 80058a8:	1854      	adds	r4, r2, r1
 80058aa:	4649      	mov	r1, r9
 80058ac:	eb43 0501 	adc.w	r5, r3, r1
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	00eb      	lsls	r3, r5, #3
 80058ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058be:	00e2      	lsls	r2, r4, #3
 80058c0:	4614      	mov	r4, r2
 80058c2:	461d      	mov	r5, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	18e3      	adds	r3, r4, r3
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058cc:	464b      	mov	r3, r9
 80058ce:	eb45 0303 	adc.w	r3, r5, r3
 80058d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058f2:	4629      	mov	r1, r5
 80058f4:	008b      	lsls	r3, r1, #2
 80058f6:	4621      	mov	r1, r4
 80058f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fc:	4621      	mov	r1, r4
 80058fe:	008a      	lsls	r2, r1, #2
 8005900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005904:	f7fa fc68 	bl	80001d8 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	011c      	lsls	r4, r3, #4
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	1891      	adds	r1, r2, r2
 800592e:	61b9      	str	r1, [r7, #24]
 8005930:	415b      	adcs	r3, r3
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005938:	4641      	mov	r1, r8
 800593a:	1851      	adds	r1, r2, r1
 800593c:	6139      	str	r1, [r7, #16]
 800593e:	4649      	mov	r1, r9
 8005940:	414b      	adcs	r3, r1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005950:	4659      	mov	r1, fp
 8005952:	00cb      	lsls	r3, r1, #3
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595a:	4651      	mov	r1, sl
 800595c:	00ca      	lsls	r2, r1, #3
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	4603      	mov	r3, r0
 8005964:	4642      	mov	r2, r8
 8005966:	189b      	adds	r3, r3, r2
 8005968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596c:	464b      	mov	r3, r9
 800596e:	460a      	mov	r2, r1
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	67bb      	str	r3, [r7, #120]	; 0x78
 8005982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005990:	4649      	mov	r1, r9
 8005992:	008b      	lsls	r3, r1, #2
 8005994:	4641      	mov	r1, r8
 8005996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599a:	4641      	mov	r1, r8
 800599c:	008a      	lsls	r2, r1, #2
 800599e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059a2:	f7fa fc19 	bl	80001d8 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <UART_SetConfig+0x4e4>)
 80059ac:	fba3 1302 	umull	r1, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	2164      	movs	r1, #100	; 0x64
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	3332      	adds	r3, #50	; 0x32
 80059be:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <UART_SetConfig+0x4e4>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ca:	441c      	add	r4, r3
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	673b      	str	r3, [r7, #112]	; 0x70
 80059d4:	677a      	str	r2, [r7, #116]	; 0x74
 80059d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059da:	4642      	mov	r2, r8
 80059dc:	464b      	mov	r3, r9
 80059de:	1891      	adds	r1, r2, r2
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	415b      	adcs	r3, r3
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ea:	4641      	mov	r1, r8
 80059ec:	1851      	adds	r1, r2, r1
 80059ee:	6039      	str	r1, [r7, #0]
 80059f0:	4649      	mov	r1, r9
 80059f2:	414b      	adcs	r3, r1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a02:	4659      	mov	r1, fp
 8005a04:	00cb      	lsls	r3, r1, #3
 8005a06:	4651      	mov	r1, sl
 8005a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0c:	4651      	mov	r1, sl
 8005a0e:	00ca      	lsls	r2, r1, #3
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	4642      	mov	r2, r8
 8005a18:	189b      	adds	r3, r3, r2
 8005a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a30:	667a      	str	r2, [r7, #100]	; 0x64
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a3e:	4649      	mov	r1, r9
 8005a40:	008b      	lsls	r3, r1, #2
 8005a42:	4641      	mov	r1, r8
 8005a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a48:	4641      	mov	r1, r8
 8005a4a:	008a      	lsls	r2, r1, #2
 8005a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a50:	f7fa fbc2 	bl	80001d8 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2164      	movs	r1, #100	; 0x64
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	; 0x32
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <UART_SetConfig+0x4e4>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4422      	add	r2, r4
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	bf00      	nop
 8005a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a8e:	bf00      	nop
 8005a90:	51eb851f 	.word	0x51eb851f

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4d0d      	ldr	r5, [pc, #52]	; (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1b64      	subs	r4, r4, r5
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4d0b      	ldr	r5, [pc, #44]	; (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	; (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f000 f820 	bl	8005aec <_init>
 8005aac:	1b64      	subs	r4, r4, r5
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08006080 	.word	0x08006080
 8005ad0:	08006080 	.word	0x08006080
 8005ad4:	08006080 	.word	0x08006080
 8005ad8:	08006084 	.word	0x08006084

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
