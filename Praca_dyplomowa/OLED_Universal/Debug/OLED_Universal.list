
OLED_Universal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000398c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b8  080043b8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c0  080043c0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080043c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000001c  080043e4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  080043e4  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df95  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff8  00000000  00000000  0002dfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016c8e  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001092a  00000000  00000000  000478be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008949b  00000000  00000000  000581e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e1683  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b70  00000000  00000000  000e16d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000325c  00000000  00000000  000e2248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b0c 	.word	0x08003b0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08003b0c 	.word	0x08003b0c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fa63 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f867 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f95d 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f931 	bl	8000754 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f2:	f000 f8cb 	bl	800068c <MX_I2C1_Init>
  MX_SPI2_Init();
 80004f6:	f000 f8f7 	bl	80006e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80004fa:	f000 ff45 	bl	8001388 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_SetXY(2, 2);
 80004fe:	2102      	movs	r1, #2
 8000500:	2002      	movs	r0, #2
 8000502:	f000 fe3d 	bl	8001180 <SSD1306_SetXY>
	  SSD1306_Puts("Desert Eagle", &Arial_new_7x10, SSD1306_COLOR_WHITE);
 8000506:	2201      	movs	r2, #1
 8000508:	4927      	ldr	r1, [pc, #156]	; (80005a8 <main+0xcc>)
 800050a:	4828      	ldr	r0, [pc, #160]	; (80005ac <main+0xd0>)
 800050c:	f000 fae7 	bl	8000ade <SSD1306_Puts>
	  SSD1306_SetXY(2, 16);
 8000510:	2110      	movs	r1, #16
 8000512:	2002      	movs	r0, #2
 8000514:	f000 fe34 	bl	8001180 <SSD1306_SetXY>
	  SSD1306_Puts("Desert Eagle", &Arial8_8x10, SSD1306_COLOR_WHITE);
 8000518:	2201      	movs	r2, #1
 800051a:	4925      	ldr	r1, [pc, #148]	; (80005b0 <main+0xd4>)
 800051c:	4823      	ldr	r0, [pc, #140]	; (80005ac <main+0xd0>)
 800051e:	f000 fade 	bl	8000ade <SSD1306_Puts>

	  SSD1306_DrawLine(2, 14, 128, 14, SSD1306_COLOR_WHITE);
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	230e      	movs	r3, #14
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	210e      	movs	r1, #14
 800052c:	2002      	movs	r0, #2
 800052e:	f000 fafb 	bl	8000b28 <SSD1306_DrawLine>
	  SSD1306_DrawCircle(95, 6, 4, SSD1306_COLOR_WHITE);
 8000532:	2301      	movs	r3, #1
 8000534:	2204      	movs	r2, #4
 8000536:	2106      	movs	r1, #6
 8000538:	205f      	movs	r0, #95	; 0x5f
 800053a:	f000 fd4d 	bl	8000fd8 <SSD1306_DrawCircle>
	  SSD1306_DrawRectangle(102, 2, 20, 8, SSD1306_COLOR_WHITE);
 800053e:	2301      	movs	r3, #1
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2308      	movs	r3, #8
 8000544:	2214      	movs	r2, #20
 8000546:	2102      	movs	r1, #2
 8000548:	2066      	movs	r0, #102	; 0x66
 800054a:	f000 fbe8 	bl	8000d1e <SSD1306_DrawRectangle>
	  SSD1306_DrawTriangle(5, 55, 35, 55, 20, 35, SSD1306_COLOR_WHITE);
 800054e:	2301      	movs	r3, #1
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	2323      	movs	r3, #35	; 0x23
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2314      	movs	r3, #20
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2337      	movs	r3, #55	; 0x37
 800055c:	2223      	movs	r2, #35	; 0x23
 800055e:	2137      	movs	r1, #55	; 0x37
 8000560:	2005      	movs	r0, #5
 8000562:	f000 fc46 	bl	8000df2 <SSD1306_DrawTriangle>
	  SSD1306_DrawFilledTriangle(15, 50, 25, 50, 20, 40, SSD1306_COLOR_WHITE);
 8000566:	2301      	movs	r3, #1
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	2328      	movs	r3, #40	; 0x28
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2314      	movs	r3, #20
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2332      	movs	r3, #50	; 0x32
 8000574:	2219      	movs	r2, #25
 8000576:	2132      	movs	r1, #50	; 0x32
 8000578:	200f      	movs	r0, #15
 800057a:	f000 fc6b 	bl	8000e54 <SSD1306_DrawFilledTriangle>
	  SSD1306_DrawBitmap(55, 25, (const unsigned char*)deagle_56x36, 56, 36, SSD1306_COLOR_WHITE);
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2324      	movs	r3, #36	; 0x24
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2338      	movs	r3, #56	; 0x38
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <main+0xd8>)
 800058a:	2119      	movs	r1, #25
 800058c:	2037      	movs	r0, #55	; 0x37
 800058e:	f000 f9a8 	bl	80008e2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000592:	f000 ffb3 	bl	80014fc <SSD1306_UpdateScreen>
	  HAL_Delay(4000);
 8000596:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800059a:	f001 fa79 	bl	8001a90 <HAL_Delay>
	  SSD1306_ToggleInvert();
 800059e:	f000 fe45 	bl	800122c <SSD1306_ToggleInvert>
	  SSD1306_UpdateScreen();
 80005a2:	f000 ffab 	bl	80014fc <SSD1306_UpdateScreen>
	  SSD1306_SetXY(2, 2);
 80005a6:	e7aa      	b.n	80004fe <main+0x22>
 80005a8:	20000008 	.word	0x20000008
 80005ac:	08003b24 	.word	0x08003b24
 80005b0:	20000000 	.word	0x20000000
 80005b4:	080042a4 	.word	0x080042a4

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fa98 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000636:	2304      	movs	r3, #4
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fa48 	bl	8002ad4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f000 f945 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fcaa 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000676:	f000 f92f 	bl	80008d8 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f001 fc89 	bl	8001fe0 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f900 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000038 	.word	0x20000038
 80006e0:	40005400 	.word	0x40005400
 80006e4:	00061a80 	.word	0x00061a80

080006e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI2_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI2_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI2_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI2_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI2_Init+0x64>)
 800071c:	2210      	movs	r2, #16
 800071e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI2_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI2_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI2_Init+0x64>)
 800073a:	f002 fe63 	bl	8003404 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f8c8 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40003800 	.word	0x40003800

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f002 fec3 	bl	8003516 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f89f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000e4 	.word	0x200000e4
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a40      	ldr	r2, [pc, #256]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_GPIO_Init+0x120>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <MX_GPIO_Init+0x120>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x120>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_GPIO_Init+0x120>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <MX_GPIO_Init+0x120>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_GPIO_Init+0x120>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RES_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <MX_GPIO_Init+0x124>)
 8000836:	f001 fbb9 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	4824      	ldr	r0, [pc, #144]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000840:	f001 fbb4 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2110      	movs	r1, #16
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <MX_GPIO_Init+0x12c>)
 800084a:	f001 fbaf 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0x128>)
 8000866:	f001 fa1d 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RES_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RES_Pin;
 800086a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x124>)
 8000884:	f001 fa0e 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0x128>)
 80008a0:	f001 fa00 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_GPIO_Init+0x12c>)
 80008bc:	f001 f9f2 	bl	8001ca4 <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020400 	.word	0x40020400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>

080008e2 <SSD1306_DrawBitmap>:
#include "oled_functions.h"
#define ABS(x)   ((x) > 0 ? (x) : -(x))


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60ba      	str	r2, [r7, #8]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4603      	mov	r3, r0
 80008ee:	81fb      	strh	r3, [r7, #14]
 80008f0:	460b      	mov	r3, r1
 80008f2:	81bb      	strh	r3, [r7, #12]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80008f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008fc:	3307      	adds	r3, #7
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da00      	bge.n	8000904 <SSD1306_DrawBitmap+0x22>
 8000902:	3307      	adds	r3, #7
 8000904:	10db      	asrs	r3, r3, #3
 8000906:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800090c:	2300      	movs	r3, #0
 800090e:	82bb      	strh	r3, [r7, #20]
 8000910:	e044      	b.n	800099c <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000912:	2300      	movs	r3, #0
 8000914:	827b      	strh	r3, [r7, #18]
 8000916:	e02f      	b.n	8000978 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000918:	8a7b      	ldrh	r3, [r7, #18]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	75fb      	strb	r3, [r7, #23]
 8000928:	e012      	b.n	8000950 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800092a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800092e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000932:	fb03 f202 	mul.w	r2, r3, r2
 8000936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800093a:	2b00      	cmp	r3, #0
 800093c:	da00      	bge.n	8000940 <SSD1306_DrawBitmap+0x5e>
 800093e:	3307      	adds	r3, #7
 8000940:	10db      	asrs	r3, r3, #3
 8000942:	b21b      	sxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000954:	2b00      	cmp	r3, #0
 8000956:	da09      	bge.n	800096c <SSD1306_DrawBitmap+0x8a>
 8000958:	89fa      	ldrh	r2, [r7, #14]
 800095a:	8a7b      	ldrh	r3, [r7, #18]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	89b9      	ldrh	r1, [r7, #12]
 8000962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fcae 	bl	80012c8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800096c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000970:	b29b      	uxth	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	b29b      	uxth	r3, r3
 8000976:	827b      	strh	r3, [r7, #18]
 8000978:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800097c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbc9      	blt.n	8000918 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000984:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000988:	b29b      	uxth	r3, r3
 800098a:	3301      	adds	r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	82bb      	strh	r3, [r7, #20]
 8000990:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000994:	b29b      	uxth	r3, r3
 8000996:	3301      	adds	r3, #1
 8000998:	b29b      	uxth	r3, r3
 800099a:	81bb      	strh	r3, [r7, #12]
 800099c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80009a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbb4      	blt.n	8000912 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SSD1306_Putc>:


char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	6039      	str	r1, [r7, #0]
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	4613      	mov	r3, r2
 80009c0:	71bb      	strb	r3, [r7, #6]
	uint16_t i, j;
	uint16_t x, y, byte, byteWidth, rowWidthBytes;
	/*Get Values X and Y*/
	SSD1306_GetXY(&x, &y);
 80009c2:	f107 020a 	add.w	r2, r7, #10
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fbed 	bl	80011ac <SSD1306_GetXY>

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (x + Font->FontWidth) ||
 80009d2:	89bb      	ldrh	r3, [r7, #12]
 80009d4:	461a      	mov	r2, r3
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
	if (
 80009dc:	2b7f      	cmp	r3, #127	; 0x7f
 80009de:	dc06      	bgt.n	80009ee <SSD1306_Putc+0x3c>
		SSD1306_HEIGHT <= (y + Font->FontHeight)
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	461a      	mov	r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	885b      	ldrh	r3, [r3, #2]
 80009e8:	4413      	add	r3, r2
		SSD1306_WIDTH <= (x + Font->FontWidth) ||
 80009ea:	2b3f      	cmp	r3, #63	; 0x3f
 80009ec:	dd01      	ble.n	80009f2 <SSD1306_Putc+0x40>
	) {
		/* Error */
		return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e071      	b.n	8000ad6 <SSD1306_Putc+0x124>
//			} else {
//				SSD1306_DrawPixel(x + j, (y + i), (SSD1306_COLOR_t)!color);
//			}
//		}
//	}
	byte = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	827b      	strh	r3, [r7, #18]
	byteWidth = (Font->FontWidth + 7) / 8;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	3307      	adds	r3, #7
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da00      	bge.n	8000a02 <SSD1306_Putc+0x50>
 8000a00:	3307      	adds	r3, #7
 8000a02:	10db      	asrs	r3, r3, #3
 8000a04:	823b      	strh	r3, [r7, #16]
	rowWidthBytes = Font->FontHeight * byteWidth;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	8a3a      	ldrh	r2, [r7, #16]
 8000a0c:	fb12 f303 	smulbb	r3, r2, r3
 8000a10:	81fb      	strh	r3, [r7, #14]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	82fb      	strh	r3, [r7, #22]
 8000a16:	e04c      	b.n	8000ab2 <SSD1306_Putc+0x100>
			for (j = 0; j < Font->FontWidth; j++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	82bb      	strh	r3, [r7, #20]
 8000a1c:	e041      	b.n	8000aa2 <SSD1306_Putc+0xf0>
				if(j & 7)
 8000a1e:	8abb      	ldrh	r3, [r7, #20]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <SSD1306_Putc+0x7e>
				{
					byte <<= 1;
 8000a28:	8a7b      	ldrh	r3, [r7, #18]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	827b      	strh	r3, [r7, #18]
 8000a2e:	e012      	b.n	8000a56 <SSD1306_Putc+0xa4>
				}else /* gdy i==0 to pobieram zerowy element z tablicy,
					   * i==8,==16 itd. to pobieram sasiedni element**/
				{
					byte = Font->data[(ch - 32) * rowWidthBytes + i * byteWidth + j / 8];
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	3a20      	subs	r2, #32
 8000a38:	89f9      	ldrh	r1, [r7, #14]
 8000a3a:	fb02 f101 	mul.w	r1, r2, r1
 8000a3e:	8afa      	ldrh	r2, [r7, #22]
 8000a40:	8a38      	ldrh	r0, [r7, #16]
 8000a42:	fb00 f202 	mul.w	r2, r0, r2
 8000a46:	440a      	add	r2, r1
 8000a48:	8ab9      	ldrh	r1, [r7, #20]
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	b289      	uxth	r1, r1
 8000a4e:	440a      	add	r2, r1
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	827b      	strh	r3, [r7, #18]
				}

				if (byte & 0x80){
 8000a56:	8a7b      	ldrh	r3, [r7, #18]
 8000a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00c      	beq.n	8000a7a <SSD1306_Putc+0xc8>
					SSD1306_DrawPixel(x + j, (y + i), (SSD1306_COLOR_t) color);
 8000a60:	89ba      	ldrh	r2, [r7, #12]
 8000a62:	8abb      	ldrh	r3, [r7, #20]
 8000a64:	4413      	add	r3, r2
 8000a66:	b298      	uxth	r0, r3
 8000a68:	897a      	ldrh	r2, [r7, #10]
 8000a6a:	8afb      	ldrh	r3, [r7, #22]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	4619      	mov	r1, r3
 8000a74:	f000 fc28 	bl	80012c8 <SSD1306_DrawPixel>
 8000a78:	e010      	b.n	8000a9c <SSD1306_Putc+0xea>
				} else {
					SSD1306_DrawPixel(x + j, (y + i), (SSD1306_COLOR_t)!color);
 8000a7a:	89ba      	ldrh	r2, [r7, #12]
 8000a7c:	8abb      	ldrh	r3, [r7, #20]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b298      	uxth	r0, r3
 8000a82:	897a      	ldrh	r2, [r7, #10]
 8000a84:	8afb      	ldrh	r3, [r7, #22]
 8000a86:	4413      	add	r3, r2
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf0c      	ite	eq
 8000a90:	2301      	moveq	r3, #1
 8000a92:	2300      	movne	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	f000 fc16 	bl	80012c8 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000a9c:	8abb      	ldrh	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	82bb      	strh	r3, [r7, #20]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	8aba      	ldrh	r2, [r7, #20]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3b8      	bcc.n	8000a1e <SSD1306_Putc+0x6c>
	for (i = 0; i < Font->FontHeight; i++) {
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	82fb      	strh	r3, [r7, #22]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	885b      	ldrh	r3, [r3, #2]
 8000ab6:	8afa      	ldrh	r2, [r7, #22]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3ad      	bcc.n	8000a18 <SSD1306_Putc+0x66>
				}
			}
		}
	/* Increase pointer */
	x += Font->FontWidth;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	81bb      	strh	r3, [r7, #12]
	SSD1306_SetXY(x, y);
 8000ac8:	89bb      	ldrh	r3, [r7, #12]
 8000aca:	897a      	ldrh	r2, [r7, #10]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fb56 	bl	8001180 <SSD1306_SetXY>
	/* Return character written */
	return ch;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000aec:	e012      	b.n	8000b14 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff5b 	bl	80009b2 <SSD1306_Putc>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d002      	beq.n	8000b0e <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	e008      	b.n	8000b20 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1e8      	bne.n	8000aee <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4a:	d901      	bls.n	8000b50 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000b4c:	237f      	movs	r3, #127	; 0x7f
 8000b4e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	2b7f      	cmp	r3, #127	; 0x7f
 8000b54:	d901      	bls.n	8000b5a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000b56:	237f      	movs	r3, #127	; 0x7f
 8000b58:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5e:	d901      	bls.n	8000b64 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000b60:	233f      	movs	r3, #63	; 0x3f
 8000b62:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000b64:	883b      	ldrh	r3, [r7, #0]
 8000b66:	2b3f      	cmp	r3, #63	; 0x3f
 8000b68:	d901      	bls.n	8000b6e <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000b6a:	233f      	movs	r3, #63	; 0x3f
 8000b6c:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d205      	bcs.n	8000b82 <SSD1306_DrawLine+0x5a>
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	e004      	b.n	8000b8c <SSD1306_DrawLine+0x64>
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d205      	bcs.n	8000ba2 <SSD1306_DrawLine+0x7a>
 8000b96:	883a      	ldrh	r2, [r7, #0]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	e004      	b.n	8000bac <SSD1306_DrawLine+0x84>
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	883b      	ldrh	r3, [r7, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d201      	bcs.n	8000bba <SSD1306_DrawLine+0x92>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e001      	b.n	8000bbe <SSD1306_DrawLine+0x96>
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d201      	bcs.n	8000bcc <SSD1306_DrawLine+0xa4>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e001      	b.n	8000bd0 <SSD1306_DrawLine+0xa8>
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000bd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000bd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dd06      	ble.n	8000bec <SSD1306_DrawLine+0xc4>
 8000bde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000be2:	0fda      	lsrs	r2, r3, #31
 8000be4:	4413      	add	r3, r2
 8000be6:	105b      	asrs	r3, r3, #1
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	e006      	b.n	8000bfa <SSD1306_DrawLine+0xd2>
 8000bec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bf0:	0fda      	lsrs	r2, r3, #31
 8000bf2:	4413      	add	r3, r2
 8000bf4:	105b      	asrs	r3, r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d129      	bne.n	8000c58 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000c04:	883a      	ldrh	r2, [r7, #0]
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d205      	bcs.n	8000c18 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000c0c:	883b      	ldrh	r3, [r7, #0]
 8000c0e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d205      	bcs.n	8000c2c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000c28:	893b      	ldrh	r3, [r7, #8]
 8000c2a:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	82bb      	strh	r3, [r7, #20]
 8000c30:	e00c      	b.n	8000c4c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000c32:	8ab9      	ldrh	r1, [r7, #20]
 8000c34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fb44 	bl	80012c8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	82bb      	strh	r3, [r7, #20]
 8000c4c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dded      	ble.n	8000c32 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000c56:	e05f      	b.n	8000d18 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000c58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d129      	bne.n	8000cb4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d205      	bcs.n	8000c74 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000c68:	883b      	ldrh	r3, [r7, #0]
 8000c6a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000c70:	893b      	ldrh	r3, [r7, #8]
 8000c72:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d205      	bcs.n	8000c88 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	82bb      	strh	r3, [r7, #20]
 8000c8c:	e00c      	b.n	8000ca8 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000c8e:	8abb      	ldrh	r3, [r7, #20]
 8000c90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c94:	88b9      	ldrh	r1, [r7, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fb16 	bl	80012c8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000c9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	82bb      	strh	r3, [r7, #20]
 8000ca8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dded      	ble.n	8000c8e <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000cb2:	e031      	b.n	8000d18 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000cb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000cb8:	88b9      	ldrh	r1, [r7, #4]
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fb03 	bl	80012c8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d103      	bne.n	8000cd2 <SSD1306_DrawLine+0x1aa>
 8000cca:	88ba      	ldrh	r2, [r7, #4]
 8000ccc:	883b      	ldrh	r3, [r7, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d021      	beq.n	8000d16 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000cd2:	8afb      	ldrh	r3, [r7, #22]
 8000cd4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000cd6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cde:	425b      	negs	r3, r3
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dd08      	ble.n	8000cf6 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000ce4:	8afa      	ldrh	r2, [r7, #22]
 8000ce6:	8a3b      	ldrh	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000cee:	89fa      	ldrh	r2, [r7, #14]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000cf6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000cfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dad8      	bge.n	8000cb4 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000d02:	8afa      	ldrh	r2, [r7, #22]
 8000d04:	8a7b      	ldrh	r3, [r7, #18]
 8000d06:	4413      	add	r3, r2
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000d0c:	89ba      	ldrh	r2, [r7, #12]
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000d14:	e7ce      	b.n	8000cb4 <SSD1306_DrawLine+0x18c>
			break;
 8000d16:	bf00      	nop
		}
	}
}
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}

08000d1e <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000d1e:	b590      	push	{r4, r7, lr}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af02      	add	r7, sp, #8
 8000d24:	4604      	mov	r4, r0
 8000d26:	4608      	mov	r0, r1
 8000d28:	4611      	mov	r1, r2
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4623      	mov	r3, r4
 8000d2e:	80fb      	strh	r3, [r7, #6]
 8000d30:	4603      	mov	r3, r0
 8000d32:	80bb      	strh	r3, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d40:	d853      	bhi.n	8000dea <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	2b3f      	cmp	r3, #63	; 0x3f
 8000d46:	d850      	bhi.n	8000dea <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d50:	dd03      	ble.n	8000d5a <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000d58:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000d5a:	88ba      	ldrh	r2, [r7, #4]
 8000d5c:	883b      	ldrh	r3, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	2b3f      	cmp	r3, #63	; 0x3f
 8000d62:	dd03      	ble.n	8000d6c <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d6a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	4413      	add	r3, r2
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	88bc      	ldrh	r4, [r7, #4]
 8000d76:	88b9      	ldrh	r1, [r7, #4]
 8000d78:	88f8      	ldrh	r0, [r7, #6]
 8000d7a:	7e3b      	ldrb	r3, [r7, #24]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	4623      	mov	r3, r4
 8000d80:	f7ff fed2 	bl	8000b28 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000d84:	88ba      	ldrh	r2, [r7, #4]
 8000d86:	883b      	ldrh	r3, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b299      	uxth	r1, r3
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	88ba      	ldrh	r2, [r7, #4]
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	88f8      	ldrh	r0, [r7, #6]
 8000d9e:	7e3b      	ldrb	r3, [r7, #24]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	4613      	mov	r3, r2
 8000da4:	4622      	mov	r2, r4
 8000da6:	f7ff febf 	bl	8000b28 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000daa:	88ba      	ldrh	r2, [r7, #4]
 8000dac:	883b      	ldrh	r3, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	b29c      	uxth	r4, r3
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	88b9      	ldrh	r1, [r7, #4]
 8000db6:	88f8      	ldrh	r0, [r7, #6]
 8000db8:	7e3b      	ldrb	r3, [r7, #24]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	f7ff feb3 	bl	8000b28 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000dc2:	88fa      	ldrh	r2, [r7, #6]
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29c      	uxth	r4, r3
 8000dd2:	88ba      	ldrh	r2, [r7, #4]
 8000dd4:	883b      	ldrh	r3, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	88b9      	ldrh	r1, [r7, #4]
 8000ddc:	7e3b      	ldrb	r3, [r7, #24]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	4622      	mov	r2, r4
 8000de4:	f7ff fea0 	bl	8000b28 <SSD1306_DrawLine>
 8000de8:	e000      	b.n	8000dec <SSD1306_DrawRectangle+0xce>
		return;
 8000dea:	bf00      	nop
}
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}

08000df2 <SSD1306_DrawTriangle>:
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8000df2:	b590      	push	{r4, r7, lr}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af02      	add	r7, sp, #8
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4623      	mov	r3, r4
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4603      	mov	r3, r0
 8000e06:	80bb      	strh	r3, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8000e10:	883c      	ldrh	r4, [r7, #0]
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	88b9      	ldrh	r1, [r7, #4]
 8000e16:	88f8      	ldrh	r0, [r7, #6]
 8000e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4623      	mov	r3, r4
 8000e20:	f7ff fe82 	bl	8000b28 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8000e24:	8bbc      	ldrh	r4, [r7, #28]
 8000e26:	8b3a      	ldrh	r2, [r7, #24]
 8000e28:	8839      	ldrh	r1, [r7, #0]
 8000e2a:	8878      	ldrh	r0, [r7, #2]
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4623      	mov	r3, r4
 8000e34:	f7ff fe78 	bl	8000b28 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8000e38:	88bc      	ldrh	r4, [r7, #4]
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	8bb9      	ldrh	r1, [r7, #28]
 8000e3e:	8b38      	ldrh	r0, [r7, #24]
 8000e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	4623      	mov	r3, r4
 8000e48:	f7ff fe6e 	bl	8000b28 <SSD1306_DrawLine>
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}

08000e54 <SSD1306_DrawFilledTriangle>:


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08d      	sub	sp, #52	; 0x34
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	4611      	mov	r1, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	80fb      	strh	r3, [r7, #6]
 8000e66:	4603      	mov	r3, r0
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	807b      	strh	r3, [r7, #2]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000e72:	2300      	movs	r3, #0
 8000e74:	823b      	strh	r3, [r7, #16]
 8000e76:	2300      	movs	r3, #0
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e7e:	2300      	movs	r3, #0
 8000e80:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e82:	2300      	movs	r3, #0
 8000e84:	847b      	strh	r3, [r7, #34]	; 0x22
 8000e86:	2300      	movs	r3, #0
 8000e88:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	83fb      	strh	r3, [r7, #30]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	83bb      	strh	r3, [r7, #28]
 8000e92:	2300      	movs	r3, #0
 8000e94:	837b      	strh	r3, [r7, #26]
 8000e96:	2300      	movs	r3, #0
 8000e98:	833b      	strh	r3, [r7, #24]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	82fb      	strh	r3, [r7, #22]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bfb8      	it	lt
 8000eb0:	425b      	neglt	r3, r3
 8000eb2:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000eb4:	883a      	ldrh	r2, [r7, #0]
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bfb8      	it	lt
 8000ebe:	425b      	neglt	r3, r3
 8000ec0:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d304      	bcc.n	8000edc <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	843b      	strh	r3, [r7, #32]
 8000eda:	e005      	b.n	8000ee8 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8000edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee0:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee6:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000ee8:	883a      	ldrh	r2, [r7, #0]
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d304      	bcc.n	8000efa <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	83bb      	strh	r3, [r7, #28]
 8000ef8:	e005      	b.n	8000f06 <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8000efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efe:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8000f06:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	db10      	blt.n	8000f34 <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000f1a:	8a3b      	ldrh	r3, [r7, #16]
 8000f1c:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000f1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f22:	0fda      	lsrs	r2, r3, #31
 8000f24:	4413      	add	r3, r2
 8000f26:	105b      	asrs	r3, r3, #1
 8000f28:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000f2e:	8a3b      	ldrh	r3, [r7, #16]
 8000f30:	82bb      	strh	r3, [r7, #20]
 8000f32:	e00f      	b.n	8000f54 <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f44:	0fda      	lsrs	r2, r3, #31
 8000f46:	4413      	add	r3, r2
 8000f48:	105b      	asrs	r3, r3, #1
 8000f4a:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000f4c:	8a3b      	ldrh	r3, [r7, #16]
 8000f4e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	827b      	strh	r3, [r7, #18]
 8000f58:	e033      	b.n	8000fc2 <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8000f5a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000f5c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000f5e:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000f60:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000f62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4623      	mov	r3, r4
 8000f6a:	f7ff fddd 	bl	8000b28 <SSD1306_DrawLine>

		num += numadd;
 8000f6e:	8b3a      	ldrh	r2, [r7, #24]
 8000f70:	8afb      	ldrh	r3, [r7, #22]
 8000f72:	4413      	add	r3, r2
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000f78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000f7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db0e      	blt.n	8000fa2 <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8000f84:	8b3a      	ldrh	r2, [r7, #24]
 8000f86:	8b7b      	ldrh	r3, [r7, #26]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000f8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8000f98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f9a:	8bfb      	ldrh	r3, [r7, #30]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8000fa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fa4:	8c3b      	ldrh	r3, [r7, #32]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8000fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fae:	8bbb      	ldrh	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	827b      	strh	r3, [r7, #18]
 8000fc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	ddc5      	ble.n	8000f5a <SSD1306_DrawFilledTriangle+0x106>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	372c      	adds	r7, #44	; 0x2c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <SSD1306_DrawCircle>:

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	f1c3 0301 	rsb	r3, r3, #1
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	461a      	mov	r2, r3
 8001008:	03d2      	lsls	r2, r2, #15
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 800101a:	88f8      	ldrh	r0, [r7, #6]
 800101c:	88ba      	ldrh	r2, [r7, #4]
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	787a      	ldrb	r2, [r7, #1]
 8001026:	4619      	mov	r1, r3
 8001028:	f000 f94e 	bl	80012c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800102c:	88f8      	ldrh	r0, [r7, #6]
 800102e:	88ba      	ldrh	r2, [r7, #4]
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	787a      	ldrb	r2, [r7, #1]
 8001038:	4619      	mov	r1, r3
 800103a:	f000 f945 	bl	80012c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	88b9      	ldrh	r1, [r7, #4]
 8001048:	787a      	ldrb	r2, [r7, #1]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f93c 	bl	80012c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	88b9      	ldrh	r1, [r7, #4]
 800105a:	787a      	ldrb	r2, [r7, #1]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f933 	bl	80012c8 <SSD1306_DrawPixel>

    while (x < y) {
 8001062:	e081      	b.n	8001168 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0e      	blt.n	800108a <SSD1306_DrawCircle+0xb2>
            y--;
 800106c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001070:	b29b      	uxth	r3, r3
 8001072:	3b01      	subs	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001078:	8a7b      	ldrh	r3, [r7, #18]
 800107a:	3302      	adds	r3, #2
 800107c:	b29b      	uxth	r3, r3
 800107e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001080:	8afa      	ldrh	r2, [r7, #22]
 8001082:	8a7b      	ldrh	r3, [r7, #18]
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800108a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800108e:	b29b      	uxth	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	b29b      	uxth	r3, r3
 8001094:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001096:	8abb      	ldrh	r3, [r7, #20]
 8001098:	3302      	adds	r3, #2
 800109a:	b29b      	uxth	r3, r3
 800109c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800109e:	8afa      	ldrh	r2, [r7, #22]
 80010a0:	8abb      	ldrh	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	8a3b      	ldrh	r3, [r7, #16]
 80010ac:	4413      	add	r3, r2
 80010ae:	b298      	uxth	r0, r3
 80010b0:	88ba      	ldrh	r2, [r7, #4]
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	787a      	ldrb	r2, [r7, #1]
 80010ba:	4619      	mov	r1, r3
 80010bc:	f000 f904 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	8a3b      	ldrh	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b298      	uxth	r0, r3
 80010c8:	88ba      	ldrh	r2, [r7, #4]
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	4413      	add	r3, r2
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	787a      	ldrb	r2, [r7, #1]
 80010d2:	4619      	mov	r1, r3
 80010d4:	f000 f8f8 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	8a3b      	ldrh	r3, [r7, #16]
 80010dc:	4413      	add	r3, r2
 80010de:	b298      	uxth	r0, r3
 80010e0:	88ba      	ldrh	r2, [r7, #4]
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	787a      	ldrb	r2, [r7, #1]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f000 f8ec 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	8a3b      	ldrh	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b298      	uxth	r0, r3
 80010f8:	88ba      	ldrh	r2, [r7, #4]
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	787a      	ldrb	r2, [r7, #1]
 8001102:	4619      	mov	r1, r3
 8001104:	f000 f8e0 	bl	80012c8 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	b298      	uxth	r0, r3
 8001110:	88ba      	ldrh	r2, [r7, #4]
 8001112:	8a3b      	ldrh	r3, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
 8001118:	787a      	ldrb	r2, [r7, #1]
 800111a:	4619      	mov	r1, r3
 800111c:	f000 f8d4 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001120:	88fa      	ldrh	r2, [r7, #6]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	b298      	uxth	r0, r3
 8001128:	88ba      	ldrh	r2, [r7, #4]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	787a      	ldrb	r2, [r7, #1]
 8001132:	4619      	mov	r1, r3
 8001134:	f000 f8c8 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	4413      	add	r3, r2
 800113e:	b298      	uxth	r0, r3
 8001140:	88ba      	ldrh	r2, [r7, #4]
 8001142:	8a3b      	ldrh	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	787a      	ldrb	r2, [r7, #1]
 800114a:	4619      	mov	r1, r3
 800114c:	f000 f8bc 	bl	80012c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b298      	uxth	r0, r3
 8001158:	88ba      	ldrh	r2, [r7, #4]
 800115a:	8a3b      	ldrh	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	b29b      	uxth	r3, r3
 8001160:	787a      	ldrb	r2, [r7, #1]
 8001162:	4619      	mov	r1, r3
 8001164:	f000 f8b0 	bl	80012c8 <SSD1306_DrawPixel>
    while (x < y) {
 8001168:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800116c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001170:	429a      	cmp	r2, r3
 8001172:	f6ff af77 	blt.w	8001064 <SSD1306_DrawCircle+0x8c>
    }
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}

08001180 <SSD1306_SetXY>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void SSD1306_SetXY(uint16_t x, uint16_t y) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SSD1306_SetXY+0x28>)
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <SSD1306_SetXY+0x28>)
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	8053      	strh	r3, [r2, #2]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000528 	.word	0x20000528

080011ac <SSD1306_GetXY>:

void SSD1306_GetXY(uint16_t* x, uint16_t* y) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    /* Read current x and y */
    *x = SSD1306.CurrentX;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <SSD1306_GetXY+0x28>)
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	801a      	strh	r2, [r3, #0]
    *y = SSD1306.CurrentY;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SSD1306_GetXY+0x28>)
 80011c0:	885a      	ldrh	r2, [r3, #2]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	801a      	strh	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000528 	.word	0x20000528

080011d8 <SSD1306_GetBufor>:

void SSD1306_GetBufor(uint8_t *buf) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    memcpy(buf, SSD1306_Buffer, sizeof(SSD1306_Buffer));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a06      	ldr	r2, [pc, #24]	; (80011fc <SSD1306_GetBufor+0x24>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	4611      	mov	r1, r2
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	461a      	mov	r2, r3
 80011ee:	f002 fc77 	bl	8003ae0 <memcpy>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000128 	.word	0x20000128

08001200 <SSD1306_ResetStructure>:


void SSD1306_ResetStructure(void){
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SSD1306_ResetStructure+0x28>)
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <SSD1306_ResetStructure+0x28>)
 800120c:	2200      	movs	r2, #0
 800120e:	805a      	strh	r2, [r3, #2]
	/* 0-normal ; 1-inverted */
	SSD1306.Inverted = 0;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SSD1306_ResetStructure+0x28>)
 8001212:	2200      	movs	r2, #0
 8001214:	711a      	strb	r2, [r3, #4]
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SSD1306_ResetStructure+0x28>)
 8001218:	2201      	movs	r2, #1
 800121a:	715a      	strb	r2, [r3, #5]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000528 	.word	0x20000528

0800122c <SSD1306_ToggleInvert>:

void SSD1306_ToggleInvert(void) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
	uint16_t i;

	/* Toggle invert */
	SSD1306.Inverted = !SSD1306.Inverted;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <SSD1306_ToggleInvert+0x4c>)
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <SSD1306_ToggleInvert+0x4c>)
 8001244:	711a      	strb	r2, [r3, #4]

	/* Do memory toggle */
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	e00a      	b.n	8001262 <SSD1306_ToggleInvert+0x36>
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <SSD1306_ToggleInvert+0x50>)
 8001250:	5cd2      	ldrb	r2, [r2, r3]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	43d2      	mvns	r2, r2
 8001256:	b2d1      	uxtb	r1, r2
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <SSD1306_ToggleInvert+0x50>)
 800125a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	3301      	adds	r3, #1
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d3f0      	bcc.n	800124c <SSD1306_ToggleInvert+0x20>
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000528 	.word	0x20000528
 800127c:	20000128 	.word	0x20000128

08001280 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	if (SSD1306.Inverted) {
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <SSD1306_Fill+0x40>)
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <SSD1306_Fill+0x20>
		color = (SSD1306_COLOR_t)!color;
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	71fb      	strb	r3, [r7, #7]
	}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <SSD1306_Fill+0x2a>
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <SSD1306_Fill+0x2c>
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <SSD1306_Fill+0x44>)
 80012b4:	f002 fc22 	bl	8003afc <memset>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000528 	.word	0x20000528
 80012c4:	20000128 	.word	0x20000128

080012c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	460b      	mov	r3, r1
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	70fb      	strb	r3, [r7, #3]
	if (
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2b7f      	cmp	r3, #127	; 0x7f
 80012de:	d848      	bhi.n	8001372 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	2b3f      	cmp	r3, #63	; 0x3f
 80012e4:	d845      	bhi.n	8001372 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <SSD1306_DrawPixel+0xb8>)
 80012e8:	791b      	ldrb	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d11a      	bne.n	8001338 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001302:	88fa      	ldrh	r2, [r7, #6]
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	b298      	uxth	r0, r3
 800130a:	4603      	mov	r3, r0
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	4413      	add	r3, r2
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <SSD1306_DrawPixel+0xbc>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	b25a      	sxtb	r2, r3
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b259      	sxtb	r1, r3
 8001328:	88fa      	ldrh	r2, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	01db      	lsls	r3, r3, #7
 800132e:	4413      	add	r3, r2
 8001330:	b2c9      	uxtb	r1, r1
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <SSD1306_DrawPixel+0xbc>)
 8001334:	54d1      	strb	r1, [r2, r3]
 8001336:	e01d      	b.n	8001374 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	b298      	uxth	r0, r3
 8001340:	4603      	mov	r3, r0
 8001342:	01db      	lsls	r3, r3, #7
 8001344:	4413      	add	r3, r2
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <SSD1306_DrawPixel+0xbc>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	b25a      	sxtb	r2, r3
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	b25b      	sxtb	r3, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	b25b      	sxtb	r3, r3
 800135e:	4013      	ands	r3, r2
 8001360:	b259      	sxtb	r1, r3
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	4603      	mov	r3, r0
 8001366:	01db      	lsls	r3, r3, #7
 8001368:	4413      	add	r3, r2
 800136a:	b2c9      	uxtb	r1, r1
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SSD1306_DrawPixel+0xbc>)
 800136e:	54d1      	strb	r1, [r2, r3]
 8001370:	e000      	b.n	8001374 <SSD1306_DrawPixel+0xac>
		return;
 8001372:	bf00      	nop
	}
}
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000528 	.word	0x20000528
 8001384:	20000128 	.word	0x20000128

08001388 <SSD1306_Init>:
#define SSD1306_INVERTDISPLAY       0xA7

extern I2C_HandleTypeDef hi2c1;
extern SPI_HandleTypeDef hspi2;

uint8_t SSD1306_Init(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800138e:	f000 f8ed 	bl	800156c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001392:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001396:	2201      	movs	r2, #1
 8001398:	2178      	movs	r1, #120	; 0x78
 800139a:	4857      	ldr	r0, [pc, #348]	; (80014f8 <SSD1306_Init+0x170>)
 800139c:	f001 f862 	bl	8002464 <HAL_I2C_IsDeviceReady>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e0a2      	b.n	80014f0 <SSD1306_Init+0x168>
	}
	/* A little delay */
	uint32_t p = 2500;
 80013aa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013b0:	e002      	b.n	80013b8 <SSD1306_Init+0x30>
		p--;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80013be:	22ae      	movs	r2, #174	; 0xae
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 f94e 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	2078      	movs	r0, #120	; 0x78
 80013ce:	f000 f949 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80013d2:	2210      	movs	r2, #16
 80013d4:	2100      	movs	r1, #0
 80013d6:	2078      	movs	r0, #120	; 0x78
 80013d8:	f000 f944 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013dc:	22b0      	movs	r2, #176	; 0xb0
 80013de:	2100      	movs	r1, #0
 80013e0:	2078      	movs	r0, #120	; 0x78
 80013e2:	f000 f93f 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013e6:	22c8      	movs	r2, #200	; 0xc8
 80013e8:	2100      	movs	r1, #0
 80013ea:	2078      	movs	r0, #120	; 0x78
 80013ec:	f000 f93a 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2078      	movs	r0, #120	; 0x78
 80013f6:	f000 f935 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013fa:	2210      	movs	r2, #16
 80013fc:	2100      	movs	r1, #0
 80013fe:	2078      	movs	r0, #120	; 0x78
 8001400:	f000 f930 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	2078      	movs	r0, #120	; 0x78
 800140a:	f000 f92b 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800140e:	2281      	movs	r2, #129	; 0x81
 8001410:	2100      	movs	r1, #0
 8001412:	2078      	movs	r0, #120	; 0x78
 8001414:	f000 f926 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	2100      	movs	r1, #0
 800141c:	2078      	movs	r0, #120	; 0x78
 800141e:	f000 f921 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001422:	22a1      	movs	r2, #161	; 0xa1
 8001424:	2100      	movs	r1, #0
 8001426:	2078      	movs	r0, #120	; 0x78
 8001428:	f000 f91c 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800142c:	22a6      	movs	r2, #166	; 0xa6
 800142e:	2100      	movs	r1, #0
 8001430:	2078      	movs	r0, #120	; 0x78
 8001432:	f000 f917 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001436:	22a8      	movs	r2, #168	; 0xa8
 8001438:	2100      	movs	r1, #0
 800143a:	2078      	movs	r0, #120	; 0x78
 800143c:	f000 f912 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //1/64 duty
 8001440:	223f      	movs	r2, #63	; 0x3f
 8001442:	2100      	movs	r1, #0
 8001444:	2078      	movs	r0, #120	; 0x78
 8001446:	f000 f90d 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800144a:	22a4      	movs	r2, #164	; 0xa4
 800144c:	2100      	movs	r1, #0
 800144e:	2078      	movs	r0, #120	; 0x78
 8001450:	f000 f908 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001454:	22d3      	movs	r2, #211	; 0xd3
 8001456:	2100      	movs	r1, #0
 8001458:	2078      	movs	r0, #120	; 0x78
 800145a:	f000 f903 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2078      	movs	r0, #120	; 0x78
 8001464:	f000 f8fe 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001468:	22d5      	movs	r2, #213	; 0xd5
 800146a:	2100      	movs	r1, #0
 800146c:	2078      	movs	r0, #120	; 0x78
 800146e:	f000 f8f9 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001472:	22f0      	movs	r2, #240	; 0xf0
 8001474:	2100      	movs	r1, #0
 8001476:	2078      	movs	r0, #120	; 0x78
 8001478:	f000 f8f4 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800147c:	22d9      	movs	r2, #217	; 0xd9
 800147e:	2100      	movs	r1, #0
 8001480:	2078      	movs	r0, #120	; 0x78
 8001482:	f000 f8ef 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001486:	2222      	movs	r2, #34	; 0x22
 8001488:	2100      	movs	r1, #0
 800148a:	2078      	movs	r0, #120	; 0x78
 800148c:	f000 f8ea 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001490:	22da      	movs	r2, #218	; 0xda
 8001492:	2100      	movs	r1, #0
 8001494:	2078      	movs	r0, #120	; 0x78
 8001496:	f000 f8e5 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800149a:	2212      	movs	r2, #18
 800149c:	2100      	movs	r1, #0
 800149e:	2078      	movs	r0, #120	; 0x78
 80014a0:	f000 f8e0 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014a4:	22db      	movs	r2, #219	; 0xdb
 80014a6:	2100      	movs	r1, #0
 80014a8:	2078      	movs	r0, #120	; 0x78
 80014aa:	f000 f8db 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014ae:	2220      	movs	r2, #32
 80014b0:	2100      	movs	r1, #0
 80014b2:	2078      	movs	r0, #120	; 0x78
 80014b4:	f000 f8d6 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80014b8:	228d      	movs	r2, #141	; 0x8d
 80014ba:	2100      	movs	r1, #0
 80014bc:	2078      	movs	r0, #120	; 0x78
 80014be:	f000 f8d1 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80014c2:	2214      	movs	r2, #20
 80014c4:	2100      	movs	r1, #0
 80014c6:	2078      	movs	r0, #120	; 0x78
 80014c8:	f000 f8cc 	bl	8001664 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80014cc:	22af      	movs	r2, #175	; 0xaf
 80014ce:	2100      	movs	r1, #0
 80014d0:	2078      	movs	r0, #120	; 0x78
 80014d2:	f000 f8c7 	bl	8001664 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80014d6:	222e      	movs	r2, #46	; 0x2e
 80014d8:	2100      	movs	r1, #0
 80014da:	2078      	movs	r0, #120	; 0x78
 80014dc:	f000 f8c2 	bl	8001664 <ssd1306_I2C_Write>
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fecd 	bl	8001280 <SSD1306_Fill>
	/* Update screen */
	SSD1306_UpdateScreen();
 80014e6:	f000 f809 	bl	80014fc <SSD1306_UpdateScreen>
	/* Set default values */
	SSD1306_ResetStructure();
 80014ea:	f7ff fe89 	bl	8001200 <SSD1306_ResetStructure>

	/* Return OK */
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000038 	.word	0x20000038

080014fc <SSD1306_UpdateScreen>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_UpdateScreen(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001502:	af00      	add	r7, sp, #0
	uint8_t m;
	uint8_t bufor[SSD1306_WIDTH * SSD1306_HEIGHT / 8];
	SSD1306_GetBufor(bufor);
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe66 	bl	80011d8 <SSD1306_GetBufor>

	for (m = 0; m < 8; m++) {
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8001512:	e021      	b.n	8001558 <SSD1306_UpdateScreen+0x5c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001514:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001518:	3b50      	subs	r3, #80	; 0x50
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	2078      	movs	r0, #120	; 0x78
 8001522:	f000 f89f 	bl	8001664 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f000 f89a 	bl	8001664 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001530:	2210      	movs	r2, #16
 8001532:	2100      	movs	r1, #0
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f000 f895 	bl	8001664 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &bufor[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800153a:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	1d3a      	adds	r2, r7, #4
 8001542:	441a      	add	r2, r3
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f000 f825 	bl	8001598 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800154e:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001552:	3301      	adds	r3, #1
 8001554:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8001558:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 800155c:	2b07      	cmp	r3, #7
 800155e:	d9d9      	bls.n	8001514 <SSD1306_UpdateScreen+0x18>
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ssd1306_I2C_Init>:

void ssd1306_I2C_Init() {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <ssd1306_I2C_Init+0x28>)
 8001574:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001576:	e002      	b.n	800157e <ssd1306_I2C_Init+0x12>
		p--;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f9      	bne.n	8001578 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	0003d090 	.word	0x0003d090

08001598 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b0c7      	sub	sp, #284	; 0x11c
 800159c:	af02      	add	r7, sp, #8
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80015a6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80015aa:	600a      	str	r2, [r1, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015b6:	4622      	mov	r2, r4
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015be:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80015c2:	4602      	mov	r2, r0
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ce:	460a      	mov	r2, r1
 80015d0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80015d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015de:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	for(i = 0; i < count; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80015ec:	e015      	b.n	800161a <ssd1306_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 80015ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80015f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015f6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	441a      	add	r2, r3
 80015fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001602:	3301      	adds	r3, #1
 8001604:	7811      	ldrb	r1, [r2, #0]
 8001606:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800160a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800160e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++){
 8001610:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001614:	3301      	adds	r3, #1
 8001616:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800161a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001622:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3e0      	bcc.n	80015ee <ssd1306_I2C_WriteMulti+0x56>
	}
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800162c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001630:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b299      	uxth	r1, r3
 8001638:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800163c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b29b      	uxth	r3, r3
 8001646:	f107 020c 	add.w	r2, r7, #12
 800164a:	200a      	movs	r0, #10
 800164c:	9000      	str	r0, [sp, #0]
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <ssd1306_I2C_WriteMulti+0xc8>)
 8001650:	f000 fe0a 	bl	8002268 <HAL_I2C_Master_Transmit>
}
 8001654:	bf00      	nop
 8001656:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	20000038 	.word	0x20000038

08001664 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	460b      	mov	r3, r1
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800167a:	797b      	ldrb	r3, [r7, #5]
 800167c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	b299      	uxth	r1, r3
 8001682:	f107 020c 	add.w	r2, r7, #12
 8001686:	230a      	movs	r3, #10
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2302      	movs	r3, #2
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <ssd1306_I2C_Write+0x38>)
 800168e:	f000 fdeb 	bl	8002268 <HAL_I2C_Master_Transmit>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000038 	.word	0x20000038

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_MspInit+0x4c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016de:	2007      	movs	r0, #7
 80016e0:	f000 faac 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x88>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172e:	23c0      	movs	r3, #192	; 0xc0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173e:	2304      	movs	r3, #4
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <HAL_I2C_MspInit+0x8c>)
 800174a:	f000 faab 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a28      	ldr	r2, [pc, #160]	; (8001840 <HAL_SPI_MspInit+0xc0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d14a      	bne.n	8001838 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_SPI_MspInit+0xc4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f6:	230c      	movs	r3, #12
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001806:	2305      	movs	r3, #5
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <HAL_SPI_MspInit+0xc8>)
 8001812:	f000 fa47 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001828:	2305      	movs	r3, #5
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <HAL_SPI_MspInit+0xcc>)
 8001834:	f000 fa36 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40003800 	.word	0x40003800
 8001844:	40023800 	.word	0x40023800
 8001848:	40020800 	.word	0x40020800
 800184c:	40020400 	.word	0x40020400

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_UART_MspInit+0x84>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12b      	bne.n	80018ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_UART_MspInit+0x88>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_UART_MspInit+0x88>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_UART_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018aa:	230c      	movs	r3, #12
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <HAL_UART_MspInit+0x8c>)
 80018c6:	f000 f9ed 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 f890 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001982:	f7ff ffd7 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f002 f887 	bl	8003a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7fe fda7 	bl	80004dc <main>
  bx  lr    
 800198e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800199c:	080043c8 	.word	0x080043c8
  ldr r2, =_sbss
 80019a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80019a4:	20000534 	.word	0x20000534

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_Init+0x40>)
 80019b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_Init+0x40>)
 80019c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_Init+0x40>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 f931 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f808 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff fe5e 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f93b 	bl	8001c8a <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f911 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000010 	.word	0x20000010
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	20000014 	.word	0x20000014

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000018 	.word	0x20000018
 8001a74:	20000530 	.word	0x20000530

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000530 	.word	0x20000530

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000018 	.word	0x20000018

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff47 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5c 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb0 	bl	8001bf8 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e159      	b.n	8001f74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8148 	bne.w	8001f6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a2 	beq.w	8001f6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x202>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x1fe>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a47      	ldr	r2, [pc, #284]	; (8001f9c <HAL_GPIO_Init+0x2f8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <HAL_GPIO_Init+0x2fc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x1f6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <HAL_GPIO_Init+0x300>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x1f2>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x204>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x204>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x204>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x204>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x204>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f aea2 	bls.w	8001cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12b      	b.n	800224a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fb72 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002044:	f001 f9b6 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a81      	ldr	r2, [pc, #516]	; (8002254 <HAL_I2C_Init+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d807      	bhi.n	8002064 <HAL_I2C_Init+0x84>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_I2C_Init+0x278>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e006      	b.n	8002072 <HAL_I2C_Init+0x92>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a7d      	ldr	r2, [pc, #500]	; (800225c <HAL_I2C_Init+0x27c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e7      	b.n	800224a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a78      	ldr	r2, [pc, #480]	; (8002260 <HAL_I2C_Init+0x280>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_I2C_Init+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <HAL_I2C_Init+0xd4>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e009      	b.n	80020c8 <HAL_I2C_Init+0xe8>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_I2C_Init+0x284>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	495c      	ldr	r1, [pc, #368]	; (8002254 <HAL_I2C_Init+0x274>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d819      	bhi.n	800211c <HAL_I2C_Init+0x13c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e59      	subs	r1, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_I2C_Init+0x138>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	e051      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002118:	2304      	movs	r3, #4
 800211a:	e04f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_I2C_Init+0x168>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_I2C_Init+0x18e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x196>
 8002172:	2301      	movs	r3, #1
 8002174:	e022      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_I2C_Init+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e58      	subs	r0, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	000186a0 	.word	0x000186a0
 8002258:	001e847f 	.word	0x001e847f
 800225c:	003d08ff 	.word	0x003d08ff
 8002260:	431bde83 	.word	0x431bde83
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	461a      	mov	r2, r3
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
 8002278:	4613      	mov	r3, r2
 800227a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fbfc 	bl	8001a78 <HAL_GetTick>
 8002280:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	f040 80e0 	bne.w	8002450 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2319      	movs	r3, #25
 8002296:	2201      	movs	r2, #1
 8002298:	4970      	ldr	r1, [pc, #448]	; (800245c <HAL_I2C_Master_Transmit+0x1f4>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa92 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0d3      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x50>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0cc      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d007      	beq.n	80022de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <HAL_I2C_Master_Transmit+0x1f8>)
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f9ca 	bl	80026c0 <I2C_MasterRequestWrite>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08d      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800234c:	e066      	b.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fb0c 	bl	8002970 <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6a39      	ldr	r1, [r7, #32]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fafc 	bl	80029f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01a      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d194      	bne.n	800234e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000

08002464 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fb00 	bl	8001a78 <HAL_GetTick>
 8002478:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 8111 	bne.w	80026ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	4988      	ldr	r1, [pc, #544]	; (80026b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f994 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	e104      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_IsDeviceReady+0x50>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0fd      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d007      	beq.n	80024da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2224      	movs	r2, #36	; 0x24
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a70      	ldr	r2, [pc, #448]	; (80026bc <HAL_I2C_IsDeviceReady+0x258>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f952 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d103      	bne.n	800253e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0b6      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002550:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002552:	f7ff fa91 	bl	8001a78 <HAL_GetTick>
 8002556:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002586:	e025      	b.n	80025d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002588:	f7ff fa76 	bl	8001a78 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <HAL_I2C_IsDeviceReady+0x13a>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22a0      	movs	r2, #160	; 0xa0
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2ba0      	cmp	r3, #160	; 0xa0
 80025de:	d005      	beq.n	80025ec <HAL_I2C_IsDeviceReady+0x188>
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_I2C_IsDeviceReady+0x188>
 80025e6:	7dbb      	ldrb	r3, [r7, #22]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0cd      	beq.n	8002588 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d129      	bne.n	8002656 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4921      	ldr	r1, [pc, #132]	; (80026b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f8c6 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e036      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e02c      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002664:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800266e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2319      	movs	r3, #25
 8002676:	2201      	movs	r2, #1
 8002678:	490f      	ldr	r1, [pc, #60]	; (80026b8 <HAL_I2C_IsDeviceReady+0x254>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f8a2 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e012      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3301      	adds	r3, #1
 800268e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	f4ff af32 	bcc.w	80024fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000

080026c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d006      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d003      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00b      	b.n	8002714 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b12      	cmp	r3, #18
 8002702:	d107      	bne.n	8002714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f84f 	bl	80027c4 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273a:	d103      	bne.n	8002744 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e035      	b.n	80027b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	e01b      	b.n	800279c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	11db      	asrs	r3, r3, #7
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0306 	and.w	r3, r3, #6
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f063 030f 	orn	r3, r3, #15
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <I2C_MasterRequestWrite+0xfc>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f875 	bl	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e010      	b.n	80027b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <I2C_MasterRequestWrite+0x100>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f865 	bl	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	00010008 	.word	0x00010008
 80027c0:	00010002 	.word	0x00010002

080027c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d4:	e025      	b.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d021      	beq.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7ff f94b 	bl	8001a78 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e023      	b.n	800286a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10d      	bne.n	8002848 <I2C_WaitOnFlagUntilTimeout+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	e00c      	b.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	429a      	cmp	r2, r3
 8002866:	d0b6      	beq.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002880:	e051      	b.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002890:	d123      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f043 0204 	orr.w	r2, r3, #4
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e046      	b.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d021      	beq.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e2:	f7ff f8c9 	bl	8001a78 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d116      	bne.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e020      	b.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10c      	bne.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4013      	ands	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e00b      	b.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d18d      	bne.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297c:	e02d      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f878 	bl	8002a74 <I2C_IsAcknowledgeFailed>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e02d      	b.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d021      	beq.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7ff f86f 	bl	8001a78 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d116      	bne.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e007      	b.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d1ca      	bne.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029fe:	e02d      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f837 	bl	8002a74 <I2C_IsAcknowledgeFailed>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e02d      	b.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d021      	beq.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7ff f82e 	bl	8001a78 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d1ca      	bne.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d11b      	bne.n	8002ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e267      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b85      	ldr	r3, [pc, #532]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e242      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6c      	ldr	r2, [pc, #432]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ff74 	bl	8001a78 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe ff70 	bl	8001a78 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e207      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ff60 	bl	8001a78 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe ff5c 	bl	8001a78 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c7      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4937      	ldr	r1, [pc, #220]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe ff15 	bl	8001a78 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe ff11 	bl	8001a78 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4925      	ldr	r1, [pc, #148]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fef4 	bl	8001a78 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fef0 	bl	8001a78 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e187      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d036      	beq.n	8002d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fed4 	bl	8001a78 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fed0 	bl	8001a78 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e167      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e01b      	b.n	8002d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe febd 	bl	8001a78 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe feb9 	bl	8001a78 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d907      	bls.n	8002d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b77      	ldr	r3, [pc, #476]	; (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	; (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fe79 	bl	8001a78 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe fe75 	bl	8001a78 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x30c>
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a5e      	ldr	r2, [pc, #376]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002de0:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a57      	ldr	r2, [pc, #348]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	4b55      	ldr	r3, [pc, #340]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fe3a 	bl	8001a78 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fe36 	bl	8001a78 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fe24 	bl	8001a78 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe fe20 	bl	8001a78 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a1 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d05c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d141      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fdf4 	bl	8001a78 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fdf0 	bl	8001a78 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	491b      	ldr	r1, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fdc9 	bl	8001a78 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe fdc5 	bl	8001a78 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e05c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x416>
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fdb2 	bl	8001a78 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fdae 	bl	8001a78 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e045      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
 8002f36:	e03d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e038      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fce0 	bl	8001a78 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fcdc 	bl	8001a78 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc40 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	080043a0 	.word	0x080043a0
 8003188:	20000010 	.word	0x20000010
 800318c:	20000014 	.word	0x20000014

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b094      	sub	sp, #80	; 0x50
 8003196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
 800319c:	2300      	movs	r3, #0
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a0:	2300      	movs	r3, #0
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a8:	4b79      	ldr	r3, [pc, #484]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x40>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	f200 80e1 	bhi.w	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x3a>
 80031c2:	e0db      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b73      	ldr	r3, [pc, #460]	; (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031c8:	e0db      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_GetSysClockFreq+0x208>)
 80031cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ce:	e0d8      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
 80031fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4621      	mov	r1, r4
 800321c:	1a51      	subs	r1, r2, r1
 800321e:	6139      	str	r1, [r7, #16]
 8003220:	4629      	mov	r1, r5
 8003222:	eb63 0301 	sbc.w	r3, r3, r1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003234:	4659      	mov	r1, fp
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323e:	4651      	mov	r1, sl
 8003240:	018a      	lsls	r2, r1, #6
 8003242:	4651      	mov	r1, sl
 8003244:	ebb2 0801 	subs.w	r8, r2, r1
 8003248:	4659      	mov	r1, fp
 800324a:	eb63 0901 	sbc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	462b      	mov	r3, r5
 8003270:	eb49 0303 	adc.w	r3, r9, r3
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003282:	4629      	mov	r1, r5
 8003284:	024b      	lsls	r3, r1, #9
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328c:	4621      	mov	r1, r4
 800328e:	024a      	lsls	r2, r1, #9
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800329c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a0:	f7fc ff9a 	bl	80001d8 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ac:	e058      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	2200      	movs	r2, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	4611      	mov	r1, r2
 80032ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0159      	lsls	r1, r3, #5
 80032d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032da:	0150      	lsls	r0, r2, #5
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4641      	mov	r1, r8
 80032e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003300:	ebb2 040a 	subs.w	r4, r2, sl
 8003304:	eb63 050b 	sbc.w	r5, r3, fp
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	00eb      	lsls	r3, r5, #3
 8003312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4643      	mov	r3, r8
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	464b      	mov	r3, r9
 8003324:	eb45 0303 	adc.w	r3, r5, r3
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003336:	4629      	mov	r1, r5
 8003338:	028b      	lsls	r3, r1, #10
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003340:	4621      	mov	r1, r4
 8003342:	028a      	lsls	r2, r1, #10
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	61fa      	str	r2, [r7, #28]
 8003350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003354:	f7fc ff40 	bl	80001d8 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4613      	mov	r3, r2
 800335e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003384:	4618      	mov	r0, r3
 8003386:	3750      	adds	r7, #80	; 0x50
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000010 	.word	0x20000010

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a9b      	lsrs	r3, r3, #10
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	080043b0 	.word	0x080043b0

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffdc 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	080043b0 	.word	0x080043b0

08003404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07b      	b.n	800350e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003426:	d009      	beq.n	800343c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
 800342e:	e005      	b.n	800343c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe f992 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	ea42 0103 	orr.w	r1, r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0104 	and.w	r1, r3, #4
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0210 	and.w	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e03f      	b.n	80035a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fe f987 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003558:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f828 	bl	80035b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800358e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b4:	b0c0      	sub	sp, #256	; 0x100
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	ea40 0301 	orr.w	r3, r0, r1
 80035d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003608:	f021 010c 	bic.w	r1, r1, #12
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003616:	430b      	orrs	r3, r1
 8003618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362a:	6999      	ldr	r1, [r3, #24]
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	ea40 0301 	orr.w	r3, r0, r1
 8003636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b8f      	ldr	r3, [pc, #572]	; (800387c <UART_SetConfig+0x2cc>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d005      	beq.n	8003650 <UART_SetConfig+0xa0>
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b8d      	ldr	r3, [pc, #564]	; (8003880 <UART_SetConfig+0x2d0>)
 800364c:	429a      	cmp	r2, r3
 800364e:	d104      	bne.n	800365a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003650:	f7ff fec4 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8003654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003658:	e003      	b.n	8003662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800365a:	f7ff feab 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800365e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	f040 810c 	bne.w	8003888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003674:	2200      	movs	r2, #0
 8003676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800367a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800367e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003682:	4622      	mov	r2, r4
 8003684:	462b      	mov	r3, r5
 8003686:	1891      	adds	r1, r2, r2
 8003688:	65b9      	str	r1, [r7, #88]	; 0x58
 800368a:	415b      	adcs	r3, r3
 800368c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800368e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003692:	4621      	mov	r1, r4
 8003694:	eb12 0801 	adds.w	r8, r2, r1
 8003698:	4629      	mov	r1, r5
 800369a:	eb43 0901 	adc.w	r9, r3, r1
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b2:	4690      	mov	r8, r2
 80036b4:	4699      	mov	r9, r3
 80036b6:	4623      	mov	r3, r4
 80036b8:	eb18 0303 	adds.w	r3, r8, r3
 80036bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036c0:	462b      	mov	r3, r5
 80036c2:	eb49 0303 	adc.w	r3, r9, r3
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036de:	460b      	mov	r3, r1
 80036e0:	18db      	adds	r3, r3, r3
 80036e2:	653b      	str	r3, [r7, #80]	; 0x50
 80036e4:	4613      	mov	r3, r2
 80036e6:	eb42 0303 	adc.w	r3, r2, r3
 80036ea:	657b      	str	r3, [r7, #84]	; 0x54
 80036ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036f4:	f7fc fd70 	bl	80001d8 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4b61      	ldr	r3, [pc, #388]	; (8003884 <UART_SetConfig+0x2d4>)
 80036fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	011c      	lsls	r4, r3, #4
 8003706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003720:	415b      	adcs	r3, r3
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003728:	4641      	mov	r1, r8
 800372a:	eb12 0a01 	adds.w	sl, r2, r1
 800372e:	4649      	mov	r1, r9
 8003730:	eb43 0b01 	adc.w	fp, r3, r1
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003748:	4692      	mov	sl, r2
 800374a:	469b      	mov	fp, r3
 800374c:	4643      	mov	r3, r8
 800374e:	eb1a 0303 	adds.w	r3, sl, r3
 8003752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003756:	464b      	mov	r3, r9
 8003758:	eb4b 0303 	adc.w	r3, fp, r3
 800375c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800376c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003774:	460b      	mov	r3, r1
 8003776:	18db      	adds	r3, r3, r3
 8003778:	643b      	str	r3, [r7, #64]	; 0x40
 800377a:	4613      	mov	r3, r2
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
 8003782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800378a:	f7fc fd25 	bl	80001d8 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4611      	mov	r1, r2
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <UART_SetConfig+0x2d4>)
 8003796:	fba3 2301 	umull	r2, r3, r3, r1
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2264      	movs	r2, #100	; 0x64
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	1acb      	subs	r3, r1, r3
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <UART_SetConfig+0x2d4>)
 80037ac:	fba3 2302 	umull	r2, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b8:	441c      	add	r4, r3
 80037ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d4:	415b      	adcs	r3, r3
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037dc:	4641      	mov	r1, r8
 80037de:	1851      	adds	r1, r2, r1
 80037e0:	6339      	str	r1, [r7, #48]	; 0x30
 80037e2:	4649      	mov	r1, r9
 80037e4:	414b      	adcs	r3, r1
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037f4:	4659      	mov	r1, fp
 80037f6:	00cb      	lsls	r3, r1, #3
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fe:	4651      	mov	r1, sl
 8003800:	00ca      	lsls	r2, r1, #3
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4603      	mov	r3, r0
 8003808:	4642      	mov	r2, r8
 800380a:	189b      	adds	r3, r3, r2
 800380c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003810:	464b      	mov	r3, r9
 8003812:	460a      	mov	r2, r1
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800382c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003830:	460b      	mov	r3, r1
 8003832:	18db      	adds	r3, r3, r3
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
 8003836:	4613      	mov	r3, r2
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003846:	f7fc fcc7 	bl	80001d8 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <UART_SetConfig+0x2d4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <UART_SetConfig+0x2d4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 0207 	and.w	r2, r3, #7
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4422      	add	r2, r4
 8003876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003878:	e105      	b.n	8003a86 <UART_SetConfig+0x4d6>
 800387a:	bf00      	nop
 800387c:	40011000 	.word	0x40011000
 8003880:	40011400 	.word	0x40011400
 8003884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388c:	2200      	movs	r2, #0
 800388e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800389a:	4642      	mov	r2, r8
 800389c:	464b      	mov	r3, r9
 800389e:	1891      	adds	r1, r2, r2
 80038a0:	6239      	str	r1, [r7, #32]
 80038a2:	415b      	adcs	r3, r3
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038aa:	4641      	mov	r1, r8
 80038ac:	1854      	adds	r4, r2, r1
 80038ae:	4649      	mov	r1, r9
 80038b0:	eb43 0501 	adc.w	r5, r3, r1
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	00eb      	lsls	r3, r5, #3
 80038be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c2:	00e2      	lsls	r2, r4, #3
 80038c4:	4614      	mov	r4, r2
 80038c6:	461d      	mov	r5, r3
 80038c8:	4643      	mov	r3, r8
 80038ca:	18e3      	adds	r3, r4, r3
 80038cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038d0:	464b      	mov	r3, r9
 80038d2:	eb45 0303 	adc.w	r3, r5, r3
 80038d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038f6:	4629      	mov	r1, r5
 80038f8:	008b      	lsls	r3, r1, #2
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003900:	4621      	mov	r1, r4
 8003902:	008a      	lsls	r2, r1, #2
 8003904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003908:	f7fc fc66 	bl	80001d8 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4b60      	ldr	r3, [pc, #384]	; (8003a94 <UART_SetConfig+0x4e4>)
 8003912:	fba3 2302 	umull	r2, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	011c      	lsls	r4, r3, #4
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	61b9      	str	r1, [r7, #24]
 8003934:	415b      	adcs	r3, r3
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800393c:	4641      	mov	r1, r8
 800393e:	1851      	adds	r1, r2, r1
 8003940:	6139      	str	r1, [r7, #16]
 8003942:	4649      	mov	r1, r9
 8003944:	414b      	adcs	r3, r1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003954:	4659      	mov	r1, fp
 8003956:	00cb      	lsls	r3, r1, #3
 8003958:	4651      	mov	r1, sl
 800395a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395e:	4651      	mov	r1, sl
 8003960:	00ca      	lsls	r2, r1, #3
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	4603      	mov	r3, r0
 8003968:	4642      	mov	r2, r8
 800396a:	189b      	adds	r3, r3, r2
 800396c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003970:	464b      	mov	r3, r9
 8003972:	460a      	mov	r2, r1
 8003974:	eb42 0303 	adc.w	r3, r2, r3
 8003978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	67bb      	str	r3, [r7, #120]	; 0x78
 8003986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003994:	4649      	mov	r1, r9
 8003996:	008b      	lsls	r3, r1, #2
 8003998:	4641      	mov	r1, r8
 800399a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800399e:	4641      	mov	r1, r8
 80039a0:	008a      	lsls	r2, r1, #2
 80039a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039a6:	f7fc fc17 	bl	80001d8 <__aeabi_uldivmod>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <UART_SetConfig+0x4e4>)
 80039b0:	fba3 1302 	umull	r1, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2164      	movs	r1, #100	; 0x64
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <UART_SetConfig+0x4e4>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ce:	441c      	add	r4, r3
 80039d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d4:	2200      	movs	r2, #0
 80039d6:	673b      	str	r3, [r7, #112]	; 0x70
 80039d8:	677a      	str	r2, [r7, #116]	; 0x74
 80039da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039de:	4642      	mov	r2, r8
 80039e0:	464b      	mov	r3, r9
 80039e2:	1891      	adds	r1, r2, r2
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	415b      	adcs	r3, r3
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ee:	4641      	mov	r1, r8
 80039f0:	1851      	adds	r1, r2, r1
 80039f2:	6039      	str	r1, [r7, #0]
 80039f4:	4649      	mov	r1, r9
 80039f6:	414b      	adcs	r3, r1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a06:	4659      	mov	r1, fp
 8003a08:	00cb      	lsls	r3, r1, #3
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a10:	4651      	mov	r1, sl
 8003a12:	00ca      	lsls	r2, r1, #3
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4642      	mov	r2, r8
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	663b      	str	r3, [r7, #96]	; 0x60
 8003a34:	667a      	str	r2, [r7, #100]	; 0x64
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a42:	4649      	mov	r1, r9
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	4641      	mov	r1, r8
 8003a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	008a      	lsls	r2, r1, #2
 8003a50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a54:	f7fc fbc0 	bl	80001d8 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <UART_SetConfig+0x4e4>)
 8003a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2164      	movs	r1, #100	; 0x64
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <UART_SetConfig+0x4e4>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4422      	add	r2, r4
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	51eb851f 	.word	0x51eb851f

08003a98 <__libc_init_array>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ad0 <__libc_init_array+0x38>)
 8003a9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ad4 <__libc_init_array+0x3c>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	42a6      	cmp	r6, r4
 8003aa6:	d109      	bne.n	8003abc <__libc_init_array+0x24>
 8003aa8:	4d0b      	ldr	r5, [pc, #44]	; (8003ad8 <__libc_init_array+0x40>)
 8003aaa:	4c0c      	ldr	r4, [pc, #48]	; (8003adc <__libc_init_array+0x44>)
 8003aac:	f000 f82e 	bl	8003b0c <_init>
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	42a6      	cmp	r6, r4
 8003ab8:	d105      	bne.n	8003ac6 <__libc_init_array+0x2e>
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac0:	4798      	blx	r3
 8003ac2:	3601      	adds	r6, #1
 8003ac4:	e7ee      	b.n	8003aa4 <__libc_init_array+0xc>
 8003ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aca:	4798      	blx	r3
 8003acc:	3601      	adds	r6, #1
 8003ace:	e7f2      	b.n	8003ab6 <__libc_init_array+0x1e>
 8003ad0:	080043c0 	.word	0x080043c0
 8003ad4:	080043c0 	.word	0x080043c0
 8003ad8:	080043c0 	.word	0x080043c0
 8003adc:	080043c4 	.word	0x080043c4

08003ae0 <memcpy>:
 8003ae0:	440a      	add	r2, r1
 8003ae2:	4291      	cmp	r1, r2
 8003ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ae8:	d100      	bne.n	8003aec <memcpy+0xc>
 8003aea:	4770      	bx	lr
 8003aec:	b510      	push	{r4, lr}
 8003aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af6:	4291      	cmp	r1, r2
 8003af8:	d1f9      	bne.n	8003aee <memcpy+0xe>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
