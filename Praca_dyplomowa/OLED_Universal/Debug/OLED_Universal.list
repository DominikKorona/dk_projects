
OLED_Universal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006084  08006084  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800608c  0800608c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000014  080060a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080060a8  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f656  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  0002f69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000026b1  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e61  00000000  00000000  00034cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000894e7  00000000  00000000  00045b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000cf009  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bd8  00000000  00000000  000cf060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033d0  00000000  00000000  000cfc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005af8 	.word	0x08005af8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005af8 	.word	0x08005af8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fab3 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f871 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f98f 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ee:	f000 f965 	bl	80007bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f939 	bl	8000768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f6:	f000 f8d3 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80004fa:	f000 f8ff 	bl	80006fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80004fe:	f000 ff23 	bl	8001348 <OLED_Init>
  HAL_Delay(1000);
 8000502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000506:	f001 fb13 	bl	8001b30 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  HAL_Delay(1000);
	  SSD1306_Fill(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f001 f86c 	bl	80015e8 <SSD1306_Fill>
	  SSD1306_Putstring(2, 2, "DESERT EAGLE", &Arial_new_7x10, SSD1306_COLOR_WHITE);
 8000510:	2301      	movs	r3, #1
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <main+0xe0>)
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <main+0xe4>)
 8000518:	2102      	movs	r1, #2
 800051a:	2002      	movs	r0, #2
 800051c:	f000 fbb2 	bl	8000c84 <SSD1306_Putstring>
	  SSD1306_DrawLine(2, 14, 128, 14, SSD1306_COLOR_WHITE);
 8000520:	2301      	movs	r3, #1
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	230e      	movs	r3, #14
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	210e      	movs	r1, #14
 800052a:	2002      	movs	r0, #2
 800052c:	f000 fbd9 	bl	8000ce2 <SSD1306_DrawLine>
	  SSD1306_DrawFilledCircle(95, 6, 4, SSD1306_COLOR_WHITE);
 8000530:	2301      	movs	r3, #1
 8000532:	2204      	movs	r2, #4
 8000534:	2106      	movs	r1, #6
 8000536:	205f      	movs	r0, #95	; 0x5f
 8000538:	f000 fe2b 	bl	8001192 <SSD1306_DrawFilledCircle>
	  SSD1306_DrawRectangle(102, 2, 20, 8, SSD1306_COLOR_WHITE);
 800053c:	2301      	movs	r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2308      	movs	r3, #8
 8000542:	2214      	movs	r2, #20
 8000544:	2102      	movs	r1, #2
 8000546:	2066      	movs	r0, #102	; 0x66
 8000548:	f000 fcc6 	bl	8000ed8 <SSD1306_DrawRectangle>
	  SSD1306_DrawTriangle(5, 55, 35, 55, 20, 35, SSD1306_COLOR_WHITE);
 800054c:	2301      	movs	r3, #1
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2323      	movs	r3, #35	; 0x23
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2314      	movs	r3, #20
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2337      	movs	r3, #55	; 0x37
 800055a:	2223      	movs	r2, #35	; 0x23
 800055c:	2137      	movs	r1, #55	; 0x37
 800055e:	2005      	movs	r0, #5
 8000560:	f000 fd24 	bl	8000fac <SSD1306_DrawTriangle>
	  SSD1306_DrawFilledTriangle(15, 50, 25, 50, 20, 40, SSD1306_COLOR_WHITE);
 8000564:	2301      	movs	r3, #1
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2328      	movs	r3, #40	; 0x28
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2314      	movs	r3, #20
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2332      	movs	r3, #50	; 0x32
 8000572:	2219      	movs	r2, #25
 8000574:	2132      	movs	r1, #50	; 0x32
 8000576:	200f      	movs	r0, #15
 8000578:	f000 fd49 	bl	800100e <SSD1306_DrawFilledTriangle>
	  SSD1306_DrawBitmap(30, 23, (const unsigned char*)deagle_56x36, 56, 36, SSD1306_COLOR_WHITE);
 800057c:	2301      	movs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2324      	movs	r3, #36	; 0x24
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2338      	movs	r3, #56	; 0x38
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <main+0xe8>)
 8000588:	2117      	movs	r1, #23
 800058a:	201e      	movs	r0, #30
 800058c:	f000 fa86 	bl	8000a9c <SSD1306_DrawBitmap>

	  SSD1306_DrawBitmap(95, 18, (const unsigned char*)agh_24x44, 24, 44, SSD1306_COLOR_WHITE);
 8000590:	2301      	movs	r3, #1
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	232c      	movs	r3, #44	; 0x2c
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2318      	movs	r3, #24
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0xec>)
 800059c:	2112      	movs	r1, #18
 800059e:	205f      	movs	r0, #95	; 0x5f
 80005a0:	f000 fa7c 	bl	8000a9c <SSD1306_DrawBitmap>
	  OLED_UpdateScreen();
 80005a4:	f000 ffc4 	bl	8001530 <OLED_UpdateScreen>
//	  HAL_Delay(4000);

	  SSD1306_ToggleInvert();
 80005a8:	f000 ff38 	bl	800141c <SSD1306_ToggleInvert>
	  OLED_UpdateScreen();
 80005ac:	f000 ffc0 	bl	8001530 <OLED_UpdateScreen>
	  HAL_Delay(2000);
 80005b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b4:	f001 fabc 	bl	8001b30 <HAL_Delay>
	  SSD1306_Fill(0);
 80005b8:	e7a7      	b.n	800050a <main+0x2e>
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000
 80005c0:	08005b10 	.word	0x08005b10
 80005c4:	08005ee4 	.word	0x08005ee4
 80005c8:	08005fe0 	.word	0x08005fe0

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fa84 	bl	8005ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fde0 	bl	8004218 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f96d 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f842 	bl	8004708 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f957 	bl	800093c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f002 f89b 	bl	8002818 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f928 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40005400 	.word	0x40005400
 80006f8:	00061a80 	.word	0x00061a80

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2210      	movs	r2, #16
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f004 f9fb 	bl	8004b48 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f8f0 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000e4 	.word	0x200000e4
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f004 fdbc 	bl	800531c <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f8c7 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000019c 	.word	0x2000019c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_DMA_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_DMA_Init+0x4c>)
 80007cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_DMA_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200c      	movs	r0, #12
 80007e4:	f001 faa3 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007e8:	200c      	movs	r0, #12
 80007ea:	f001 fabc 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200f      	movs	r0, #15
 80007f4:	f001 fa9b 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007f8:	200f      	movs	r0, #15
 80007fa:	f001 fab4 	bl	8001d66 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <MX_GPIO_Init+0x120>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a40      	ldr	r2, [pc, #256]	; (800092c <MX_GPIO_Init+0x120>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <MX_GPIO_Init+0x120>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <MX_GPIO_Init+0x120>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a39      	ldr	r2, [pc, #228]	; (800092c <MX_GPIO_Init+0x120>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0x120>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0x120>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <MX_GPIO_Init+0x120>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0x120>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <MX_GPIO_Init+0x120>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RES_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000898:	4825      	ldr	r0, [pc, #148]	; (8000930 <MX_GPIO_Init+0x124>)
 800089a:	f001 ffa3 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0x128>)
 80008a4:	f001 ff9e 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x12c>)
 80008ae:	f001 ff99 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x128>)
 80008ca:	f001 fe07 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RES_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RES_Pin;
 80008ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0x124>)
 80008e8:	f001 fdf8 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0x128>)
 8000904:	f001 fdea 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000908:	2310      	movs	r3, #16
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000920:	f001 fddc 	bl	80024dc <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <sh1106_SPI_Write>:
	SH1106_CS_L();
	HAL_SPI_Transmit(&hspi2, data, count, 20);
	SH1106_CS_H(); //?
}

void sh1106_SPI_Write(uint8_t data){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	SH1106_CS_H();
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <sh1106_SPI_Write+0x48>)
 8000958:	f001 ff44 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 800095c:	2200      	movs	r2, #0
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <sh1106_SPI_Write+0x4c>)
 8000962:	f001 ff3f 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <sh1106_SPI_Write+0x48>)
 800096c:	f001 ff3a 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 20);
 8000970:	1df9      	adds	r1, r7, #7
 8000972:	2314      	movs	r3, #20
 8000974:	2201      	movs	r2, #1
 8000976:	4808      	ldr	r0, [pc, #32]	; (8000998 <sh1106_SPI_Write+0x50>)
 8000978:	f004 f96f 	bl	8004c5a <HAL_SPI_Transmit>
	SH1106_CS_H();
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <sh1106_SPI_Write+0x48>)
 8000982:	f001 ff2f 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800
 8000998:	200000e4 	.word	0x200000e4

0800099c <sh1106_SPI_WriteMulti_DMA>:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
extern UART_HandleTypeDef huart2;
#if defined(USE_DMA)
extern volatile uint8_t dmaCounter;
void sh1106_SPI_WriteMulti_DMA(uint8_t* data, uint16_t count) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
//		HAL_Delay(1);
	SH1106_CS_H();
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <sh1106_SPI_WriteMulti_DMA+0x64>)
 80009ae:	f001 ff19 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_DC_H();
 80009b2:	2201      	movs	r2, #1
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <sh1106_SPI_WriteMulti_DMA+0x68>)
 80009b8:	f001 ff14 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 80009bc:	2200      	movs	r2, #0
 80009be:	2110      	movs	r1, #16
 80009c0:	480f      	ldr	r0, [pc, #60]	; (8000a00 <sh1106_SPI_WriteMulti_DMA+0x64>)
 80009c2:	f001 ff0f 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Hello, 1!\r\n", 14, HAL_MAX_DELAY);
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	220e      	movs	r2, #14
 80009cc:	490e      	ldr	r1, [pc, #56]	; (8000a08 <sh1106_SPI_WriteMulti_DMA+0x6c>)
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <sh1106_SPI_WriteMulti_DMA+0x70>)
 80009d0:	f004 fcf1 	bl	80053b6 <HAL_UART_Transmit>
	HAL_SPI_Transmit_DMA(&hspi2, data, count);
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	461a      	mov	r2, r3
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <sh1106_SPI_WriteMulti_DMA+0x74>)
 80009dc:	f004 fa7a 	bl	8004ed4 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {}
 80009e0:	bf00      	nop
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <sh1106_SPI_WriteMulti_DMA+0x74>)
 80009e4:	f004 fb40 	bl	8005068 <HAL_SPI_GetState>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1f9      	bne.n	80009e2 <sh1106_SPI_WriteMulti_DMA+0x46>
//	uint8_t v=2500;
//	while (v>0)
//		v--;
	SH1106_CS_H();
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <sh1106_SPI_WriteMulti_DMA+0x64>)
 80009f4:	f001 fef6 	bl	80027e4 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800
 8000a08:	08005b20 	.word	0x08005b20
 8000a0c:	2000019c 	.word	0x2000019c
 8000a10:	200000e4 	.word	0x200000e4

08000a14 <testowy>:
#endif
#endif

void testowy(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
//	SH1106_CS_H();
	SH1106_RST_L();
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	4802      	ldr	r0, [pc, #8]	; (8000a28 <testowy+0x14>)
 8000a20:	f001 fee0 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40020000 	.word	0x40020000

08000a2c <OLED_Prepare_Interface>:
/////// PREPARE INTERFACE ///////

uint8_t OLED_Prepare_Interface(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
		/* Return false */
		return 0;
	}
#elif defined(INTERFACE_SPI)
	/* Check if LCD connected to SPI */
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET) {
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <OLED_Prepare_Interface+0x60>)
 8000a32:	f004 fb19 	bl	8005068 <HAL_SPI_GetState>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <OLED_Prepare_Interface+0x14>
		return 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e022      	b.n	8000a86 <OLED_Prepare_Interface+0x5a>
	}
	/*Init SPI*/
	SH1106_CS_H();
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <OLED_Prepare_Interface+0x64>)
 8000a46:	f001 fecd 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <OLED_Prepare_Interface+0x68>)
 8000a50:	f001 fec8 	bl	80027e4 <HAL_GPIO_WritePin>
	SH1106_RST_H();
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <OLED_Prepare_Interface+0x6c>)
 8000a5c:	f001 fec2 	bl	80027e4 <HAL_GPIO_WritePin>
	/* A little delay */
	HAL_Delay(1); // add delay function in micro (10u)
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 f865 	bl	8001b30 <HAL_Delay>
	SH1106_RST_L();
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <OLED_Prepare_Interface+0x6c>)
 8000a6e:	f001 feb9 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 100u
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 f85c 	bl	8001b30 <HAL_Delay>
	SH1106_RST_H();
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <OLED_Prepare_Interface+0x6c>)
 8000a80:	f001 feb0 	bl	80027e4 <HAL_GPIO_WritePin>
#endif
	return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000e4 	.word	0x200000e4
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020000 	.word	0x40020000

08000a9c <SSD1306_DrawBitmap>:
#include "oled_functions.h"
#define ABS(x)   ((x) > 0 ? (x) : -(x))


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60ba      	str	r2, [r7, #8]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	81fb      	strh	r3, [r7, #14]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	81bb      	strh	r3, [r7, #12]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab6:	3307      	adds	r3, #7
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da00      	bge.n	8000abe <SSD1306_DrawBitmap+0x22>
 8000abc:	3307      	adds	r3, #7
 8000abe:	10db      	asrs	r3, r3, #3
 8000ac0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	82bb      	strh	r3, [r7, #20]
 8000aca:	e044      	b.n	8000b56 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	827b      	strh	r3, [r7, #18]
 8000ad0:	e02f      	b.n	8000b32 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ad2:	8a7b      	ldrh	r3, [r7, #18]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	75fb      	strb	r3, [r7, #23]
 8000ae2:	e012      	b.n	8000b0a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ae4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ae8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000aec:	fb03 f202 	mul.w	r2, r3, r2
 8000af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da00      	bge.n	8000afa <SSD1306_DrawBitmap+0x5e>
 8000af8:	3307      	adds	r3, #7
 8000afa:	10db      	asrs	r3, r3, #3
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	4413      	add	r3, r2
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da09      	bge.n	8000b26 <SSD1306_DrawBitmap+0x8a>
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	8a7b      	ldrh	r3, [r7, #18]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	89b9      	ldrh	r1, [r7, #12]
 8000b1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fca5 	bl	8001470 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	827b      	strh	r3, [r7, #18]
 8000b32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbc9      	blt.n	8000ad2 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	82bb      	strh	r3, [r7, #20]
 8000b4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	81bb      	strh	r3, [r7, #12]
 8000b56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbb4      	blt.n	8000acc <SSD1306_DrawBitmap+0x30>
		}
    }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SSD1306_Putchar>:


char SSD1306_Putchar(uint8_t chXpos, uint8_t chYpos, char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	71bb      	strb	r3, [r7, #6]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	717b      	strb	r3, [r7, #5]

	uint8_t i, j;
	uint8_t byte, byteWidth, rowWidthBytes;
	if (
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	8812      	ldrh	r2, [r2, #0]
 8000b86:	4413      	add	r3, r2
	if (
 8000b88:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8a:	dc05      	bgt.n	8000b98 <SSD1306_Putchar+0x2c>
		SSD1306_HEIGHT <= (chYpos + Font->FontHeight)
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	8852      	ldrh	r2, [r2, #2]
 8000b92:	4413      	add	r3, r2
		SSD1306_WIDTH <= (chXpos + Font->FontWidth) ||
 8000b94:	2b3f      	cmp	r3, #63	; 0x3f
 8000b96:	dd01      	ble.n	8000b9c <SSD1306_Putchar+0x30>
	) {
		/* Error */
		return 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e06f      	b.n	8000c7c <SSD1306_Putchar+0x110>
	}
	byte = 0; // that variable is useful for greater fonts
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	737b      	strb	r3, [r7, #13]
	byteWidth = (Font->FontWidth + 7) / 8; // that variable transform bits to bytes of font width
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da00      	bge.n	8000bac <SSD1306_Putchar+0x40>
 8000baa:	3307      	adds	r3, #7
 8000bac:	10db      	asrs	r3, r3, #3
 8000bae:	733b      	strb	r3, [r7, #12]
	rowWidthBytes = Font->FontHeight * byteWidth;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	885b      	ldrh	r3, [r3, #2]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	7b3a      	ldrb	r2, [r7, #12]
 8000bb8:	fb12 f303 	smulbb	r3, r2, r3
 8000bbc:	72fb      	strb	r3, [r7, #11]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e054      	b.n	8000c6e <SSD1306_Putchar+0x102>
			for (j = 0; j < Font->FontWidth; j++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73bb      	strb	r3, [r7, #14]
 8000bc8:	e048      	b.n	8000c5c <SSD1306_Putchar+0xf0>
				if(j & 7) // gdy i =1,2,3,4,5,6 - to przesuwamy bity o jeden w lewo w kazdej iteracji
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <SSD1306_Putchar+0x70>
				{
					byte <<= 1;
 8000bd4:	7b7b      	ldrb	r3, [r7, #13]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	737b      	strb	r3, [r7, #13]
 8000bda:	e012      	b.n	8000c02 <SSD1306_Putchar+0x96>
				}else /* gdy i==0 to pobieram zerowy element z tablicy,
					   * i==8,==16 itd. to pobieram sasiedni element**/
				{
					byte = Font->data[(ch - 32) * rowWidthBytes + i * byteWidth + j / 8];
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	797a      	ldrb	r2, [r7, #5]
 8000be2:	3a20      	subs	r2, #32
 8000be4:	7af9      	ldrb	r1, [r7, #11]
 8000be6:	fb02 f101 	mul.w	r1, r2, r1
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	7b38      	ldrb	r0, [r7, #12]
 8000bee:	fb00 f202 	mul.w	r2, r0, r2
 8000bf2:	440a      	add	r2, r1
 8000bf4:	7bb9      	ldrb	r1, [r7, #14]
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	b2c9      	uxtb	r1, r1
 8000bfa:	440a      	add	r2, r1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	737b      	strb	r3, [r7, #13]
				}
				if (byte & 0x80){
 8000c02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da10      	bge.n	8000c2c <SSD1306_Putchar+0xc0>
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t) color);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	7e3a      	ldrb	r2, [r7, #24]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f000 fc23 	bl	8001470 <SSD1306_DrawPixel>
 8000c2a:	e014      	b.n	8000c56 <SSD1306_Putchar+0xea>
				} else {
					SSD1306_DrawPixel( (chXpos + j), (chYpos + i), (SSD1306_COLOR_t)!color);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	b298      	uxth	r0, r3
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4413      	add	r3, r2
 8000c42:	b299      	uxth	r1, r3
 8000c44:	7e3b      	ldrb	r3, [r7, #24]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	f000 fc0d 	bl	8001470 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	73bb      	strb	r3, [r7, #14]
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d3b0      	bcc.n	8000bca <SSD1306_Putchar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	885b      	ldrh	r3, [r3, #2]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3a4      	bcc.n	8000bc4 <SSD1306_Putchar+0x58>
				}
			}
		}
	/* Return character written */
	return ch;
 8000c7a:	797b      	ldrb	r3, [r7, #5]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SSD1306_Putstring>:

char SSD1306_Putstring(uint8_t chXpos, uint8_t chYpos, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	460b      	mov	r3, r1
 8000c94:	73bb      	strb	r3, [r7, #14]

	/* Write characters */
	while (*str) {
 8000c96:	e01a      	b.n	8000cce <SSD1306_Putstring+0x4a>
		/* Check available space in LCD */
		if (SSD1306_Putchar(chXpos, chYpos, *str, Font, color) != *str) {
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	7bb9      	ldrb	r1, [r7, #14]
 8000c9e:	7bf8      	ldrb	r0, [r7, #15]
 8000ca0:	7e3b      	ldrb	r3, [r7, #24]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f7ff ff61 	bl	8000b6c <SSD1306_Putchar>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d002      	beq.n	8000cbc <SSD1306_Putstring+0x38>
			/* Return error */
			return *str;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	e00e      	b.n	8000cda <SSD1306_Putstring+0x56>
		}
		/* Increase position */
		chXpos += Font->FontWidth;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	73fb      	strb	r3, [r7, #15]
		/* Increase string pointer */
		str++;
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1e0      	bne.n	8000c98 <SSD1306_Putstring+0x14>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000ce2:	b590      	push	{r4, r7, lr}
 8000ce4:	b087      	sub	sp, #28
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4611      	mov	r1, r2
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	80fb      	strh	r3, [r7, #6]
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80bb      	strh	r3, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	2b7f      	cmp	r3, #127	; 0x7f
 8000d04:	d901      	bls.n	8000d0a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d06:	237f      	movs	r3, #127	; 0x7f
 8000d08:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0e:	d901      	bls.n	8000d14 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d10:	237f      	movs	r3, #127	; 0x7f
 8000d12:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	2b3f      	cmp	r3, #63	; 0x3f
 8000d18:	d901      	bls.n	8000d1e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d1a:	233f      	movs	r3, #63	; 0x3f
 8000d1c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	2b3f      	cmp	r3, #63	; 0x3f
 8000d22:	d901      	bls.n	8000d28 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d24:	233f      	movs	r3, #63	; 0x3f
 8000d26:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000d28:	88fa      	ldrh	r2, [r7, #6]
 8000d2a:	887b      	ldrh	r3, [r7, #2]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d205      	bcs.n	8000d3c <SSD1306_DrawLine+0x5a>
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	e004      	b.n	8000d46 <SSD1306_DrawLine+0x64>
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000d48:	88ba      	ldrh	r2, [r7, #4]
 8000d4a:	883b      	ldrh	r3, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d205      	bcs.n	8000d5c <SSD1306_DrawLine+0x7a>
 8000d50:	883a      	ldrh	r2, [r7, #0]
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	e004      	b.n	8000d66 <SSD1306_DrawLine+0x84>
 8000d5c:	88ba      	ldrh	r2, [r7, #4]
 8000d5e:	883b      	ldrh	r3, [r7, #0]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d201      	bcs.n	8000d74 <SSD1306_DrawLine+0x92>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e001      	b.n	8000d78 <SSD1306_DrawLine+0x96>
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000d7a:	88ba      	ldrh	r2, [r7, #4]
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d201      	bcs.n	8000d86 <SSD1306_DrawLine+0xa4>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e001      	b.n	8000d8a <SSD1306_DrawLine+0xa8>
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000d8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dd06      	ble.n	8000da6 <SSD1306_DrawLine+0xc4>
 8000d98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d9c:	0fda      	lsrs	r2, r3, #31
 8000d9e:	4413      	add	r3, r2
 8000da0:	105b      	asrs	r3, r3, #1
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	e006      	b.n	8000db4 <SSD1306_DrawLine+0xd2>
 8000da6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000daa:	0fda      	lsrs	r2, r3, #31
 8000dac:	4413      	add	r3, r2
 8000dae:	105b      	asrs	r3, r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000db6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d129      	bne.n	8000e12 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000dbe:	883a      	ldrh	r2, [r7, #0]
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d205      	bcs.n	8000dd2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000dc6:	883b      	ldrh	r3, [r7, #0]
 8000dc8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000dce:	893b      	ldrh	r3, [r7, #8]
 8000dd0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d205      	bcs.n	8000de6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000de2:	893b      	ldrh	r3, [r7, #8]
 8000de4:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	82bb      	strh	r3, [r7, #20]
 8000dea:	e00c      	b.n	8000e06 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000dec:	8ab9      	ldrh	r1, [r7, #20]
 8000dee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fb3b 	bl	8001470 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	82bb      	strh	r3, [r7, #20]
 8000e06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dded      	ble.n	8000dec <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000e10:	e05f      	b.n	8000ed2 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000e12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d129      	bne.n	8000e6e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e1a:	883a      	ldrh	r2, [r7, #0]
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d205      	bcs.n	8000e2e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e2a:	893b      	ldrh	r3, [r7, #8]
 8000e2c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d205      	bcs.n	8000e42 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e3e:	893b      	ldrh	r3, [r7, #8]
 8000e40:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	82bb      	strh	r3, [r7, #20]
 8000e46:	e00c      	b.n	8000e62 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e48:	8abb      	ldrh	r3, [r7, #20]
 8000e4a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e4e:	88b9      	ldrh	r1, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fb0d 	bl	8001470 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82bb      	strh	r3, [r7, #20]
 8000e62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dded      	ble.n	8000e48 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000e6c:	e031      	b.n	8000ed2 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000e6e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e72:	88b9      	ldrh	r1, [r7, #4]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fafa 	bl	8001470 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000e7c:	88fa      	ldrh	r2, [r7, #6]
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d103      	bne.n	8000e8c <SSD1306_DrawLine+0x1aa>
 8000e84:	88ba      	ldrh	r2, [r7, #4]
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d021      	beq.n	8000ed0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000e8c:	8afb      	ldrh	r3, [r7, #22]
 8000e8e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000e90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e98:	425b      	negs	r3, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd08      	ble.n	8000eb0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000e9e:	8afa      	ldrh	r2, [r7, #22]
 8000ea0:	8a3b      	ldrh	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000ea8:	89fa      	ldrh	r2, [r7, #14]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4413      	add	r3, r2
 8000eae:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000eb0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000eb4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dad8      	bge.n	8000e6e <SSD1306_DrawLine+0x18c>
			err += dx;
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	8a7b      	ldrh	r3, [r7, #18]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000ec6:	89ba      	ldrh	r2, [r7, #12]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000ece:	e7ce      	b.n	8000e6e <SSD1306_DrawLine+0x18c>
			break;
 8000ed0:	bf00      	nop
		}
	}
}
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8000efa:	d853      	bhi.n	8000fa4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	2b3f      	cmp	r3, #63	; 0x3f
 8000f00:	d850      	bhi.n	8000fa4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4413      	add	r3, r2
 8000f08:	2b7f      	cmp	r3, #127	; 0x7f
 8000f0a:	dd03      	ble.n	8000f14 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f12:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f14:	88ba      	ldrh	r2, [r7, #4]
 8000f16:	883b      	ldrh	r3, [r7, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1c:	dd03      	ble.n	8000f26 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f24:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	88bc      	ldrh	r4, [r7, #4]
 8000f30:	88b9      	ldrh	r1, [r7, #4]
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	7e3b      	ldrb	r3, [r7, #24]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4623      	mov	r3, r4
 8000f3a:	f7ff fed2 	bl	8000ce2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	b299      	uxth	r1, r3
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29c      	uxth	r4, r3
 8000f4e:	88ba      	ldrh	r2, [r7, #4]
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	88f8      	ldrh	r0, [r7, #6]
 8000f58:	7e3b      	ldrb	r3, [r7, #24]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	4622      	mov	r2, r4
 8000f60:	f7ff febf 	bl	8000ce2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29c      	uxth	r4, r3
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	88b9      	ldrh	r1, [r7, #4]
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	7e3b      	ldrb	r3, [r7, #24]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4623      	mov	r3, r4
 8000f78:	f7ff feb3 	bl	8000ce2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4413      	add	r3, r2
 8000f82:	b298      	uxth	r0, r3
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b29c      	uxth	r4, r3
 8000f8c:	88ba      	ldrh	r2, [r7, #4]
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	88b9      	ldrh	r1, [r7, #4]
 8000f96:	7e3b      	ldrb	r3, [r7, #24]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	4622      	mov	r2, r4
 8000f9e:	f7ff fea0 	bl	8000ce2 <SSD1306_DrawLine>
 8000fa2:	e000      	b.n	8000fa6 <SSD1306_DrawRectangle+0xce>
		return;
 8000fa4:	bf00      	nop
}
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <SSD1306_DrawTriangle>:
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8000fca:	883c      	ldrh	r4, [r7, #0]
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	88f8      	ldrh	r0, [r7, #6]
 8000fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f7ff fe82 	bl	8000ce2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8000fde:	8bbc      	ldrh	r4, [r7, #28]
 8000fe0:	8b3a      	ldrh	r2, [r7, #24]
 8000fe2:	8839      	ldrh	r1, [r7, #0]
 8000fe4:	8878      	ldrh	r0, [r7, #2]
 8000fe6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4623      	mov	r3, r4
 8000fee:	f7ff fe78 	bl	8000ce2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8000ff2:	88bc      	ldrh	r4, [r7, #4]
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	8bb9      	ldrh	r1, [r7, #28]
 8000ff8:	8b38      	ldrh	r0, [r7, #24]
 8000ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4623      	mov	r3, r4
 8001002:	f7ff fe6e 	bl	8000ce2 <SSD1306_DrawLine>
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <SSD1306_DrawFilledTriangle>:


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08d      	sub	sp, #52	; 0x34
 8001012:	af02      	add	r7, sp, #8
 8001014:	4604      	mov	r4, r0
 8001016:	4608      	mov	r0, r1
 8001018:	4611      	mov	r1, r2
 800101a:	461a      	mov	r2, r3
 800101c:	4623      	mov	r3, r4
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4603      	mov	r3, r0
 8001022:	80bb      	strh	r3, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800102c:	2300      	movs	r3, #0
 800102e:	823b      	strh	r3, [r7, #16]
 8001030:	2300      	movs	r3, #0
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	2300      	movs	r3, #0
 8001036:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001038:	2300      	movs	r3, #0
 800103a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800103c:	2300      	movs	r3, #0
 800103e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001040:	2300      	movs	r3, #0
 8001042:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001044:	2300      	movs	r3, #0
 8001046:	83fb      	strh	r3, [r7, #30]
 8001048:	2300      	movs	r3, #0
 800104a:	83bb      	strh	r3, [r7, #28]
 800104c:	2300      	movs	r3, #0
 800104e:	837b      	strh	r3, [r7, #26]
 8001050:	2300      	movs	r3, #0
 8001052:	833b      	strh	r3, [r7, #24]
 8001054:	2300      	movs	r3, #0
 8001056:	82fb      	strh	r3, [r7, #22]
 8001058:	2300      	movs	r3, #0
 800105a:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001060:	887a      	ldrh	r2, [r7, #2]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfb8      	it	lt
 800106a:	425b      	neglt	r3, r3
 800106c:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 800106e:	883a      	ldrh	r2, [r7, #0]
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfb8      	it	lt
 8001078:	425b      	neglt	r3, r3
 800107a:	81fb      	strh	r3, [r7, #14]
	x = x1;
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	429a      	cmp	r2, r3
 800108a:	d304      	bcc.n	8001096 <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	843b      	strh	r3, [r7, #32]
 8001094:	e005      	b.n	80010a2 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80010a2:	883a      	ldrh	r2, [r7, #0]
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d304      	bcc.n	80010b4 <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	83bb      	strh	r3, [r7, #28]
 80010b2:	e005      	b.n	80010c0 <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80010ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010be:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 80010c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	db10      	blt.n	80010ee <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80010d4:	8a3b      	ldrh	r3, [r7, #16]
 80010d6:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80010d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010dc:	0fda      	lsrs	r2, r3, #31
 80010de:	4413      	add	r3, r2
 80010e0:	105b      	asrs	r3, r3, #1
 80010e2:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80010e8:	8a3b      	ldrh	r3, [r7, #16]
 80010ea:	82bb      	strh	r3, [r7, #20]
 80010ec:	e00f      	b.n	800110e <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80010fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fe:	0fda      	lsrs	r2, r3, #31
 8001100:	4413      	add	r3, r2
 8001102:	105b      	asrs	r3, r3, #1
 8001104:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001106:	8a3b      	ldrh	r3, [r7, #16]
 8001108:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800110e:	2300      	movs	r3, #0
 8001110:	827b      	strh	r3, [r7, #18]
 8001112:	e033      	b.n	800117c <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8001114:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001116:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001118:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800111a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800111c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4623      	mov	r3, r4
 8001124:	f7ff fddd 	bl	8000ce2 <SSD1306_DrawLine>

		num += numadd;
 8001128:	8b3a      	ldrh	r2, [r7, #24]
 800112a:	8afb      	ldrh	r3, [r7, #22]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001132:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001136:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113a:	429a      	cmp	r2, r3
 800113c:	db0e      	blt.n	800115c <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 800113e:	8b3a      	ldrh	r2, [r7, #24]
 8001140:	8b7b      	ldrh	r3, [r7, #26]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	b29b      	uxth	r3, r3
 8001146:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001148:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800114a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800114c:	4413      	add	r3, r2
 800114e:	b29b      	uxth	r3, r3
 8001150:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001154:	8bfb      	ldrh	r3, [r7, #30]
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 800115c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800115e:	8c3b      	ldrh	r3, [r7, #32]
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001168:	8bbb      	ldrh	r3, [r7, #28]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001174:	b29b      	uxth	r3, r3
 8001176:	3301      	adds	r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	827b      	strh	r3, [r7, #18]
 800117c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001180:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	ddc5      	ble.n	8001114 <SSD1306_DrawFilledTriangle+0x106>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b089      	sub	sp, #36	; 0x24
 8001196:	af02      	add	r7, sp, #8
 8001198:	4604      	mov	r4, r0
 800119a:	4608      	mov	r0, r1
 800119c:	4611      	mov	r1, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	4623      	mov	r3, r4
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4603      	mov	r3, r0
 80011a6:	80bb      	strh	r3, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	f1c3 0301 	rsb	r3, r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	461a      	mov	r2, r3
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80011d4:	88f8      	ldrh	r0, [r7, #6]
 80011d6:	88ba      	ldrh	r2, [r7, #4]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	787a      	ldrb	r2, [r7, #1]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f000 f945 	bl	8001470 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80011e6:	88f8      	ldrh	r0, [r7, #6]
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	787a      	ldrb	r2, [r7, #1]
 80011f2:	4619      	mov	r1, r3
 80011f4:	f000 f93c 	bl	8001470 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	4413      	add	r3, r2
 80011fe:	b29b      	uxth	r3, r3
 8001200:	88b9      	ldrh	r1, [r7, #4]
 8001202:	787a      	ldrb	r2, [r7, #1]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f933 	bl	8001470 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b29b      	uxth	r3, r3
 8001212:	88b9      	ldrh	r1, [r7, #4]
 8001214:	787a      	ldrb	r2, [r7, #1]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f92a 	bl	8001470 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b298      	uxth	r0, r3
 8001224:	88b9      	ldrh	r1, [r7, #4]
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4413      	add	r3, r2
 800122c:	b29a      	uxth	r2, r3
 800122e:	88bc      	ldrh	r4, [r7, #4]
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4623      	mov	r3, r4
 8001236:	f7ff fd54 	bl	8000ce2 <SSD1306_DrawLine>

    while (x < y) {
 800123a:	e079      	b.n	8001330 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0e      	blt.n	8001262 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001250:	8a7b      	ldrh	r3, [r7, #18]
 8001252:	3302      	adds	r3, #2
 8001254:	b29b      	uxth	r3, r3
 8001256:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001258:	8afa      	ldrh	r2, [r7, #22]
 800125a:	8a7b      	ldrh	r3, [r7, #18]
 800125c:	4413      	add	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001262:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001266:	b29b      	uxth	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b29b      	uxth	r3, r3
 800126c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800126e:	8abb      	ldrh	r3, [r7, #20]
 8001270:	3302      	adds	r3, #2
 8001272:	b29b      	uxth	r3, r3
 8001274:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001276:	8afa      	ldrh	r2, [r7, #22]
 8001278:	8abb      	ldrh	r3, [r7, #20]
 800127a:	4413      	add	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	8a3b      	ldrh	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b298      	uxth	r0, r3
 8001288:	88ba      	ldrh	r2, [r7, #4]
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	4413      	add	r3, r2
 800128e:	b299      	uxth	r1, r3
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	8a3b      	ldrh	r3, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	b29c      	uxth	r4, r3
 8001298:	88ba      	ldrh	r2, [r7, #4]
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	4413      	add	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	4622      	mov	r2, r4
 80012a8:	f7ff fd1b 	bl	8000ce2 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	8a3b      	ldrh	r3, [r7, #16]
 80012b0:	4413      	add	r3, r2
 80012b2:	b298      	uxth	r0, r3
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b299      	uxth	r1, r3
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	8a3b      	ldrh	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29c      	uxth	r4, r3
 80012c4:	88ba      	ldrh	r2, [r7, #4]
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	4622      	mov	r2, r4
 80012d4:	f7ff fd05 	bl	8000ce2 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	4413      	add	r3, r2
 80012de:	b298      	uxth	r0, r3
 80012e0:	88ba      	ldrh	r2, [r7, #4]
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	4413      	add	r3, r2
 80012e6:	b299      	uxth	r1, r3
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	b29c      	uxth	r4, r3
 80012f0:	88ba      	ldrh	r2, [r7, #4]
 80012f2:	8a3b      	ldrh	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	4622      	mov	r2, r4
 8001300:	f7ff fcef 	bl	8000ce2 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	4413      	add	r3, r2
 800130a:	b298      	uxth	r0, r3
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	8a3b      	ldrh	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b299      	uxth	r1, r3
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29c      	uxth	r4, r3
 800131c:	88ba      	ldrh	r2, [r7, #4]
 800131e:	8a3b      	ldrh	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	4622      	mov	r2, r4
 800132c:	f7ff fcd9 	bl	8000ce2 <SSD1306_DrawLine>
    while (x < y) {
 8001330:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001338:	429a      	cmp	r2, r3
 800133a:	f6ff af7f 	blt.w	800123c <SSD1306_DrawFilledCircle+0xaa>
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <OLED_Init>:

#define SSD1306_DEACTIVATE_SCROLL   0x2E // Stop scroll
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7

uint8_t OLED_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	OLED_Prepare_Interface();
 800134c:	f7ff fb6e 	bl	8000a2c <OLED_Prepare_Interface>
	OLED_WRITECMD(0xAE); //display off
 8001350:	20ae      	movs	r0, #174	; 0xae
 8001352:	f7ff faf9 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //Set Memory Addressing Mode
 8001356:	2020      	movs	r0, #32
 8001358:	f7ff faf6 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800135c:	2010      	movs	r0, #16
 800135e:	f7ff faf3 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001362:	20b0      	movs	r0, #176	; 0xb0
 8001364:	f7ff faf0 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xC8); //Set COM Output Scan Direction
 8001368:	20c8      	movs	r0, #200	; 0xc8
 800136a:	f7ff faed 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //---set low column address
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff faea 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10); //---set high column address
 8001374:	2010      	movs	r0, #16
 8001376:	f7ff fae7 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x40); //--set start line address
 800137a:	2040      	movs	r0, #64	; 0x40
 800137c:	f7ff fae4 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x81); //--set contrast control register
 8001380:	2081      	movs	r0, #129	; 0x81
 8001382:	f7ff fae1 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xFF);
 8001386:	20ff      	movs	r0, #255	; 0xff
 8001388:	f7ff fade 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA1); //--set segment re-map 0 to 127
 800138c:	20a1      	movs	r0, #161	; 0xa1
 800138e:	f7ff fadb 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA6); //--set normal display
 8001392:	20a6      	movs	r0, #166	; 0xa6
 8001394:	f7ff fad8 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA8); //--set multiplex ratio(1 to 64)
 8001398:	20a8      	movs	r0, #168	; 0xa8
 800139a:	f7ff fad5 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x3F); //1/64 duty
 800139e:	203f      	movs	r0, #63	; 0x3f
 80013a0:	f7ff fad2 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013a4:	20a4      	movs	r0, #164	; 0xa4
 80013a6:	f7ff facf 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD3); //-set display offset
 80013aa:	20d3      	movs	r0, #211	; 0xd3
 80013ac:	f7ff facc 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00); //-not offset
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fac9 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD5); //--set display clock divide ratio/oscillator frequency
 80013b6:	20d5      	movs	r0, #213	; 0xd5
 80013b8:	f7ff fac6 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xF0); //--set divide ratio
 80013bc:	20f0      	movs	r0, #240	; 0xf0
 80013be:	f7ff fac3 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xD9); //--set pre-charge period
 80013c2:	20d9      	movs	r0, #217	; 0xd9
 80013c4:	f7ff fac0 	bl	8000948 <sh1106_SPI_Write>
		OLED_WRITECMD(0x11); //--set pre-charge period
 80013c8:	2011      	movs	r0, #17
 80013ca:	f7ff fabd 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x22); //
 80013ce:	2022      	movs	r0, #34	; 0x22
 80013d0:	f7ff faba 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xDA); //--set com pins hardware configuration
 80013d4:	20da      	movs	r0, #218	; 0xda
 80013d6:	f7ff fab7 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x12);
 80013da:	2012      	movs	r0, #18
 80013dc:	f7ff fab4 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xDB); //--set vcomh
 80013e0:	20db      	movs	r0, #219	; 0xdb
 80013e2:	f7ff fab1 	bl	8000948 <sh1106_SPI_Write>
		OLED_WRITECMD(0x35); //--set vcomh
 80013e6:	2035      	movs	r0, #53	; 0x35
 80013e8:	f7ff faae 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x20); //0x20,0.77xVcc
 80013ec:	2020      	movs	r0, #32
 80013ee:	f7ff faab 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x8D); //--set DC-DC enablev
 80013f2:	208d      	movs	r0, #141	; 0x8d
 80013f4:	f7ff faa8 	bl	8000948 <sh1106_SPI_Write>
//		OLED_WRITECMD(0xAD); //--set DC-DC enable
//		OLED_WRITECMD(0x8B); //--set DC-DC enable
	OLED_WRITECMD(0x14); //
 80013f8:	2014      	movs	r0, #20
 80013fa:	f7ff faa5 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0xAF); //--turn on SSD1306 panel
 80013fe:	20af      	movs	r0, #175	; 0xaf
 8001400:	f7ff faa2 	bl	8000948 <sh1106_SPI_Write>

	/*initialised*/
	OLED_DISPLAY.Initialised=1;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <OLED_Init+0xd0>)
 8001406:	2201      	movs	r2, #1
 8001408:	705a      	strb	r2, [r3, #1]
	/*normal colour*/
	OLED_DISPLAY.Inverted=0;
 800140a:	4b03      	ldr	r3, [pc, #12]	; (8001418 <OLED_Init+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	/* Return OK */
	return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001e0 	.word	0x200001e0

0800141c <SSD1306_ToggleInvert>:
//
// GRAM
//
/////////////////////////////////////////////////////////////////////////

void SSD1306_ToggleInvert(void) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
	uint16_t i;
	/* Toggle invert */
	OLED_DISPLAY.Inverted = !OLED_DISPLAY.Inverted;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <SSD1306_ToggleInvert+0x4c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <SSD1306_ToggleInvert+0x4c>)
 8001434:	701a      	strb	r2, [r3, #0]
	/* Do memory toggle */
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	e00a      	b.n	8001452 <SSD1306_ToggleInvert+0x36>
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <SSD1306_ToggleInvert+0x50>)
 8001440:	5cd2      	ldrb	r2, [r2, r3]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	43d2      	mvns	r2, r2
 8001446:	b2d1      	uxtb	r1, r2
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <SSD1306_ToggleInvert+0x50>)
 800144a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	3301      	adds	r3, #1
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001458:	d3f0      	bcc.n	800143c <SSD1306_ToggleInvert+0x20>
	}
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	200001e0 	.word	0x200001e0
 800146c:	200001e4 	.word	0x200001e4

08001470 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
 800147a:	460b      	mov	r3, r1
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	70fb      	strb	r3, [r7, #3]
	if (
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b7f      	cmp	r3, #127	; 0x7f
 8001486:	d848      	bhi.n	800151a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	2b3f      	cmp	r3, #63	; 0x3f
 800148c:	d845      	bhi.n	800151a <SSD1306_DrawPixel+0xaa>
	) {
		/* Error */
		return;
	}
	/* Check if pixels are inverted */
	if (OLED_DISPLAY.Inverted) {
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <SSD1306_DrawPixel+0xb8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	70fb      	strb	r3, [r7, #3]
	}
	/* Set colour */
	if (color == SSD1306_COLOR_WHITE) {
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d11a      	bne.n	80014e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	b298      	uxth	r0, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	01db      	lsls	r3, r3, #7
 80014b6:	4413      	add	r3, r2
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <SSD1306_DrawPixel+0xbc>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b259      	sxtb	r1, r3
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	4603      	mov	r3, r0
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	4413      	add	r3, r2
 80014d8:	b2c9      	uxtb	r1, r1
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <SSD1306_DrawPixel+0xbc>)
 80014dc:	54d1      	strb	r1, [r2, r3]
 80014de:	e01d      	b.n	800151c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	b298      	uxth	r0, r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4413      	add	r3, r2
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <SSD1306_DrawPixel+0xbc>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	b25b      	sxtb	r3, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4013      	ands	r3, r2
 8001508:	b259      	sxtb	r1, r3
 800150a:	88fa      	ldrh	r2, [r7, #6]
 800150c:	4603      	mov	r3, r0
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	4413      	add	r3, r2
 8001512:	b2c9      	uxtb	r1, r1
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <SSD1306_DrawPixel+0xbc>)
 8001516:	54d1      	strb	r1, [r2, r3]
 8001518:	e000      	b.n	800151c <SSD1306_DrawPixel+0xac>
		return;
 800151a:	bf00      	nop
	}
}
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200001e0 	.word	0x200001e0
 800152c:	200001e4 	.word	0x200001e4

08001530 <OLED_UpdateScreen>:
#elif defined(USE_DMA)
volatile uint8_t dmaCounter = 0;

extern SPI_HandleTypeDef hspi2;

void OLED_UpdateScreen(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	if (dmaCounter == -1) {
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <OLED_UpdateScreen+0x3c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
		dmaCounter = 0;
	}
	OLED_WRITECMD(0xB0 + dmaCounter);
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <OLED_UpdateScreen+0x3c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3b50      	subs	r3, #80	; 0x50
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fa00 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x00);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff f9fd 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITECMD(0x10);
 800154e:	2010      	movs	r0, #16
 8001550:	f7ff f9fa 	bl	8000948 <sh1106_SPI_Write>
	OLED_WRITEDATA_DMA(&SSD1306_Buffer[SSD1306_WIDTH * dmaCounter], SSD1306_WIDTH);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <OLED_UpdateScreen+0x3c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <OLED_UpdateScreen+0x40>)
 800155e:	4413      	add	r3, r2
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fa1a 	bl	800099c <sh1106_SPI_WriteMulti_DMA>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200005e4 	.word	0x200005e4
 8001570:	200001e4 	.word	0x200001e4

08001574 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    // Trigger the next DMA transferig
	dmaCounter ++;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_I2C_MemTxCpltCallback+0x34>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001588:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8) {
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_I2C_MemTxCpltCallback+0x34>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b07      	cmp	r3, #7
 8001592:	d802      	bhi.n	800159a <HAL_I2C_MemTxCpltCallback+0x26>
		OLED_UpdateScreen();
 8001594:	f7ff ffcc 	bl	8001530 <OLED_UpdateScreen>
	}else
		dmaCounter = -1;
}
 8001598:	e002      	b.n	80015a0 <HAL_I2C_MemTxCpltCallback+0x2c>
		dmaCounter = -1;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_I2C_MemTxCpltCallback+0x34>)
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	701a      	strb	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200005e4 	.word	0x200005e4

080015ac <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    // Trigger the next DMA transferig
	dmaCounter ++;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_SPI_TxCpltCallback+0x38>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_SPI_TxCpltCallback+0x38>)
 80015c0:	701a      	strb	r2, [r3, #0]
	if (dmaCounter < 8) {
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_SPI_TxCpltCallback+0x38>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d802      	bhi.n	80015d2 <HAL_SPI_TxCpltCallback+0x26>
		OLED_UpdateScreen();
 80015cc:	f7ff ffb0 	bl	8001530 <OLED_UpdateScreen>
	}else{
		dmaCounter=-1;
		testowy();
	}
}
 80015d0:	e004      	b.n	80015dc <HAL_SPI_TxCpltCallback+0x30>
		dmaCounter=-1;
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_SPI_TxCpltCallback+0x38>)
 80015d4:	22ff      	movs	r2, #255	; 0xff
 80015d6:	701a      	strb	r2, [r3, #0]
		testowy();
 80015d8:	f7ff fa1c 	bl	8000a14 <testowy>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200005e4 	.word	0x200005e4

080015e8 <SSD1306_Fill>:
#endif


void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	if (OLED_DISPLAY.Inverted) {
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <SSD1306_Fill+0x40>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <SSD1306_Fill+0x20>
		color = (SSD1306_COLOR_t)!color;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	71fb      	strb	r3, [r7, #7]
	}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <SSD1306_Fill+0x2a>
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <SSD1306_Fill+0x2c>
 8001612:	23ff      	movs	r3, #255	; 0xff
 8001614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001618:	4619      	mov	r1, r3
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <SSD1306_Fill+0x44>)
 800161c:	f004 fa64 	bl	8005ae8 <memset>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001e0 	.word	0x200001e0
 800162c:	200001e4 	.word	0x200001e4

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166e:	2007      	movs	r0, #7
 8001670:	f000 fb52 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a33      	ldr	r2, [pc, #204]	; (800176c <HAL_I2C_MspInit+0xec>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d160      	bne.n	8001764 <HAL_I2C_MspInit+0xe4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4826      	ldr	r0, [pc, #152]	; (8001774 <HAL_I2C_MspInit+0xf4>)
 80016da:	f000 feff 	bl	80024dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_I2C_MspInit+0xf0>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_I2C_MspInit+0xfc>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001718:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 800173a:	f000 fb2f 	bl	8001d9c <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8001744:	f7ff f8fa 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_I2C_MspInit+0xf8>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	201f      	movs	r0, #31
 800175a:	f000 fae8 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800175e:	201f      	movs	r0, #31
 8001760:	f000 fb01 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40005400 	.word	0x40005400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400
 8001778:	20000084 	.word	0x20000084
 800177c:	40026028 	.word	0x40026028

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <HAL_SPI_MspInit+0x11c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d177      	bne.n	8001892 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_SPI_MspInit+0x120>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f6:	2308      	movs	r3, #8
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001806:	2305      	movs	r3, #5
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4824      	ldr	r0, [pc, #144]	; (80018a4 <HAL_SPI_MspInit+0x124>)
 8001812:	f000 fe63 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001828:	2305      	movs	r3, #5
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	481d      	ldr	r0, [pc, #116]	; (80018a8 <HAL_SPI_MspInit+0x128>)
 8001834:	f000 fe52 	bl	80024dc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_SPI_MspInit+0x130>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001876:	480d      	ldr	r0, [pc, #52]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 8001878:	f000 fa90 	bl	8001d9c <HAL_DMA_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001882:	f7ff f85b 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800188a:	649a      	str	r2, [r3, #72]	; 0x48
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_SPI_MspInit+0x12c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40003800 	.word	0x40003800
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	2000013c 	.word	0x2000013c
 80018b0:	40026070 	.word	0x40026070

080018b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d12b      	bne.n	800192e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_UART_MspInit+0x88>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_UART_MspInit+0x88>)
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_UART_MspInit+0x88>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_UART_MspInit+0x88>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_UART_MspInit+0x88>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_UART_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800190e:	230c      	movs	r3, #12
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191e:	2307      	movs	r3, #7
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_UART_MspInit+0x8c>)
 800192a:	f000 fdd7 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40004400 	.word	0x40004400
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f8ae 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Stream1_IRQHandler+0x10>)
 800199e:	f000 fb25 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000084 	.word	0x20000084

080019ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA1_Stream4_IRQHandler+0x10>)
 80019b2:	f000 fb1b 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000013c 	.word	0x2000013c

080019c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <I2C1_EV_IRQHandler+0x10>)
 80019c6:	f001 f86b 	bl	8002aa0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000030 	.word	0x20000030

080019d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a14:	4c0b      	ldr	r4, [pc, #44]	; (8001a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a22:	f7ff ffd7 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f004 f83b 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7fe fd57 	bl	80004dc <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a3c:	08006094 	.word	0x08006094
  ldr r2, =_sbss
 8001a40:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a44:	200005ec 	.word	0x200005ec

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <HAL_Init+0x40>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_Init+0x40>)
 8001a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_Init+0x40>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f94f 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f808 	bl	8001a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a80:	f7ff fdd6 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x54>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f967 	bl	8001d82 <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f000 f92f 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x5c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000010 	.word	0x20000010
 8001aec:	2000000c 	.word	0x2000000c

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000010 	.word	0x20000010
 8001b14:	200005e8 	.word	0x200005e8

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	200005e8 	.word	0x200005e8

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000010 	.word	0x20000010

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff29 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff3e 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff31 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa2 	bl	8001cd4 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff feb6 	bl	8001b18 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e099      	b.n	8001eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd8:	e00f      	b.n	8001dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dda:	f7ff fe9d 	bl	8001b18 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d908      	bls.n	8001dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e078      	b.n	8001eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e8      	bne.n	8001dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_DMA_Init+0x158>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d107      	bne.n	8001e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f023 0307 	bic.w	r3, r3, #7
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d117      	bne.n	8001ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fa9f 	bl	80023e4 <DMA_CheckFifoParam>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e016      	b.n	8001eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa56 	bl	8002378 <DMA_CalcBaseAndBitshift>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	223f      	movs	r2, #63	; 0x3f
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	f010803f 	.word	0xf010803f

08001ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_DMA_Start_IT+0x26>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e040      	b.n	8001fa0 <HAL_DMA_Start_IT+0xa8>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d12f      	bne.n	8001f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9e8 	bl	800231c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	223f      	movs	r2, #63	; 0x3f
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0216 	orr.w	r2, r2, #22
 8001f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0208 	orr.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e005      	b.n	8001f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d004      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00c      	b.n	8001fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff8:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <HAL_DMA_IRQHandler+0x248>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a8e      	ldr	r2, [pc, #568]	; (8002238 <HAL_DMA_IRQHandler+0x24c>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2208      	movs	r2, #8
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2208      	movs	r2, #8
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2201      	movs	r2, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2204      	movs	r2, #4
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2204      	movs	r2, #4
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2210      	movs	r2, #16
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d043      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03c      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2210      	movs	r2, #16
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d018      	beq.n	800212e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e01f      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e016      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0208 	bic.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2220      	movs	r2, #32
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 808f 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8087 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2220      	movs	r2, #32
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b05      	cmp	r3, #5
 8002194:	d136      	bne.n	8002204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0216 	bic.w	r2, r2, #22
 80021a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x1da>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0208 	bic.w	r2, r2, #8
 80021d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	223f      	movs	r2, #63	; 0x3f
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d07e      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
        }
        return;
 8002202:	e079      	b.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01d      	beq.n	800224e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2b00      	cmp	r3, #0
 8002226:	d031      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e02c      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008
 8002238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d023      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e01e      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0210 	bic.w	r2, r2, #16
 800226a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	2b00      	cmp	r3, #0
 8002292:	d032      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2205      	movs	r2, #5
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d307      	bcc.n	80022d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f2      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x2cc>
 80022d2:	e000      	b.n	80022d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e000      	b.n	80022fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f8:	bf00      	nop
    }
  }
}
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230e:	b2db      	uxtb	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002338:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d108      	bne.n	800235c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800235a:	e007      	b.n	800236c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b10      	subs	r3, #16
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <DMA_CalcBaseAndBitshift+0x64>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d909      	bls.n	80023ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58
 80023b8:	e007      	b.n	80023ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	aaaaaaab 	.word	0xaaaaaaab
 80023e0:	0800607c 	.word	0x0800607c

080023e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11f      	bne.n	800243e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d856      	bhi.n	80024b2 <DMA_CheckFifoParam+0xce>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <DMA_CheckFifoParam+0x28>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800241d 	.word	0x0800241d
 8002410:	0800242f 	.word	0x0800242f
 8002414:	0800241d 	.word	0x0800241d
 8002418:	080024b3 	.word	0x080024b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d046      	beq.n	80024b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e043      	b.n	80024b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002436:	d140      	bne.n	80024ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e03d      	b.n	80024ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002446:	d121      	bne.n	800248c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d837      	bhi.n	80024be <DMA_CheckFifoParam+0xda>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <DMA_CheckFifoParam+0x70>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002465 	.word	0x08002465
 8002458:	0800246b 	.word	0x0800246b
 800245c:	08002465 	.word	0x08002465
 8002460:	0800247d 	.word	0x0800247d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e030      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d025      	beq.n	80024c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247a:	e022      	b.n	80024c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002484:	d11f      	bne.n	80024c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800248a:	e01c      	b.n	80024c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d903      	bls.n	800249a <DMA_CheckFifoParam+0xb6>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d003      	beq.n	80024a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002498:	e018      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      break;
 800249e:	e015      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e00b      	b.n	80024ca <DMA_CheckFifoParam+0xe6>
      break;
 80024b2:	bf00      	nop
 80024b4:	e00a      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e008      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e006      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e004      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;   
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
    }
  } 
  
  return status; 
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e159      	b.n	80027ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8148 	bne.w	80027a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a2 	beq.w	80027a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a49      	ldr	r2, [pc, #292]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x202>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a48      	ldr	r2, [pc, #288]	; (80027d0 <HAL_GPIO_Init+0x2f4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x1fe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a47      	ldr	r2, [pc, #284]	; (80027d4 <HAL_GPIO_Init+0x2f8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <HAL_GPIO_Init+0x2fc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x1f6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a45      	ldr	r2, [pc, #276]	; (80027dc <HAL_GPIO_Init+0x300>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x1f2>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <HAL_GPIO_Init+0x304>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f aea2 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e12b      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe ff1e 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800287c:	f002 f93c 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a81      	ldr	r2, [pc, #516]	; (8002a8c <HAL_I2C_Init+0x274>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d807      	bhi.n	800289c <HAL_I2C_Init+0x84>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a80      	ldr	r2, [pc, #512]	; (8002a90 <HAL_I2C_Init+0x278>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e006      	b.n	80028aa <HAL_I2C_Init+0x92>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a7d      	ldr	r2, [pc, #500]	; (8002a94 <HAL_I2C_Init+0x27c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0e7      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a78      	ldr	r2, [pc, #480]	; (8002a98 <HAL_I2C_Init+0x280>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9b      	lsrs	r3, r3, #18
 80028bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_I2C_Init+0x274>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d802      	bhi.n	80028ec <HAL_I2C_Init+0xd4>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	e009      	b.n	8002900 <HAL_I2C_Init+0xe8>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_I2C_Init+0x284>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	3301      	adds	r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	495c      	ldr	r1, [pc, #368]	; (8002a8c <HAL_I2C_Init+0x274>)
 800291c:	428b      	cmp	r3, r1
 800291e:	d819      	bhi.n	8002954 <HAL_I2C_Init+0x13c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e59      	subs	r1, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb1 f3f3 	udiv	r3, r1, r3
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002934:	400b      	ands	r3, r1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_I2C_Init+0x138>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e59      	subs	r1, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fbb1 f3f3 	udiv	r3, r1, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	e051      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002950:	2304      	movs	r3, #4
 8002952:	e04f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <HAL_I2C_Init+0x168>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e012      	b.n	80029a6 <HAL_I2C_Init+0x18e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x196>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e022      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10e      	bne.n	80029d4 <HAL_I2C_Init+0x1bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e58      	subs	r0, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	440b      	add	r3, r1
 80029c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	6809      	ldr	r1, [r1, #0]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6911      	ldr	r1, [r2, #16]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68d2      	ldr	r2, [r2, #12]
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	000186a0 	.word	0x000186a0
 8002a90:	001e847f 	.word	0x001e847f
 8002a94:	003d08ff 	.word	0x003d08ff
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	10624dd3 	.word	0x10624dd3

08002aa0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d003      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	f040 80c1 	bne.w	8002c5a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_I2C_EV_IRQHandler+0x6e>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002af8:	d003      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x62>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_EV_IRQHandler+0x66>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_I2C_EV_IRQHandler+0x68>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	f000 8132 	beq.w	8002d72 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00c      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x92>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	0a5b      	lsrs	r3, r3, #9
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f001 fb5b 	bl	80041e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fcd2 	bl	80034d4 <I2C_Master_SB>
 8002b30:	e092      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fd48 	bl	80035e0 <I2C_Master_ADD10>
 8002b50:	e082      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	0a5b      	lsrs	r3, r3, #9
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fd62 	bl	8003634 <I2C_Master_ADDR>
 8002b70:	e072      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	f000 80f3 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	09db      	lsrs	r3, r3, #7
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00f      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f942 	bl	8002e3e <I2C_MasterTransmit_TXE>
 8002bba:	e04d      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80d6 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	0a5b      	lsrs	r3, r3, #9
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80cf 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b21      	cmp	r3, #33	; 0x21
 8002bdc:	d103      	bne.n	8002be6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9c9 	bl	8002f76 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be4:	e0c7      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	f040 80c4 	bne.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa37 	bl	8003062 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bf4:	e0bf      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c04:	f000 80b7 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00f      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x194>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x194>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 faac 	bl	800318a <I2C_MasterReceive_RXNE>
 8002c32:	e011      	b.n	8002c58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 809a 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	0a5b      	lsrs	r3, r3, #9
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8093 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fb55 	bl	8003300 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c56:	e08e      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c58:	e08d      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e007      	b.n	8002c7c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x20e>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 ff13 	bl	8003ad2 <I2C_Slave_ADDR>
 8002cac:	e066      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x22e>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 ff4e 	bl	8003b68 <I2C_Slave_STOPF>
 8002ccc:	e056      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cce:	7bbb      	ldrb	r3, [r7, #14]
 8002cd0:	2b21      	cmp	r3, #33	; 0x21
 8002cd2:	d002      	beq.n	8002cda <HAL_I2C_EV_IRQHandler+0x23a>
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
 8002cd6:	2b29      	cmp	r3, #41	; 0x29
 8002cd8:	d125      	bne.n	8002d26 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	09db      	lsrs	r3, r3, #7
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00f      	beq.n	8002d06 <HAL_I2C_EV_IRQHandler+0x266>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	0a9b      	lsrs	r3, r3, #10
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_I2C_EV_IRQHandler+0x266>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fe29 	bl	8003956 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d04:	e039      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d033      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2da>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0a5b      	lsrs	r3, r3, #9
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d02d      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fe56 	bl	80039d0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d24:	e029      	b.n	8002d7a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00f      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	0a9b      	lsrs	r3, r3, #10
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fe61 	bl	8003a12 <I2C_SlaveReceive_RXNE>
 8002d50:	e014      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	0a5b      	lsrs	r3, r3, #9
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fe8f 	bl	8003a8e <I2C_SlaveReceive_BTF>
 8002d70:	e004      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d7a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
 8002dde:	4613      	mov	r3, r2
 8002de0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d150      	bne.n	8002f06 <I2C_MasterTransmit_TXE+0xc8>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b21      	cmp	r3, #33	; 0x21
 8002e68:	d14d      	bne.n	8002f06 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d01d      	beq.n	8002eac <I2C_MasterTransmit_TXE+0x6e>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d01a      	beq.n	8002eac <I2C_MasterTransmit_TXE+0x6e>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e7c:	d016      	beq.n	8002eac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2211      	movs	r2, #17
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff6c 	bl	8002d82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eaa:	e060      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d107      	bne.n	8002ef6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fb40 	bl	8001574 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ef4:	e03b      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff3f 	bl	8002d82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f04:	e033      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b21      	cmp	r3, #33	; 0x21
 8002f0a:	d005      	beq.n	8002f18 <I2C_MasterTransmit_TXE+0xda>
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d12d      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b22      	cmp	r3, #34	; 0x22
 8002f16:	d12a      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f30:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f32:	e01c      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d103      	bne.n	8002f48 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f88e 	bl	8003062 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f46:	e012      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f6c:	e7ff      	b.n	8002f6e <I2C_MasterTransmit_TXE+0x130>
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b21      	cmp	r3, #33	; 0x21
 8002f8e:	d164      	bne.n	800305a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fbe:	e04c      	b.n	800305a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d01d      	beq.n	8003002 <I2C_MasterTransmit_BTF+0x8c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d01a      	beq.n	8003002 <I2C_MasterTransmit_BTF+0x8c>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd2:	d016      	beq.n	8003002 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fe2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2211      	movs	r2, #17
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fec1 	bl	8002d82 <HAL_I2C_MasterTxCpltCallback>
}
 8003000:	e02b      	b.n	800305a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003010:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003020:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d107      	bne.n	800304c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fe fa95 	bl	8001574 <HAL_I2C_MemTxCpltCallback>
}
 800304a:	e006      	b.n	800305a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fe94 	bl	8002d82 <HAL_I2C_MasterTxCpltCallback>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11d      	bne.n	80030b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10b      	bne.n	800309a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	b2da      	uxtb	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	1c9a      	adds	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003098:	e073      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	b29b      	uxth	r3, r3
 80030a0:	121b      	asrs	r3, r3, #8
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030b4:	e065      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10b      	bne.n	80030d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030d4:	e055      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d151      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b22      	cmp	r3, #34	; 0x22
 80030e2:	d10d      	bne.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030fe:	e040      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b21      	cmp	r3, #33	; 0x21
 800310e:	d112      	bne.n	8003136 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003134:	e025      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d120      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b21      	cmp	r3, #33	; 0x21
 8003144:	d11d      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003154:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003164:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe f9f9 	bl	8001574 <HAL_I2C_MemTxCpltCallback>
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b22      	cmp	r3, #34	; 0x22
 800319c:	f040 80ac 	bne.w	80032f8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d921      	bls.n	80031f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f040 808c 	bne.w	80032f8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031f0:	e082      	b.n	80032f8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d075      	beq.n	80032e6 <I2C_MasterReceive_RXNE+0x15c>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d002      	beq.n	8003206 <I2C_MasterReceive_RXNE+0x7c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d16f      	bne.n	80032e6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 ffb8 	bl	800417c <I2C_WaitOnSTOPRequestThroughIT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d142      	bne.n	8003298 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003220:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003230:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d10a      	bne.n	8003282 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fdc1 	bl	8002e02 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003280:	e03a      	b.n	80032f8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2212      	movs	r2, #18
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fd80 	bl	8002d96 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003296:	e02f      	b.n	80032f8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fd99 	bl	8002e16 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032e4:	e008      	b.n	80032f8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	605a      	str	r2, [r3, #4]
}
 80032f6:	e7ff      	b.n	80032f8 <I2C_MasterReceive_RXNE+0x16e>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800334e:	e0bd      	b.n	80034cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d129      	bne.n	80033ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d00a      	beq.n	8003386 <I2C_MasterReceive_BTF+0x86>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d007      	beq.n	8003386 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033ac:	e08e      	b.n	80034cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d176      	bne.n	80034a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d002      	beq.n	80033c4 <I2C_MasterReceive_BTF+0xc4>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d108      	bne.n	80033d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e019      	b.n	800340a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d002      	beq.n	80033e2 <I2C_MasterReceive_BTF+0xe2>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d108      	bne.n	80033f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e00a      	b.n	800340a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d007      	beq.n	800340a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003408:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003464:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10a      	bne.n	8003490 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fcba 	bl	8002e02 <HAL_I2C_MemRxCpltCallback>
}
 800348e:	e01d      	b.n	80034cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2212      	movs	r2, #18
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fc79 	bl	8002d96 <HAL_I2C_MasterRxCpltCallback>
}
 80034a4:	e012      	b.n	80034cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d117      	bne.n	8003518 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003500:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003502:	e067      	b.n	80035d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	b2da      	uxtb	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	611a      	str	r2, [r3, #16]
}
 8003516:	e05d      	b.n	80035d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003520:	d133      	bne.n	800358a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b21      	cmp	r3, #33	; 0x21
 800352c:	d109      	bne.n	8003542 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800353e:	611a      	str	r2, [r3, #16]
 8003540:	e008      	b.n	8003554 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <I2C_Master_SB+0x92>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d032      	beq.n	80035d4 <I2C_Master_SB+0x100>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02d      	beq.n	80035d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	605a      	str	r2, [r3, #4]
}
 8003588:	e024      	b.n	80035d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	b29b      	uxth	r3, r3
 8003598:	11db      	asrs	r3, r3, #7
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 0306 	and.w	r3, r3, #6
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f063 030f 	orn	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
}
 80035ae:	e011      	b.n	80035d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	b29b      	uxth	r3, r3
 80035be:	11db      	asrs	r3, r3, #7
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0306 	and.w	r3, r3, #6
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f063 030e 	orn	r3, r3, #14
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	611a      	str	r2, [r3, #16]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <I2C_Master_ADD10+0x26>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <I2C_Master_ADD10+0x48>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003634:	b480      	push	{r7}
 8003636:	b091      	sub	sp, #68	; 0x44
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b22      	cmp	r3, #34	; 0x22
 800365c:	f040 8169 	bne.w	8003932 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <I2C_Master_ADDR+0x54>
 8003668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d10b      	bne.n	8003688 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003670:	2300      	movs	r3, #0
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	e160      	b.n	800394a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11d      	bne.n	80036cc <I2C_Master_ADDR+0x98>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003698:	d118      	bne.n	80036cc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036be:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50
 80036ca:	e13e      	b.n	800394a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d113      	bne.n	80036fe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	2300      	movs	r3, #0
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e115      	b.n	800392a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 808a 	bne.w	800381e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003710:	d137      	bne.n	8003782 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003730:	d113      	bne.n	800375a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	e0e7      	b.n	800392a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e0d3      	b.n	800392a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b08      	cmp	r3, #8
 8003786:	d02e      	beq.n	80037e6 <I2C_Master_ADDR+0x1b2>
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2b20      	cmp	r3, #32
 800378c:	d02b      	beq.n	80037e6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	2b12      	cmp	r3, #18
 8003792:	d102      	bne.n	800379a <I2C_Master_ADDR+0x166>
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b01      	cmp	r3, #1
 8003798:	d125      	bne.n	80037e6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b04      	cmp	r3, #4
 800379e:	d00e      	beq.n	80037be <I2C_Master_ADDR+0x18a>
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d00b      	beq.n	80037be <I2C_Master_ADDR+0x18a>
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d008      	beq.n	80037be <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e007      	b.n	80037ce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	e0a1      	b.n	800392a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e085      	b.n	800392a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d14d      	bne.n	80038c4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	2b04      	cmp	r3, #4
 800382c:	d016      	beq.n	800385c <I2C_Master_ADDR+0x228>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	2b02      	cmp	r3, #2
 8003832:	d013      	beq.n	800385c <I2C_Master_ADDR+0x228>
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	2b10      	cmp	r3, #16
 8003838:	d010      	beq.n	800385c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e007      	b.n	800386c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800386a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d117      	bne.n	80038ac <I2C_Master_ADDR+0x278>
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003882:	d00b      	beq.n	800389c <I2C_Master_ADDR+0x268>
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b01      	cmp	r3, #1
 8003888:	d008      	beq.n	800389c <I2C_Master_ADDR+0x268>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b08      	cmp	r3, #8
 800388e:	d005      	beq.n	800389c <I2C_Master_ADDR+0x268>
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2b10      	cmp	r3, #16
 8003894:	d002      	beq.n	800389c <I2C_Master_ADDR+0x268>
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b20      	cmp	r3, #32
 800389a:	d107      	bne.n	80038ac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e032      	b.n	800392a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d117      	bne.n	8003914 <I2C_Master_ADDR+0x2e0>
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ea:	d00b      	beq.n	8003904 <I2C_Master_ADDR+0x2d0>
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d008      	beq.n	8003904 <I2C_Master_ADDR+0x2d0>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d005      	beq.n	8003904 <I2C_Master_ADDR+0x2d0>
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d002      	beq.n	8003904 <I2C_Master_ADDR+0x2d0>
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b20      	cmp	r3, #32
 8003902:	d107      	bne.n	8003914 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003912:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003930:	e00b      	b.n	800394a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	e7ff      	b.n	800394a <I2C_Master_ADDR+0x316>
 800394a:	bf00      	nop
 800394c:	3744      	adds	r7, #68	; 0x44
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02b      	beq.n	80039c8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d114      	bne.n	80039c8 <I2C_SlaveTransmit_TXE+0x72>
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	2b29      	cmp	r3, #41	; 0x29
 80039a2:	d111      	bne.n	80039c8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2221      	movs	r2, #33	; 0x21
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2228      	movs	r2, #40	; 0x28
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff f9f1 	bl	8002daa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02c      	beq.n	8003a86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d114      	bne.n	8003a86 <I2C_SlaveReceive_RXNE+0x74>
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a60:	d111      	bne.n	8003a86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2222      	movs	r2, #34	; 0x22
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2228      	movs	r2, #40	; 0x28
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f99c 	bl	8002dbe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aec:	2b28      	cmp	r3, #40	; 0x28
 8003aee:	d127      	bne.n	8003b40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	09db      	lsrs	r3, r3, #7
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	81bb      	strh	r3, [r7, #12]
 8003b22:	e002      	b.n	8003b2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b32:	89ba      	ldrh	r2, [r7, #12]
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff f94a 	bl	8002dd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b3e:	e00e      	b.n	8003b5e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	d172      	bne.n	8003cac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b22      	cmp	r3, #34	; 0x22
 8003bca:	d002      	beq.n	8003bd2 <I2C_Slave_STOPF+0x6a>
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd0:	d135      	bne.n	8003c3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0204 	orr.w	r2, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fb78 	bl	8002300 <HAL_DMA_GetState>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d049      	beq.n	8003caa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	4a69      	ldr	r2, [pc, #420]	; (8003dc0 <I2C_Slave_STOPF+0x258>)
 8003c1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe f9c0 	bl	8001fa8 <HAL_DMA_Abort_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03d      	beq.n	8003caa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c3c:	e035      	b.n	8003caa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0204 	orr.w	r2, r3, #4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fb42 	bl	8002300 <HAL_DMA_GetState>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d014      	beq.n	8003cac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	4a4e      	ldr	r2, [pc, #312]	; (8003dc0 <I2C_Slave_STOPF+0x258>)
 8003c88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f98a 	bl	8001fa8 <HAL_DMA_Abort_IT>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
 8003ca8:	e000      	b.n	8003cac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003caa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03e      	beq.n	8003d34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d112      	bne.n	8003cea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d112      	bne.n	8003d1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f843 	bl	8003dc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d42:	e039      	b.n	8003db8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d109      	bne.n	8003d5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2228      	movs	r2, #40	; 0x28
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff f830 	bl	8002dbe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b28      	cmp	r3, #40	; 0x28
 8003d68:	d111      	bne.n	8003d8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <I2C_Slave_STOPF+0x25c>)
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff f831 	bl	8002dee <HAL_I2C_ListenCpltCallback>
}
 8003d8c:	e014      	b.n	8003db8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	2b22      	cmp	r3, #34	; 0x22
 8003d94:	d002      	beq.n	8003d9c <I2C_Slave_STOPF+0x234>
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b22      	cmp	r3, #34	; 0x22
 8003d9a:	d10d      	bne.n	8003db8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff f803 	bl	8002dbe <HAL_I2C_SlaveRxCpltCallback>
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0800402d 	.word	0x0800402d
 8003dc4:	ffff0000 	.word	0xffff0000

08003dc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003de0:	7bbb      	ldrb	r3, [r7, #14]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d002      	beq.n	8003dec <I2C_ITError+0x24>
 8003de6:	7bbb      	ldrb	r3, [r7, #14]
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d10a      	bne.n	8003e02 <I2C_ITError+0x3a>
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b22      	cmp	r3, #34	; 0x22
 8003df0:	d107      	bne.n	8003e02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e08:	2b28      	cmp	r3, #40	; 0x28
 8003e0a:	d107      	bne.n	8003e1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2228      	movs	r2, #40	; 0x28
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e1a:	e015      	b.n	8003e48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d00a      	beq.n	8003e42 <I2C_ITError+0x7a>
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b60      	cmp	r3, #96	; 0x60
 8003e30:	d007      	beq.n	8003e42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e56:	d162      	bne.n	8003f1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d020      	beq.n	8003eb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	4a6a      	ldr	r2, [pc, #424]	; (8004024 <I2C_ITError+0x25c>)
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe f890 	bl	8001fa8 <HAL_DMA_Abort_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8089 	beq.w	8003fa2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4798      	blx	r3
 8003eb6:	e074      	b.n	8003fa2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	4a59      	ldr	r2, [pc, #356]	; (8004024 <I2C_ITError+0x25c>)
 8003ebe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe f86f 	bl	8001fa8 <HAL_DMA_Abort_IT>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d068      	beq.n	8003fa2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d10b      	bne.n	8003ef6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4798      	blx	r3
 8003f1c:	e041      	b.n	8003fa2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b60      	cmp	r3, #96	; 0x60
 8003f28:	d125      	bne.n	8003f76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d10b      	bne.n	8003f5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fe ff5b 	bl	8002e2a <HAL_I2C_AbortCpltCallback>
 8003f74:	e015      	b.n	8003fa2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d10b      	bne.n	8003f9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fe ff3a 	bl	8002e16 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10e      	bne.n	8003fd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d113      	bne.n	800401c <I2C_ITError+0x254>
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b28      	cmp	r3, #40	; 0x28
 8003ff8:	d110      	bne.n	800401c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <I2C_ITError+0x260>)
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe fee9 	bl	8002dee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	0800402d 	.word	0x0800402d
 8004028:	ffff0000 	.word	0xffff0000

0800402c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004046:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <I2C_DMAAbort+0x148>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <I2C_DMAAbort+0x14c>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a1a      	lsrs	r2, r3, #8
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00da      	lsls	r2, r3, #3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004072:	e00a      	b.n	800408a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004088:	d0ea      	beq.n	8004060 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2200      	movs	r2, #0
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	2200      	movs	r2, #0
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	2200      	movs	r2, #0
 80040ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	2200      	movs	r2, #0
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d10e      	bne.n	800411a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7fe fe89 	bl	8002e2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004118:	e027      	b.n	800416a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004120:	2b28      	cmp	r3, #40	; 0x28
 8004122:	d117      	bne.n	8004154 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004142:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2228      	movs	r2, #40	; 0x28
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004152:	e007      	b.n	8004164 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004164:	6978      	ldr	r0, [r7, #20]
 8004166:	f7fe fe56 	bl	8002e16 <HAL_I2C_ErrorCallback>
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000008 	.word	0x20000008
 8004178:	14f8b589 	.word	0x14f8b589

0800417c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	08db      	lsrs	r3, r3, #3
 800418e:	4a13      	ldr	r2, [pc, #76]	; (80041dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0a1a      	lsrs	r2, r3, #8
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e008      	b.n	80041cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d0e9      	beq.n	800419e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	20000008 	.word	0x20000008
 80041dc:	14f8b589 	.word	0x14f8b589

080041e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041f0:	d103      	bne.n	80041fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041f8:	e007      	b.n	800420a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004202:	d102      	bne.n	800420a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2208      	movs	r2, #8
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e267      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d075      	beq.n	8004322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b85      	ldr	r3, [pc, #532]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d112      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <HAL_RCC_OscConfig+0x108>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e242      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d106      	bne.n	800428c <HAL_RCC_OscConfig+0x74>
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x98>
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6c      	ldr	r2, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 80042b0:	4b69      	ldr	r3, [pc, #420]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a68      	ldr	r2, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b66      	ldr	r3, [pc, #408]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a65      	ldr	r2, [pc, #404]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fd fc22 	bl	8001b18 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd fc1e 	bl	8001b18 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e207      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b5b      	ldr	r3, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xc0>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd fc0e 	bl	8001b18 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd fc0a 	bl	8001b18 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1f3      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0xe8>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1c7      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4937      	ldr	r1, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e03a      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_OscConfig+0x244>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd fbc3 	bl	8001b18 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004396:	f7fd fbbf 	bl	8001b18 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1a8      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4925      	ldr	r1, [pc, #148]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x244>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fba2 	bl	8001b18 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fd fb9e 	bl	8001b18 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e187      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d036      	beq.n	8004470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fd fb82 	bl	8001b18 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004418:	f7fd fb7e 	bl	8001b18 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e167      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x200>
 8004436:	e01b      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443e:	f7fd fb6b 	bl	8001b18 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e00e      	b.n	8004464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004446:	f7fd fb67 	bl	8001b18 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d907      	bls.n	8004464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e150      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004458:	40023800 	.word	0x40023800
 800445c:	42470000 	.word	0x42470000
 8004460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	4b88      	ldr	r3, [pc, #544]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ea      	bne.n	8004446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8097 	beq.w	80045ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	4b7d      	ldr	r3, [pc, #500]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a7c      	ldr	r2, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	4b77      	ldr	r3, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d118      	bne.n	80044ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ba:	4b74      	ldr	r3, [pc, #464]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a73      	ldr	r2, [pc, #460]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c6:	f7fd fb27 	bl	8001b18 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ce:	f7fd fb23 	bl	8001b18 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e10c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x2ea>
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b05      	cmp	r3, #5
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x30c>
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5e      	ldr	r2, [pc, #376]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	4b5c      	ldr	r3, [pc, #368]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004524:	4b58      	ldr	r3, [pc, #352]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a57      	ldr	r2, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	4b55      	ldr	r3, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a54      	ldr	r2, [pc, #336]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 0304 	bic.w	r3, r3, #4
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd fae8 	bl	8001b18 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fd fae4 	bl	8001b18 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0cb      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	4b49      	ldr	r3, [pc, #292]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <HAL_RCC_OscConfig+0x334>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fd fad2 	bl	8001b18 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd face 	bl	8001b18 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0b5      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ee      	bne.n	8004578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a1 	beq.w	80046f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d05c      	beq.n	800467c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d141      	bne.n	800464e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd faa2 	bl	8001b18 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fa9e 	bl	8001b18 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e087      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	491b      	ldr	r1, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fd fa77 	bl	8001b18 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462e:	f7fd fa73 	bl	8001b18 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e05c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x416>
 800464c:	e054      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fd fa60 	bl	8001b18 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fd fa5c 	bl	8001b18 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e045      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x444>
 800467a:	e03d      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e038      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004688:	40023800 	.word	0x40023800
 800468c:	40007000 	.word	0x40007000
 8004690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d028      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d121      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d11a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0cc      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90c      	bls.n	8004744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800475c:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004774:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a52      	ldr	r2, [pc, #328]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494d      	ldr	r1, [pc, #308]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d044      	beq.n	8004828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d119      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e067      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4934      	ldr	r1, [pc, #208]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fd f98e 	bl	8001b18 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fd f98a 	bl	8001b18 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e04f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20c      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4916      	ldr	r1, [pc, #88]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488e:	f000 f821 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd f8ee 	bl	8001a90 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08006064 	.word	0x08006064
 80048cc:	20000008 	.word	0x20000008
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b094      	sub	sp, #80	; 0x50
 80048da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	2300      	movs	r3, #0
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	2300      	movs	r3, #0
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ec:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x40>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	f200 80e1 	bhi.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d003      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x3a>
 8004906:	e0db      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800490c:	e0db      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCC_GetSysClockFreq+0x208>)
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004912:	e0d8      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491e:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d063      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	2200      	movs	r2, #0
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	0159      	lsls	r1, r3, #5
 8004954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004958:	0150      	lsls	r0, r2, #5
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4621      	mov	r1, r4
 8004960:	1a51      	subs	r1, r2, r1
 8004962:	6139      	str	r1, [r7, #16]
 8004964:	4629      	mov	r1, r5
 8004966:	eb63 0301 	sbc.w	r3, r3, r1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004978:	4659      	mov	r1, fp
 800497a:	018b      	lsls	r3, r1, #6
 800497c:	4651      	mov	r1, sl
 800497e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004982:	4651      	mov	r1, sl
 8004984:	018a      	lsls	r2, r1, #6
 8004986:	4651      	mov	r1, sl
 8004988:	ebb2 0801 	subs.w	r8, r2, r1
 800498c:	4659      	mov	r1, fp
 800498e:	eb63 0901 	sbc.w	r9, r3, r1
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a6:	4690      	mov	r8, r2
 80049a8:	4699      	mov	r9, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	eb18 0303 	adds.w	r3, r8, r3
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	462b      	mov	r3, r5
 80049b4:	eb49 0303 	adc.w	r3, r9, r3
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049c6:	4629      	mov	r1, r5
 80049c8:	024b      	lsls	r3, r1, #9
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049d0:	4621      	mov	r1, r4
 80049d2:	024a      	lsls	r2, r1, #9
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	2200      	movs	r2, #0
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e4:	f7fb fbf8 	bl	80001d8 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	e058      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	2200      	movs	r2, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	4611      	mov	r1, r2
 80049fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	0159      	lsls	r1, r3, #5
 8004a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1e:	0150      	lsls	r0, r2, #5
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4641      	mov	r1, r8
 8004a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a44:	ebb2 040a 	subs.w	r4, r2, sl
 8004a48:	eb63 050b 	sbc.w	r5, r3, fp
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb45 0303 	adc.w	r3, r5, r3
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	028b      	lsls	r3, r1, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a84:	4621      	mov	r1, r4
 8004a86:	028a      	lsls	r2, r1, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	61fa      	str	r2, [r7, #28]
 8004a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a98:	f7fb fb9e 	bl	80001d8 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3750      	adds	r7, #80	; 0x50
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000008 	.word	0x20000008

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004afc:	f7ff fff0 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0a9b      	lsrs	r3, r3, #10
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	08006074 	.word	0x08006074

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b24:	f7ff ffdc 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0b5b      	lsrs	r3, r3, #13
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	08006074 	.word	0x08006074

08004b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07b      	b.n	8004c52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6a:	d009      	beq.n	8004b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
 8004b72:	e005      	b.n	8004b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc fdf0 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	ea42 0103 	orr.w	r1, r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 0104 	and.w	r1, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0210 	and.w	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b088      	sub	sp, #32
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_SPI_Transmit+0x22>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e126      	b.n	8004eca <HAL_SPI_Transmit+0x270>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c84:	f7fc ff48 	bl	8001b18 <HAL_GetTick>
 8004c88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c9e:	e10b      	b.n	8004eb8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Transmit+0x52>
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cb0:	e102      	b.n	8004eb8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d10f      	bne.n	8004d1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d007      	beq.n	8004d38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d40:	d14b      	bne.n	8004dda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_SPI_Transmit+0xf6>
 8004d4a:	8afb      	ldrh	r3, [r7, #22]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d13e      	bne.n	8004dce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d74:	e02b      	b.n	8004dce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d112      	bne.n	8004daa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004da8:	e011      	b.n	8004dce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004daa:	f7fc feb5 	bl	8001b18 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d803      	bhi.n	8004dc2 <HAL_SPI_Transmit+0x168>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d102      	bne.n	8004dc8 <HAL_SPI_Transmit+0x16e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dcc:	e074      	b.n	8004eb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ce      	bne.n	8004d76 <HAL_SPI_Transmit+0x11c>
 8004dd8:	e04c      	b.n	8004e74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_Transmit+0x18e>
 8004de2:	8afb      	ldrh	r3, [r7, #22]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d140      	bne.n	8004e6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e0e:	e02c      	b.n	8004e6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d113      	bne.n	8004e46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e44:	e011      	b.n	8004e6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e46:	f7fc fe67 	bl	8001b18 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d803      	bhi.n	8004e5e <HAL_SPI_Transmit+0x204>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d102      	bne.n	8004e64 <HAL_SPI_Transmit+0x20a>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e68:	e026      	b.n	8004eb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1cd      	bne.n	8004e10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fa0d 	bl	8005298 <SPI_EndRxTxTransaction>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e000      	b.n	8004eb8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_SPI_Transmit_DMA+0x20>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e09b      	b.n	800502c <HAL_SPI_Transmit_DMA+0x158>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f0c:	e089      	b.n	8005022 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_SPI_Transmit_DMA+0x46>
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f1e:	e080      	b.n	8005022 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f66:	d10f      	bne.n	8004f88 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_SPI_Transmit_DMA+0x160>)
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	4a28      	ldr	r2, [pc, #160]	; (8005038 <HAL_SPI_Transmit_DMA+0x164>)
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9c:	4a27      	ldr	r2, [pc, #156]	; (800503c <HAL_SPI_Transmit_DMA+0x168>)
 8004f9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004fc0:	f7fc ff9a 	bl	8001ef8 <HAL_DMA_Start_IT>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	f043 0210 	orr.w	r2, r3, #16
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004fe2:	e01e      	b.n	8005022 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d007      	beq.n	8005002 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0220 	orr.w	r2, r2, #32
 8005010:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0202 	orr.w	r2, r2, #2
 8005020:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	0800512d 	.word	0x0800512d
 8005038:	08005085 	.word	0x08005085
 800503c:	08005149 	.word	0x08005149

08005040 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005076:	b2db      	uxtb	r3, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005092:	f7fc fd41 	bl	8001b18 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d03b      	beq.n	8005120 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0220 	bic.w	r2, r2, #32
 80050b6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0202 	bic.w	r2, r2, #2
 80050c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	2164      	movs	r1, #100	; 0x64
 80050cc:	6978      	ldr	r0, [r7, #20]
 80050ce:	f000 f8e3 	bl	8005298 <SPI_EndRxTxTransaction>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005118:	6978      	ldr	r0, [r7, #20]
 800511a:	f7ff ff9b 	bl	8005054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800511e:	e002      	b.n	8005126 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7fc fa43 	bl	80015ac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff80 	bl	8005040 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0203 	bic.w	r2, r2, #3
 8005164:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f043 0210 	orr.w	r2, r3, #16
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff6a 	bl	8005054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005198:	f7fc fcbe 	bl	8001b18 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a8:	f7fc fcb6 	bl	8001b18 <HAL_GetTick>
 80051ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ae:	4b39      	ldr	r3, [pc, #228]	; (8005294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	015b      	lsls	r3, r3, #5
 80051b4:	0d1b      	lsrs	r3, r3, #20
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051be:	e054      	b.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d050      	beq.n	800526a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c8:	f7fc fca6 	bl	8001b18 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d902      	bls.n	80051de <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d13d      	bne.n	800525a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f6:	d111      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005200:	d004      	beq.n	800520c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d107      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005224:	d10f      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e017      	b.n	800528a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3b01      	subs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4013      	ands	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	bf0c      	ite	eq
 800527a:	2301      	moveq	r3, #1
 800527c:	2300      	movne	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	429a      	cmp	r2, r3
 8005286:	d19b      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000008 	.word	0x20000008

08005298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <SPI_EndRxTxTransaction+0x7c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <SPI_EndRxTxTransaction+0x80>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	0d5b      	lsrs	r3, r3, #21
 80052b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d112      	bne.n	80052ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff ff5a 	bl	8005188 <SPI_WaitFlagStateUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d0f2      	beq.n	80052ea <SPI_EndRxTxTransaction+0x52>
 8005304:	e000      	b.n	8005308 <SPI_EndRxTxTransaction+0x70>
        break;
 8005306:	bf00      	nop
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000008 	.word	0x20000008
 8005318:	165e9f81 	.word	0x165e9f81

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03f      	b.n	80053ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fab6 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f929 	bl	80055b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d17c      	bne.n	80054d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_Transmit+0x2c>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e075      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x3e>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e06e      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2221      	movs	r2, #33	; 0x21
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540a:	f7fc fb85 	bl	8001b18 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Transmit+0x82>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005448:	e02a      	b.n	80054a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f840 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e036      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3302      	adds	r3, #2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e007      	b.n	8005492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1cf      	bne.n	800544a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2140      	movs	r1, #64	; 0x40
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f810 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b090      	sub	sp, #64	; 0x40
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ea:	e050      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d04c      	beq.n	800558e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	f7fc fb0d 	bl	8001b18 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	429a      	cmp	r2, r3
 8005508:	d241      	bcs.n	800558e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800552a:	637a      	str	r2, [r7, #52]	; 0x34
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	613b      	str	r3, [r7, #16]
   return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	623a      	str	r2, [r7, #32]
 8005560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	69f9      	ldr	r1, [r7, #28]
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	61bb      	str	r3, [r7, #24]
   return(result);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00f      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d09f      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3740      	adds	r7, #64	; 0x40
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b0c0      	sub	sp, #256	; 0x100
 80055be:	af00      	add	r7, sp, #0
 80055c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	68d9      	ldr	r1, [r3, #12]
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	ea40 0301 	orr.w	r3, r0, r1
 80055e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005610:	f021 010c 	bic.w	r1, r1, #12
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561e:	430b      	orrs	r3, r1
 8005620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	6999      	ldr	r1, [r3, #24]
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	ea40 0301 	orr.w	r3, r0, r1
 800563e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <UART_SetConfig+0x2cc>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d005      	beq.n	8005658 <UART_SetConfig+0xa0>
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8d      	ldr	r3, [pc, #564]	; (8005888 <UART_SetConfig+0x2d0>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d104      	bne.n	8005662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7ff fa62 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 800565c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005660:	e003      	b.n	800566a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7ff fa49 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8005666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	f040 810c 	bne.w	8005890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	1891      	adds	r1, r2, r2
 8005690:	65b9      	str	r1, [r7, #88]	; 0x58
 8005692:	415b      	adcs	r3, r3
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800569a:	4621      	mov	r1, r4
 800569c:	eb12 0801 	adds.w	r8, r2, r1
 80056a0:	4629      	mov	r1, r5
 80056a2:	eb43 0901 	adc.w	r9, r3, r1
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ba:	4690      	mov	r8, r2
 80056bc:	4699      	mov	r9, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	eb18 0303 	adds.w	r3, r8, r3
 80056c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056c8:	462b      	mov	r3, r5
 80056ca:	eb49 0303 	adc.w	r3, r9, r3
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056e6:	460b      	mov	r3, r1
 80056e8:	18db      	adds	r3, r3, r3
 80056ea:	653b      	str	r3, [r7, #80]	; 0x50
 80056ec:	4613      	mov	r3, r2
 80056ee:	eb42 0303 	adc.w	r3, r2, r3
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
 80056f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056fc:	f7fa fd6c 	bl	80001d8 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <UART_SetConfig+0x2d4>)
 8005706:	fba3 2302 	umull	r2, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	011c      	lsls	r4, r3, #4
 800570e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005712:	2200      	movs	r2, #0
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800571c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	1891      	adds	r1, r2, r2
 8005726:	64b9      	str	r1, [r7, #72]	; 0x48
 8005728:	415b      	adcs	r3, r3
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800572c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005730:	4641      	mov	r1, r8
 8005732:	eb12 0a01 	adds.w	sl, r2, r1
 8005736:	4649      	mov	r1, r9
 8005738:	eb43 0b01 	adc.w	fp, r3, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800574c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005750:	4692      	mov	sl, r2
 8005752:	469b      	mov	fp, r3
 8005754:	4643      	mov	r3, r8
 8005756:	eb1a 0303 	adds.w	r3, sl, r3
 800575a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800575e:	464b      	mov	r3, r9
 8005760:	eb4b 0303 	adc.w	r3, fp, r3
 8005764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800577c:	460b      	mov	r3, r1
 800577e:	18db      	adds	r3, r3, r3
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	4613      	mov	r3, r2
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
 800578a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800578e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005792:	f7fa fd21 	bl	80001d8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4611      	mov	r1, r2
 800579c:	4b3b      	ldr	r3, [pc, #236]	; (800588c <UART_SetConfig+0x2d4>)
 800579e:	fba3 2301 	umull	r2, r3, r3, r1
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2264      	movs	r2, #100	; 0x64
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	1acb      	subs	r3, r1, r3
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <UART_SetConfig+0x2d4>)
 80057b4:	fba3 2302 	umull	r2, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c0:	441c      	add	r4, r3
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	63b9      	str	r1, [r7, #56]	; 0x38
 80057dc:	415b      	adcs	r3, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e4:	4641      	mov	r1, r8
 80057e6:	1851      	adds	r1, r2, r1
 80057e8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ea:	4649      	mov	r1, r9
 80057ec:	414b      	adcs	r3, r1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057fc:	4659      	mov	r1, fp
 80057fe:	00cb      	lsls	r3, r1, #3
 8005800:	4651      	mov	r1, sl
 8005802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005806:	4651      	mov	r1, sl
 8005808:	00ca      	lsls	r2, r1, #3
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	4603      	mov	r3, r0
 8005810:	4642      	mov	r2, r8
 8005812:	189b      	adds	r3, r3, r2
 8005814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005818:	464b      	mov	r3, r9
 800581a:	460a      	mov	r2, r1
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005838:	460b      	mov	r3, r1
 800583a:	18db      	adds	r3, r3, r3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 800583e:	4613      	mov	r3, r2
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800584e:	f7fa fcc3 	bl	80001d8 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <UART_SetConfig+0x2d4>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <UART_SetConfig+0x2d4>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f003 0207 	and.w	r2, r3, #7
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4422      	add	r2, r4
 800587e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005880:	e105      	b.n	8005a8e <UART_SetConfig+0x4d6>
 8005882:	bf00      	nop
 8005884:	40011000 	.word	0x40011000
 8005888:	40011400 	.word	0x40011400
 800588c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800589a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800589e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058a2:	4642      	mov	r2, r8
 80058a4:	464b      	mov	r3, r9
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	6239      	str	r1, [r7, #32]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b2:	4641      	mov	r1, r8
 80058b4:	1854      	adds	r4, r2, r1
 80058b6:	4649      	mov	r1, r9
 80058b8:	eb43 0501 	adc.w	r5, r3, r1
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	00eb      	lsls	r3, r5, #3
 80058c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ca:	00e2      	lsls	r2, r4, #3
 80058cc:	4614      	mov	r4, r2
 80058ce:	461d      	mov	r5, r3
 80058d0:	4643      	mov	r3, r8
 80058d2:	18e3      	adds	r3, r4, r3
 80058d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058d8:	464b      	mov	r3, r9
 80058da:	eb45 0303 	adc.w	r3, r5, r3
 80058de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058fe:	4629      	mov	r1, r5
 8005900:	008b      	lsls	r3, r1, #2
 8005902:	4621      	mov	r1, r4
 8005904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005908:	4621      	mov	r1, r4
 800590a:	008a      	lsls	r2, r1, #2
 800590c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005910:	f7fa fc62 	bl	80001d8 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <UART_SetConfig+0x4e4>)
 800591a:	fba3 2302 	umull	r2, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	011c      	lsls	r4, r3, #4
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800592c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	1891      	adds	r1, r2, r2
 800593a:	61b9      	str	r1, [r7, #24]
 800593c:	415b      	adcs	r3, r3
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005944:	4641      	mov	r1, r8
 8005946:	1851      	adds	r1, r2, r1
 8005948:	6139      	str	r1, [r7, #16]
 800594a:	4649      	mov	r1, r9
 800594c:	414b      	adcs	r3, r1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800595c:	4659      	mov	r1, fp
 800595e:	00cb      	lsls	r3, r1, #3
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005966:	4651      	mov	r1, sl
 8005968:	00ca      	lsls	r2, r1, #3
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	4603      	mov	r3, r0
 8005970:	4642      	mov	r2, r8
 8005972:	189b      	adds	r3, r3, r2
 8005974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005978:	464b      	mov	r3, r9
 800597a:	460a      	mov	r2, r1
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	67bb      	str	r3, [r7, #120]	; 0x78
 800598e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800599c:	4649      	mov	r1, r9
 800599e:	008b      	lsls	r3, r1, #2
 80059a0:	4641      	mov	r1, r8
 80059a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a6:	4641      	mov	r1, r8
 80059a8:	008a      	lsls	r2, r1, #2
 80059aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ae:	f7fa fc13 	bl	80001d8 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	; 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	3332      	adds	r3, #50	; 0x32
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d6:	441c      	add	r4, r3
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059dc:	2200      	movs	r2, #0
 80059de:	673b      	str	r3, [r7, #112]	; 0x70
 80059e0:	677a      	str	r2, [r7, #116]	; 0x74
 80059e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059e6:	4642      	mov	r2, r8
 80059e8:	464b      	mov	r3, r9
 80059ea:	1891      	adds	r1, r2, r2
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	415b      	adcs	r3, r3
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f6:	4641      	mov	r1, r8
 80059f8:	1851      	adds	r1, r2, r1
 80059fa:	6039      	str	r1, [r7, #0]
 80059fc:	4649      	mov	r1, r9
 80059fe:	414b      	adcs	r3, r1
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a0e:	4659      	mov	r1, fp
 8005a10:	00cb      	lsls	r3, r1, #3
 8005a12:	4651      	mov	r1, sl
 8005a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a18:	4651      	mov	r1, sl
 8005a1a:	00ca      	lsls	r2, r1, #3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	4642      	mov	r2, r8
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a28:	464b      	mov	r3, r9
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	eb42 0303 	adc.w	r3, r2, r3
 8005a30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	4641      	mov	r1, r8
 8005a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a54:	4641      	mov	r1, r8
 8005a56:	008a      	lsls	r2, r1, #2
 8005a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a5c:	f7fa fbbc 	bl	80001d8 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a66:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2164      	movs	r1, #100	; 0x64
 8005a6e:	fb01 f303 	mul.w	r3, r1, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	3332      	adds	r3, #50	; 0x32
 8005a78:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4422      	add	r2, r4
 8005a8c:	609a      	str	r2, [r3, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	51eb851f 	.word	0x51eb851f

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	; (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	; (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	; (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	; (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f000 f820 	bl	8005af8 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	0800608c 	.word	0x0800608c
 8005adc:	0800608c 	.word	0x0800608c
 8005ae0:	0800608c 	.word	0x0800608c
 8005ae4:	08006090 	.word	0x08006090

08005ae8 <memset>:
 8005ae8:	4402      	add	r2, r0
 8005aea:	4603      	mov	r3, r0
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d100      	bne.n	8005af2 <memset+0xa>
 8005af0:	4770      	bx	lr
 8005af2:	f803 1b01 	strb.w	r1, [r3], #1
 8005af6:	e7f9      	b.n	8005aec <memset+0x4>

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
