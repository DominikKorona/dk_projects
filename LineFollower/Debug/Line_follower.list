
Line_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006370  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08006570  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08006570  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c46  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7c  00000000  00000000  00036c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00039800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d0e  00000000  00000000  0003be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a60  00000000  00000000  0005eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db73a  00000000  00000000  00074596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fcd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005388  00000000  00000000  0014fd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080064e4 	.word	0x080064e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080064e4 	.word	0x080064e4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fe46 	bl	8001166 <HAL_Init>
  void LineDetectionFeedback(void);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f86f 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 faab 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 fa8b 	bl	80009fc <MX_DMA_Init>
  MX_ADC1_Init();
 80004e6:	f000 f8cb 	bl	8000680 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004ea:	f000 f96f 	bl	80007cc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 fa55 	bl	800099c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f2:	f000 fa05 	bl	8000900 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tb6612_init();
 80004f6:	f000 fb39 	bl	8000b6c <tb6612_init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Sensor, 5);
 80004fa:	2205      	movs	r2, #5
 80004fc:	492b      	ldr	r1, [pc, #172]	; (80005ac <main+0xdc>)
 80004fe:	482c      	ldr	r0, [pc, #176]	; (80005b0 <main+0xe0>)
 8000500:	f001 f9c8 	bl	8001894 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   const uint8_t Docelowa=0;
 8000504:	2300      	movs	r3, #0
 8000506:	757b      	strb	r3, [r7, #21]
   uint8_t Aktualna=0;
 8000508:	2300      	movs	r3, #0
 800050a:	75fb      	strb	r3, [r7, #23]

   int8_t Error=0;
 800050c:	2300      	movs	r3, #0
 800050e:	753b      	strb	r3, [r7, #20]
   int8_t Zmiana;
   uint8_t array[5]={1,1,1,1,1};
 8000510:	4a28      	ldr	r2, [pc, #160]	; (80005b4 <main+0xe4>)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051a:	6018      	str	r0, [r3, #0]
 800051c:	3304      	adds	r3, #4
 800051e:	7019      	strb	r1, [r3, #0]
   int8_t wages[5]={-2,-1,0,1,2};
 8000520:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <main+0xe8>)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	7019      	strb	r1, [r3, #0]

//   motor_a_speed(15);
//   motor_b_speed(15);

   uint8_t Kp=20;
 800052e:	2314      	movs	r3, #20
 8000530:	74fb      	strb	r3, [r7, #19]
   uint8_t Tp=30;
 8000532:	231e      	movs	r3, #30
 8000534:	74bb      	strb	r3, [r7, #18]
  while (1)
  {
	  Aktualna = 0; // Ustawianie aktualnej pozycji
 8000536:	2300      	movs	r3, #0
 8000538:	75fb      	strb	r3, [r7, #23]
	  LineDetectionFeedback(); // switch led on
 800053a:	f000 fadf 	bl	8000afc <LineDetectionFeedback>

	  for (uint8_t i = 0; i < 5; ++i) {
 800053e:	2300      	movs	r3, #0
 8000540:	75bb      	strb	r3, [r7, #22]
 8000542:	e013      	b.n	800056c <main+0x9c>
		if (Sensor[i]>THRESHOLD) {
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <main+0xdc>)
 8000548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054c:	b29b      	uxth	r3, r3
 800054e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000552:	d908      	bls.n	8000566 <main+0x96>
			Aktualna += wages[i]; //Obliczanie rzeczywistej pozycji
 8000554:	7dbb      	ldrb	r3, [r7, #22]
 8000556:	3318      	adds	r3, #24
 8000558:	443b      	add	r3, r7
 800055a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	7dfb      	ldrb	r3, [r7, #23]
 8000562:	4413      	add	r3, r2
 8000564:	75fb      	strb	r3, [r7, #23]
	  for (uint8_t i = 0; i < 5; ++i) {
 8000566:	7dbb      	ldrb	r3, [r7, #22]
 8000568:	3301      	adds	r3, #1
 800056a:	75bb      	strb	r3, [r7, #22]
 800056c:	7dbb      	ldrb	r3, [r7, #22]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d9e8      	bls.n	8000544 <main+0x74>
		}
	  }
	  Error = Docelowa + Aktualna;
 8000572:	7d7a      	ldrb	r2, [r7, #21]
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	4413      	add	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	753b      	strb	r3, [r7, #20]
	  Zmiana=Kp*Error;
 800057c:	7d3b      	ldrb	r3, [r7, #20]
 800057e:	7cfa      	ldrb	r2, [r7, #19]
 8000580:	fb12 f303 	smulbb	r3, r2, r3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	747b      	strb	r3, [r7, #17]
	  motor_a_speed(Tp-Zmiana);
 8000588:	7c7b      	ldrb	r3, [r7, #17]
 800058a:	7cba      	ldrb	r2, [r7, #18]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fb30 	bl	8000bf8 <motor_a_speed>
	  motor_b_speed(Tp+Zmiana);
 8000598:	7c7a      	ldrb	r2, [r7, #17]
 800059a:	7cbb      	ldrb	r3, [r7, #18]
 800059c:	4413      	add	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fb72 	bl	8000c8c <motor_b_speed>
	  Aktualna = 0; // Ustawianie aktualnej pozycji
 80005a8:	e7c5      	b.n	8000536 <main+0x66>
 80005aa:	bf00      	nop
 80005ac:	200001f0 	.word	0x200001f0
 80005b0:	20000028 	.word	0x20000028
 80005b4:	080064fc 	.word	0x080064fc
 80005b8:	08006504 	.word	0x08006504

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 ff82 	bl	80064d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f002 fe0b 	bl	80031fc <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 fab8 	bl	8000b60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f002 fde6 	bl	80031c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SystemClock_Config+0xc0>)
 80005f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <SystemClock_Config+0xc0>)
 80005fc:	f023 0318 	bic.w	r3, r3, #24
 8000600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2314      	movs	r3, #20
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061c:	2301      	movs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000624:	2310      	movs	r3, #16
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000628:	2307      	movs	r3, #7
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fe35 	bl	80032a8 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000644:	f000 fa8c 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fa35 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800066c:	f000 fa78 	bl	8000b60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000670:	f003 fe48 	bl	8004304 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	; 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000696:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <MX_ADC1_Init+0x130>)
 8000698:	4a46      	ldr	r2, [pc, #280]	; (80007b4 <MX_ADC1_Init+0x134>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800069c:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC1_Init+0x130>)
 800069e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b0:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006ca:	2205      	movs	r2, #5
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006de:	2200      	movs	r2, #0
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	482d      	ldr	r0, [pc, #180]	; (80007b0 <MX_ADC1_Init+0x130>)
 80006fa:	f000 ff83 	bl	8001604 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000704:	f000 fa2c 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_ADC1_Init+0x138>)
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070c:	2306      	movs	r3, #6
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000710:	2306      	movs	r3, #6
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000714:	237f      	movs	r3, #127	; 0x7f
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000718:	2304      	movs	r3, #4
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <MX_ADC1_Init+0x130>)
 8000726:	f001 fb15 	bl	8001d54 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000730:	f000 fa16 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0x13c>)
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000738:	230c      	movs	r3, #12
 800073a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	481b      	ldr	r0, [pc, #108]	; (80007b0 <MX_ADC1_Init+0x130>)
 8000742:	f001 fb07 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800074c:	f000 fa08 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0x140>)
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000754:	2312      	movs	r3, #18
 8000756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x130>)
 800075e:	f001 faf9 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000768:	f000 f9fa 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC1_Init+0x144>)
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000770:	2318      	movs	r3, #24
 8000772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x130>)
 800077a:	f001 faeb 	bl	8001d54 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000784:	f000 f9ec 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x148>)
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800078c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_ADC1_Init+0x130>)
 8000798:	f001 fadc 	bl	8001d54 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80007a2:	f000 f9dd 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000028 	.word	0x20000028
 80007b4:	50040000 	.word	0x50040000
 80007b8:	14f00020 	.word	0x14f00020
 80007bc:	19200040 	.word	0x19200040
 80007c0:	2a000400 	.word	0x2a000400
 80007c4:	21800100 	.word	0x21800100
 80007c8:	25b00200 	.word	0x25b00200

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b096      	sub	sp, #88	; 0x58
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	222c      	movs	r2, #44	; 0x2c
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 fe6b 	bl	80064d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000800:	4a3e      	ldr	r2, [pc, #248]	; (80008fc <MX_TIM1_Init+0x130>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000806:	220f      	movs	r2, #15
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_TIM1_Init+0x12c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000810:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000812:	2264      	movs	r2, #100	; 0x64
 8000814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_TIM1_Init+0x12c>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000828:	4833      	ldr	r0, [pc, #204]	; (80008f8 <MX_TIM1_Init+0x12c>)
 800082a:	f003 fec4 	bl	80045b6 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000834:	f000 f994 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000844:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000848:	4619      	mov	r1, r3
 800084a:	482b      	ldr	r0, [pc, #172]	; (80008f8 <MX_TIM1_Init+0x12c>)
 800084c:	f004 fd68 	bl	8005320 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000856:	f000 f983 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	; 0x60
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800087a:	2204      	movs	r2, #4
 800087c:	4619      	mov	r1, r3
 800087e:	481e      	ldr	r0, [pc, #120]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000880:	f003 ffce 	bl	8004820 <HAL_TIM_PWM_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800088a:	f000 f969 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000892:	2208      	movs	r2, #8
 8000894:	4619      	mov	r1, r3
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_TIM1_Init+0x12c>)
 8000898:	f003 ffc2 	bl	8004820 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80008a2:	f000 f95d 	bl	8000b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_TIM1_Init+0x12c>)
 80008dc:	f004 fd86 	bl	80053ec <HAL_TIMEx_ConfigBreakDeadTime>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80008e6:	f000 f93b 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_TIM1_Init+0x12c>)
 80008ec:	f000 fb0e 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 80008f0:	bf00      	nop
 80008f2:	3758      	adds	r7, #88	; 0x58
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000d4 	.word	0x200000d4
 80008fc:	40012c00 	.word	0x40012c00

08000900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM2_Init+0x98>)
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM2_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_TIM2_Init+0x98>)
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_TIM2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM2_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_TIM2_Init+0x98>)
 8000948:	f003 fdde 	bl	8004508 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 f905 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM2_Init+0x98>)
 8000964:	f004 f870 	bl	8004a48 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800096e:	f000 f8f7 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM2_Init+0x98>)
 8000980:	f004 fcce 	bl	8005320 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800098a:	f000 f8e9 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000120 	.word	0x20000120

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c2:	2208      	movs	r2, #8
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009e0:	f004 fd7c 	bl	80054dc <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 f8b9 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000016c 	.word	0x2000016c
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200b      	movs	r0, #11
 8000a20:	f001 ff9f 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a24:	200b      	movs	r0, #11
 8000a26:	f001 ffb8 	bl	800299a <HAL_NVIC_EnableIRQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_GPIO_Init+0xbc>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_IN1_Pin|A_IN2_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f002 fb76 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_IN1_Pin|B_IN2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	210b      	movs	r1, #11
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_GPIO_Init+0xc0>)
 8000aaa:	f002 fb71 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_IN1_Pin A_IN2_Pin STBY_Pin */
  GPIO_InitStruct.Pin = A_IN1_Pin|A_IN2_Pin|STBY_Pin;
 8000aae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f002 f9f7 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|LD3_Pin;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_GPIO_Init+0xc0>)
 8000ae6:	f002 f9e9 	bl	8002ebc <HAL_GPIO_Init>

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <LineDetectionFeedback>:

/* USER CODE BEGIN 4 */
void LineDetectionFeedback(void){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	if (Sensor[0]>THRESHOLD ||
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <LineDetectionFeedback+0x5c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b0a:	d817      	bhi.n	8000b3c <LineDetectionFeedback+0x40>
		Sensor[1]>THRESHOLD ||
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <LineDetectionFeedback+0x5c>)
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	b29b      	uxth	r3, r3
	if (Sensor[0]>THRESHOLD ||
 8000b12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b16:	d811      	bhi.n	8000b3c <LineDetectionFeedback+0x40>
		Sensor[2]>THRESHOLD ||
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <LineDetectionFeedback+0x5c>)
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	b29b      	uxth	r3, r3
		Sensor[1]>THRESHOLD ||
 8000b1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b22:	d80b      	bhi.n	8000b3c <LineDetectionFeedback+0x40>
		Sensor[3]>THRESHOLD ||
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LineDetectionFeedback+0x5c>)
 8000b26:	88db      	ldrh	r3, [r3, #6]
 8000b28:	b29b      	uxth	r3, r3
		Sensor[2]>THRESHOLD ||
 8000b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b2e:	d805      	bhi.n	8000b3c <LineDetectionFeedback+0x40>
		Sensor[4]>THRESHOLD) {
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <LineDetectionFeedback+0x5c>)
 8000b32:	891b      	ldrh	r3, [r3, #8]
 8000b34:	b29b      	uxth	r3, r3
		Sensor[3]>THRESHOLD ||
 8000b36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b3a:	d905      	bls.n	8000b48 <LineDetectionFeedback+0x4c>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2108      	movs	r1, #8
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <LineDetectionFeedback+0x60>)
 8000b42:	f002 fb25 	bl	8003190 <HAL_GPIO_WritePin>
 8000b46:	e005      	b.n	8000b54 <LineDetectionFeedback+0x58>
	}else{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <LineDetectionFeedback+0x60>)
 8000b4e:	f002 fb1f 	bl	8003190 <HAL_GPIO_WritePin>
	}

}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001f0 	.word	0x200001f0
 8000b5c:	48000400 	.word	0x48000400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <tb6612_init>:
#include "motor.h"

#define ABS(x)   ((x) > 0 ? (x) : -(x))

void tb6612_init()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	tb6612_mode_control(START);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f8af 	bl	8000cd4 <tb6612_mode_control>
	motor_a_direction(CCW);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 f816 	bl	8000ba8 <motor_a_direction>
	motor_b_direction(CW);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f85f 	bl	8000c40 <motor_b_direction>
	motor_a_speed(0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f838 	bl	8000bf8 <motor_a_speed>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b88:	2108      	movs	r1, #8
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <tb6612_init+0x38>)
 8000b8c:	f003 fd6a 	bl	8004664 <HAL_TIM_PWM_Start>
	motor_b_speed(0);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f87b 	bl	8000c8c <motor_b_speed>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b96:	2104      	movs	r1, #4
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <tb6612_init+0x38>)
 8000b9a:	f003 fd63 	bl	8004664 <HAL_TIM_PWM_Start>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000d4 	.word	0x200000d4

08000ba8 <motor_a_direction>:

void motor_a_direction(TB6612_Direction dir){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	if (dir==CW){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10c      	bne.n	8000bd2 <motor_a_direction+0x2a>
		HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f002 fae6 	bl	8003190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f002 fae0 	bl	8003190 <HAL_GPIO_WritePin>
	}else if(dir==CCW){
		HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
	}
}
 8000bd0:	e00e      	b.n	8000bf0 <motor_a_direction+0x48>
	}else if(dir==CCW){
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10b      	bne.n	8000bf0 <motor_a_direction+0x48>
		HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f002 fad6 	bl	8003190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f002 fad0 	bl	8003190 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <motor_a_speed>:

void motor_a_speed(int8_t speed)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	motor_a_direction(CCW);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff ffd0 	bl	8000ba8 <motor_a_direction>
//	if(speed >= 90)
//		speed = 89;
	if(speed < 0){
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da02      	bge.n	8000c16 <motor_a_speed+0x1e>
		motor_a_direction(CW);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ffc9 	bl	8000ba8 <motor_a_direction>
		ABS(speed);
	}
	if(ABS(speed) >= 100)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b63      	cmp	r3, #99	; 0x63
 8000c24:	d901      	bls.n	8000c2a <motor_a_speed+0x32>
		speed = 99;
 8000c26:	2363      	movs	r3, #99	; 0x63
 8000c28:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, speed);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <motor_a_speed+0x44>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000d4 	.word	0x200000d4

08000c40 <motor_b_direction>:


void motor_b_direction(TB6612_Direction dir){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	if (dir==CW){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <motor_b_direction+0x26>
		HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <motor_b_direction+0x48>)
 8000c56:	f002 fa9b 	bl	8003190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <motor_b_direction+0x48>)
 8000c60:	f002 fa96 	bl	8003190 <HAL_GPIO_WritePin>
	}else if(dir==CCW){
		HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
	}
}
 8000c64:	e00c      	b.n	8000c80 <motor_b_direction+0x40>
	}else if(dir==CCW){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d109      	bne.n	8000c80 <motor_b_direction+0x40>
		HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <motor_b_direction+0x48>)
 8000c72:	f002 fa8d 	bl	8003190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <motor_b_direction+0x48>)
 8000c7c:	f002 fa88 	bl	8003190 <HAL_GPIO_WritePin>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	48000400 	.word	0x48000400

08000c8c <motor_b_speed>:

void motor_b_speed(int8_t speed)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
//	if(speed >= 100)
//		speed = 99;
	motor_b_direction(CW);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff ffd2 	bl	8000c40 <motor_b_direction>

	if(speed < 0){
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da02      	bge.n	8000caa <motor_b_speed+0x1e>
		motor_b_direction(CCW);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ffcb 	bl	8000c40 <motor_b_direction>
		ABS(speed);
//		speed +=15;
	}
	if(ABS(speed) >= 100)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfb8      	it	lt
 8000cb2:	425b      	neglt	r3, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b63      	cmp	r3, #99	; 0x63
 8000cb8:	d901      	bls.n	8000cbe <motor_b_speed+0x32>
		speed = 99;
 8000cba:	2363      	movs	r3, #99	; 0x63
 8000cbc:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, speed);
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <motor_b_speed+0x44>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000d4 	.word	0x200000d4

08000cd4 <tb6612_mode_control>:

void tb6612_mode_control(TB6612_Mode mode){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	if (mode==SLEEP){
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d107      	bne.n	8000cf4 <tb6612_mode_control+0x20>
		HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f002 fa4f 	bl	8003190 <HAL_GPIO_WritePin>
	}else if(mode==START){
		HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
	}
}
 8000cf2:	e009      	b.n	8000d08 <tb6612_mode_control+0x34>
	}else if(mode==START){
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <tb6612_mode_control+0x34>
		HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f002 fa44 	bl	8003190 <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09e      	sub	sp, #120	; 0x78
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2254      	movs	r2, #84	; 0x54
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fbab 	bl	80064d4 <memset>
  if(hadc->Instance==ADC1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <HAL_ADC_MspInit+0x128>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d176      	bne.n	8000e76 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d92:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000da0:	2307      	movs	r3, #7
 8000da2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 f8ae 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000dc2:	f7ff fecd 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_ADC_MspInit+0x12c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin|SENS_4_Pin|SENS_5_Pin
 8000df6:	233b      	movs	r3, #59	; 0x3b
 8000df8:	667b      	str	r3, [r7, #100]	; 0x64
                          |SENS_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f002 f856 	bl	8002ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_ADC_MspInit+0x134>)
 8000e14:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e4a:	480f      	ldr	r0, [pc, #60]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e4c:	f001 fdc0 	bl	80029d0 <HAL_DMA_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000e56:	f7ff fe83 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_ADC_MspInit+0x130>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2012      	movs	r0, #18
 8000e6c:	f001 fd79 	bl	8002962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e70:	2012      	movs	r0, #18
 8000e72:	f001 fd92 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3778      	adds	r7, #120	; 0x78
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	50040000 	.word	0x50040000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	2000008c 	.word	0x2000008c
 8000e8c:	40020008 	.word	0x40020008

08000e90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x38>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10b      	bne.n	8000eba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_TIM_PWM_MspInit+0x3c>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d10b      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_TIM_MspPostInit+0x68>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d11d      	bne.n	8000f6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = B_PWM_Pin|A_PWM_Pin;
 8000f46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 ffa9 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09e      	sub	sp, #120	; 0x78
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2254      	movs	r2, #84	; 0x54
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 fa99 	bl	80064d4 <memset>
  if(huart->Instance==USART2)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <HAL_UART_MspInit+0xdc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d150      	bne.n	800104e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 ffad 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fc4:	f7ff fdcc 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_UART_MspInit+0xe0>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001008:	2307      	movs	r3, #7
 800100a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f001 ff51 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800102c:	2303      	movs	r3, #3
 800102e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f001 ff3f 	bl	8002ebc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2026      	movs	r0, #38	; 0x26
 8001044:	f001 fc8d 	bl	8002962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001048:	2026      	movs	r0, #38	; 0x26
 800104a:	f001 fca6 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3778      	adds	r7, #120	; 0x78
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40004400 	.word	0x40004400
 800105c:	40021000 	.word	0x40021000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8b0 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Channel1_IRQHandler+0x10>)
 80010ba:	f001 fe20 	bl	8002cfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000008c 	.word	0x2000008c

080010c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <ADC1_IRQHandler+0x10>)
 80010ce:	f000 fc65 	bl	800199c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000028 	.word	0x20000028

080010dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	f004 fa49 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000016c 	.word	0x2000016c

080010f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001118:	f7ff ffea 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f005 f9a3 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001146:	f7ff f9c3 	bl	80004d0 <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001158:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 800115c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001160:	20000200 	.word	0x20000200

08001164 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <CAN1_RX0_IRQHandler>

08001166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f001 fbeb 	bl	800294c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f80e 	bl	8001198 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e001      	b.n	800118c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001188:	f7ff fdc2 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	79fb      	ldrb	r3, [r7, #7]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_InitTick+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fbf7 	bl	80029b6 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d809      	bhi.n	80011e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f001 fbc1 	bl	8002962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e001      	b.n	80011f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	200001fc 	.word	0x200001fc

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200001fc 	.word	0x200001fc

08001250 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	609a      	str	r2, [r3, #8]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3360      	adds	r3, #96	; 0x60
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LL_ADC_SetOffset+0x44>)
 80012da:	4013      	ands	r3, r2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	4313      	orrs	r3, r2
 80012e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	03fff000 	.word	0x03fff000

08001300 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	461a      	mov	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3360      	adds	r3, #96	; 0x60
 800133c:	461a      	mov	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3330      	adds	r3, #48	; 0x30
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	211f      	movs	r1, #31
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0e9b      	lsrs	r3, r3, #26
 80013c0:	f003 011f 	and.w	r1, r3, #31
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001406:	b480      	push	{r7}
 8001408:	b087      	sub	sp, #28
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3314      	adds	r3, #20
 8001416:	461a      	mov	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0e5b      	lsrs	r3, r3, #25
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0d1b      	lsrs	r3, r3, #20
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	2107      	movs	r1, #7
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	0d1b      	lsrs	r3, r3, #20
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	431a      	orrs	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0318 	and.w	r3, r3, #24
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001480:	40d9      	lsrs	r1, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	400b      	ands	r3, r1
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	431a      	orrs	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	0007ffff 	.word	0x0007ffff

080014a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6093      	str	r3, [r2, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001504:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800152c:	d101      	bne.n	8001532 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001550:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <LL_ADC_IsEnabled+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_ADC_IsEnabled+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800159e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a2:	f043 0204 	orr.w	r2, r3, #4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d101      	bne.n	80015ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d101      	bne.n	80015f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e12c      	b.n	8001878 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fb93 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff3f 	bl	80014c8 <LL_ADC_IsDeepPowerDownEnabled>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff25 	bl	80014a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff5a 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff3e 	bl	80014f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_ADC_Init+0x27c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	4a82      	ldr	r2, [pc, #520]	; (8001884 <HAL_ADC_Init+0x280>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	3301      	adds	r3, #1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001688:	e002      	b.n	8001690 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff3c 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f043 0210 	orr.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff75 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 80016cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80c5 	bne.w	8001866 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80c1 	bne.w	8001866 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff35 	bl	8001568 <LL_ADC_IsEnabled>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10b      	bne.n	800171c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001704:	4860      	ldr	r0, [pc, #384]	; (8001888 <HAL_ADC_Init+0x284>)
 8001706:	f7ff ff2f 	bl	8001568 <LL_ADC_IsEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4619      	mov	r1, r3
 8001716:	485d      	ldr	r0, [pc, #372]	; (800188c <HAL_ADC_Init+0x288>)
 8001718:	f7ff fd9a 	bl	8001250 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e5b      	ldrb	r3, [r3, #25]
 8001720:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001726:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800172c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001732:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d106      	bne.n	8001758 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	3b01      	subs	r3, #1
 8001750:	045b      	lsls	r3, r3, #17
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_ADC_Init+0x28c>)
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	430b      	orrs	r3, r1
 8001786:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff12 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 8001792:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff1f 	bl	80015dc <LL_ADC_INJ_IsConversionOngoing>
 800179e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d13d      	bne.n	8001822 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d13a      	bne.n	8001822 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c8:	f023 0302 	bic.w	r3, r3, #2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	430b      	orrs	r3, r1
 80017d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d118      	bne.n	8001812 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001802:	430a      	orrs	r2, r1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	e007      	b.n	8001822 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10c      	bne.n	8001844 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f023 010f 	bic.w	r1, r3, #15
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
 8001842:	e007      	b.n	8001854 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 020f 	bic.w	r2, r2, #15
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f023 0303 	bic.w	r3, r3, #3
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001876:	7ffb      	ldrb	r3, [r7, #31]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	053e2d63 	.word	0x053e2d63
 8001888:	50040000 	.word	0x50040000
 800188c:	50040300 	.word	0x50040300
 8001890:	fff0c007 	.word	0xfff0c007

08001894 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe86 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d167      	bne.n	8001980 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Start_DMA+0x2a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e063      	b.n	8001986 <HAL_ADC_Start_DMA+0xf2>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fe24 	bl	8002514 <ADC_Enable>
 80018cc:	4603      	mov	r3, r0
 80018ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d14f      	bne.n	8001976 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f023 0206 	bic.w	r2, r3, #6
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	659a      	str	r2, [r3, #88]	; 0x58
 8001902:	e002      	b.n	800190a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_ADC_Start_DMA+0xfc>)
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_ADC_Start_DMA+0x100>)
 8001918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_ADC_Start_DMA+0x104>)
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	221c      	movs	r2, #28
 8001928:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0210 	orr.w	r2, r2, #16
 8001940:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3340      	adds	r3, #64	; 0x40
 800195c:	4619      	mov	r1, r3
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f001 f8ed 	bl	8002b40 <HAL_DMA_Start_IT>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fe0d 	bl	800158e <LL_ADC_REG_StartConversion>
 8001974:	e006      	b.n	8001984 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800197e:	e001      	b.n	8001984 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001980:	2302      	movs	r3, #2
 8001982:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	08002621 	.word	0x08002621
 8001994:	080026f9 	.word	0x080026f9
 8001998:	08002715 	.word	0x08002715

0800199c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x56>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fed7 	bl	8002798 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2202      	movs	r2, #2
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x6a>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d05e      	beq.n	8001ace <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d059      	beq.n	8001ace <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fc93 	bl	8001362 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03e      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d135      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d12e      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fda5 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11a      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020c 	bic.w	r2, r2, #12
 8001a80:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d112      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa6:	e00b      	b.n	8001ac0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f91f 	bl	8001d04 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x146>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d072      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d06d      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc64 	bl	80013e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b18:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fc1f 	bl	8001362 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b24:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d047      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x1b2>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03f      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d13a      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d133      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12e      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fd36 	bl	80015dc <LL_ADC_INJ_IsConversionOngoing>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11a      	bne.n	8001bac <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b84:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d112      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8001baa:	e00b      	b.n	8001bc4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fdbf 	bl	8002748 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2260      	movs	r2, #96	; 0x60
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d011      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x264>
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f89a 	bl	8001d2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x294>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00d      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fda5 	bl	8002770 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x2c4>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fd97 	bl	8002784 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d02a      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x324>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d025      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	e008      	b.n	8001c94 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10e      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f043 0202 	orr.w	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f844 	bl	8001d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d018      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x360>
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f043 0208 	orr.w	r2, r3, #8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fd30 	bl	800275c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0b6      	sub	sp, #216	; 0xd8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x22>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e3b9      	b.n	80024ea <HAL_ADC_ConfigChannel+0x796>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc17 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 839e 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d824      	bhi.n	8001de2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	3b02      	subs	r3, #2
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d81b      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x86>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_ADC_ConfigChannel+0x54>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dc1 	.word	0x08001dc1
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001dd1 	.word	0x08001dd1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	605a      	str	r2, [r3, #4]
          break;
 8001dbe:	e011      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2212      	movs	r2, #18
 8001dc4:	605a      	str	r2, [r3, #4]
          break;
 8001dc6:	e00d      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2218      	movs	r2, #24
 8001dcc:	605a      	str	r2, [r3, #4]
          break;
 8001dce:	e009      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd6:	605a      	str	r2, [r3, #4]
          break;
 8001dd8:	e004      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2206      	movs	r2, #6
 8001dde:	605a      	str	r2, [r3, #4]
          break;
 8001de0:	e000      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001de2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	f7ff fac9 	bl	8001388 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fbdb 	bl	80015b6 <LL_ADC_REG_IsConversionOngoing>
 8001e00:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fbe7 	bl	80015dc <LL_ADC_INJ_IsConversionOngoing>
 8001e0e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 81a6 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 81a1 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fae7 	bl	8001406 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d00a      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e6a:	f7ff fa25 	bl	80012b8 <LL_ADC_SetOffset>
 8001e6e:	e17b      	b.n	8002168 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fa42 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x148>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fa37 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	f003 021f 	and.w	r2, r3, #31
 8001e9a:	e01e      	b.n	8001eda <HAL_ADC_ConfigChannel+0x186>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fa2c 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	e004      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x19e>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	e018      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f9fb 	bl	800132c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f9df 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x20e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f9d4 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	e01e      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x24c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f9c9 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x264>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	e018      	b.n	8001fea <HAL_ADC_ConfigChannel+0x296>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d106      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f998 	bl	800132c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f97c 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x2d4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f971 	bl	8001300 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e01e      	b.n	8002066 <HAL_ADC_ConfigChannel+0x312>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f966 	bl	8001300 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800204a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800204e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800205a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x32a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e016      	b.n	80020ac <HAL_ADC_ConfigChannel+0x358>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800209e:	2320      	movs	r3, #32
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2102      	movs	r1, #2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f937 	bl	800132c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2103      	movs	r1, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f91b 	bl	8001300 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x396>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2103      	movs	r1, #3
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f910 	bl	8001300 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	e017      	b.n	800211a <HAL_ADC_ConfigChannel+0x3c6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2103      	movs	r1, #3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f905 	bl	8001300 <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002104:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e003      	b.n	8002118 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3de>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	0e9b      	lsrs	r3, r3, #26
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	e011      	b.n	8002156 <HAL_ADC_ConfigChannel+0x402>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002142:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e003      	b.n	8002156 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002156:	429a      	cmp	r2, r3
 8002158:	d106      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	2103      	movs	r1, #3
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f8e2 	bl	800132c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f9fb 	bl	8001568 <LL_ADC_IsEnabled>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 813f 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	461a      	mov	r2, r3
 8002188:	f7ff f968 	bl	800145c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a8e      	ldr	r2, [pc, #568]	; (80023cc <HAL_ADC_ConfigChannel+0x678>)
 8002192:	4293      	cmp	r3, r2
 8002194:	f040 8130 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x46c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e019      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x4a0>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	bf94      	ite	ls
 80021ee:	2301      	movls	r3, #1
 80021f0:	2300      	movhi	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d079      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x4c0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	069b      	lsls	r3, r3, #26
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	e015      	b.n	8002240 <HAL_ADC_ConfigChannel+0x4ec>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x50c>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	e017      	b.n	8002290 <HAL_ADC_ConfigChannel+0x53c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800226e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002270:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x562>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	051b      	lsls	r3, r3, #20
 80022b4:	e018      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x594>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e003      	b.n	80022da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e8:	430b      	orrs	r3, r1
 80022ea:	e080      	b.n	80023ee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x5b4>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	069b      	lsls	r3, r3, #26
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002306:	e015      	b.n	8002334 <HAL_ADC_ConfigChannel+0x5e0>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e003      	b.n	800232c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x600>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	3301      	adds	r3, #1
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	e017      	b.n	8002384 <HAL_ADC_ConfigChannel+0x630>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	61fb      	str	r3, [r7, #28]
  return result;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800236c:	2320      	movs	r3, #32
 800236e:	e003      	b.n	8002378 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3301      	adds	r3, #1
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	ea42 0103 	orr.w	r1, r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x65c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	3301      	adds	r3, #1
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	3b1e      	subs	r3, #30
 80023a8:	051b      	lsls	r3, r3, #20
 80023aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ae:	e01d      	b.n	80023ec <HAL_ADC_ConfigChannel+0x698>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	613b      	str	r3, [r7, #16]
  return result;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e005      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x684>
 80023cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 021f 	and.w	r2, r3, #31
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	051b      	lsls	r3, r3, #20
 80023e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ec:	430b      	orrs	r3, r1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6892      	ldr	r2, [r2, #8]
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff f807 	bl	8001406 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_ADC_ConfigChannel+0x7a0>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06c      	beq.n	80024de <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002404:	483c      	ldr	r0, [pc, #240]	; (80024f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002406:	f7fe ff49 	bl	800129c <LL_ADC_GetCommonPathInternalCh>
 800240a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <HAL_ADC_ConfigChannel+0x7a8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d127      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d121      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_ADC_ConfigChannel+0x7ac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d157      	bne.n	80024de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002436:	4619      	mov	r1, r3
 8002438:	482f      	ldr	r0, [pc, #188]	; (80024f8 <HAL_ADC_ConfigChannel+0x7a4>)
 800243a:	f7fe ff1c 	bl	8001276 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_ADC_ConfigChannel+0x7b0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	4a30      	ldr	r2, [pc, #192]	; (8002508 <HAL_ADC_ConfigChannel+0x7b4>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002466:	e03a      	b.n	80024de <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_ADC_ConfigChannel+0x7b8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d113      	bne.n	800249a <HAL_ADC_ConfigChannel+0x746>
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_ADC_ConfigChannel+0x7ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002490:	4619      	mov	r1, r3
 8002492:	4819      	ldr	r0, [pc, #100]	; (80024f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002494:	f7fe feef 	bl	8001276 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002498:	e021      	b.n	80024de <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_ADC_ConfigChannel+0x7bc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d11c      	bne.n	80024de <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_ADC_ConfigChannel+0x7ac>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <HAL_ADC_ConfigChannel+0x7a4>)
 80024c6:	f7fe fed6 	bl	8001276 <LL_ADC_SetCommonPathInternalCh>
 80024ca:	e008      	b.n	80024de <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	37d8      	adds	r7, #216	; 0xd8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	80080000 	.word	0x80080000
 80024f8:	50040300 	.word	0x50040300
 80024fc:	c7520000 	.word	0xc7520000
 8002500:	50040000 	.word	0x50040000
 8002504:	20000000 	.word	0x20000000
 8002508:	053e2d63 	.word	0x053e2d63
 800250c:	cb840000 	.word	0xcb840000
 8002510:	80000001 	.word	0x80000001

08002514 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f81f 	bl	8001568 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d169      	bne.n	8002604 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <ADC_Enable+0xfc>)
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e055      	b.n	8002606 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe ffee 	bl	8001540 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002564:	482b      	ldr	r0, [pc, #172]	; (8002614 <ADC_Enable+0x100>)
 8002566:	f7fe fe99 	bl	800129c <LL_ADC_GetCommonPathInternalCh>
 800256a:	4603      	mov	r3, r0
 800256c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <ADC_Enable+0x104>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	4a28      	ldr	r2, [pc, #160]	; (800261c <ADC_Enable+0x108>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800258e:	e002      	b.n	8002596 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3b01      	subs	r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800259c:	f7fe fe4c 	bl	8001238 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a2:	e028      	b.n	80025f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe ffdd 	bl	8001568 <LL_ADC_IsEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe ffc1 	bl	8001540 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025be:	f7fe fe3b 	bl	8001238 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d914      	bls.n	80025f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d00d      	beq.n	80025f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d1cf      	bne.n	80025a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	8000003f 	.word	0x8000003f
 8002614:	50040300 	.word	0x50040300
 8002618:	20000000 	.word	0x20000000
 800261c:	053e2d63 	.word	0x053e2d63

08002620 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002636:	2b00      	cmp	r3, #0
 8002638:	d14b      	bne.n	80026d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d021      	beq.n	8002698 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fe82 	bl	8001362 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d032      	beq.n	80026ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12b      	bne.n	80026ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11f      	bne.n	80026ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
 8002696:	e018      	b.n	80026ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d111      	bne.n	80026ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fb1a 	bl	8001d04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026d0:	e00e      	b.n	80026f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff fb2e 	bl	8001d40 <HAL_ADC_ErrorCallback>
}
 80026e4:	e004      	b.n	80026f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fb06 	bl	8001d18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff fb00 	bl	8001d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db0b      	blt.n	800283a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <__NVIC_EnableIRQ+0x38>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2001      	movs	r0, #1
 8002832:	fa00 f202 	lsl.w	r2, r0, r2
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d301      	bcc.n	800291e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <SysTick_Config+0x40>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002926:	210f      	movs	r1, #15
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	f7ff ff8e 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SysTick_Config+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SysTick_Config+0x40>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff29 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002974:	f7ff ff3e 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff ff8e 	bl	80028a0 <NVIC_EncodePriority>
 8002984:	4602      	mov	r2, r0
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff5d 	bl	800284c <__NVIC_SetPriority>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff31 	bl	8002810 <__NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffa2 	bl	8002908 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e098      	b.n	8002b14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_DMA_Init+0x150>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80f      	bhi.n	8002a0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_DMA_Init+0x154>)
 80029f6:	4413      	add	r3, r2
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_DMA_Init+0x158>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_DMA_Init+0x15c>)
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a0c:	e00e      	b.n	8002a2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_DMA_Init+0x160>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <HAL_DMA_Init+0x158>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <HAL_DMA_Init+0x164>)
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a86:	d039      	beq.n	8002afc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_DMA_Init+0x15c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 031c 	and.w	r3, r3, #28
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4924      	ldr	r1, [pc, #144]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 031c 	and.w	r3, r3, #28
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	491d      	ldr	r1, [pc, #116]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e019      	b.n	8002afc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 031c 	and.w	r3, r3, #28
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4917      	ldr	r1, [pc, #92]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 031c 	and.w	r3, r3, #28
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	4911      	ldr	r1, [pc, #68]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40020407 	.word	0x40020407
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	bffdfbf8 	.word	0xbffdfbf8
 8002b34:	40020400 	.word	0x40020400
 8002b38:	400200a8 	.word	0x400200a8
 8002b3c:	400204a8 	.word	0x400204a8

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Start_IT+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e04b      	b.n	8002bf8 <HAL_DMA_Start_IT+0xb8>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13a      	bne.n	8002bea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f95f 	bl	8002e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 020e 	orr.w	r2, r2, #14
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e00f      	b.n	8002bd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 020a 	orr.w	r2, r2, #10
 8002bd6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e022      	b.n	8002c70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 020e 	bic.w	r2, r2, #14
 8002c38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f003 021c 	and.w	r2, r3, #28
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d005      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2204      	movs	r2, #4
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e029      	b.n	8002cf4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 020e 	bic.w	r2, r2, #14
 8002cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f003 021c 	and.w	r2, r3, #28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
    }
  }
  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 031c 	and.w	r3, r3, #28
 8002d1e:	2204      	movs	r2, #4
 8002d20:	409a      	lsls	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d026      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x7a>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d021      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 021c 	and.w	r2, r3, #28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2104      	movs	r1, #4
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d071      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	e06c      	b.n	8002e52 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f003 031c 	and.w	r3, r3, #28
 8002d80:	2202      	movs	r2, #2
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02e      	beq.n	8002dea <HAL_DMA_IRQHandler+0xec>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d029      	beq.n	8002dea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020a 	bic.w	r2, r2, #10
 8002db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 021c 	and.w	r2, r3, #28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2102      	movs	r1, #2
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d038      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002de8:	e033      	b.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f003 031c 	and.w	r3, r3, #28
 8002df2:	2208      	movs	r2, #8
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02a      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d025      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 020e 	bic.w	r2, r2, #14
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f003 021c 	and.w	r2, r3, #28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
}
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f003 021c 	and.w	r2, r3, #28
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d108      	bne.n	8002ea0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e9e:	e007      	b.n	8002eb0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e148      	b.n	800315e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 813a 	beq.w	8003158 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d005      	beq.n	8002efc <HAL_GPIO_Init+0x40>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d130      	bne.n	8002f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f32:	2201      	movs	r2, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0201 	and.w	r2, r3, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d017      	beq.n	8002f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d123      	bne.n	8002fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	6939      	ldr	r1, [r7, #16]
 8002fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8094 	beq.w	8003158 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003030:	4b52      	ldr	r3, [pc, #328]	; (800317c <HAL_GPIO_Init+0x2c0>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	4a51      	ldr	r2, [pc, #324]	; (800317c <HAL_GPIO_Init+0x2c0>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6613      	str	r3, [r2, #96]	; 0x60
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_GPIO_Init+0x2c0>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003048:	4a4d      	ldr	r2, [pc, #308]	; (8003180 <HAL_GPIO_Init+0x2c4>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003072:	d00d      	beq.n	8003090 <HAL_GPIO_Init+0x1d4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_GPIO_Init+0x2c8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <HAL_GPIO_Init+0x1d0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a42      	ldr	r2, [pc, #264]	; (8003188 <HAL_GPIO_Init+0x2cc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_GPIO_Init+0x1cc>
 8003084:	2302      	movs	r3, #2
 8003086:	e004      	b.n	8003092 <HAL_GPIO_Init+0x1d6>
 8003088:	2307      	movs	r3, #7
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x1d6>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_GPIO_Init+0x1d6>
 8003090:	2300      	movs	r3, #0
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	f002 0203 	and.w	r2, r2, #3
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4093      	lsls	r3, r2
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a2:	4937      	ldr	r1, [pc, #220]	; (8003180 <HAL_GPIO_Init+0x2c4>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d4:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_GPIO_Init+0x2d0>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030fe:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_GPIO_Init+0x2d0>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_GPIO_Init+0x2d0>)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f aeaf 	bne.w	8002ecc <HAL_GPIO_Init+0x10>
  }
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40007000 	.word	0x40007000

080031e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40007000 	.word	0x40007000

080031fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320a:	d130      	bne.n	800326e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800320c:	4b23      	ldr	r3, [pc, #140]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d038      	beq.n	800328c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2232      	movs	r2, #50	; 0x32
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0c9b      	lsrs	r3, r3, #18
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003240:	e002      	b.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b01      	subs	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	d102      	bne.n	800325c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f2      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d110      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e00f      	b.n	800328e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d007      	beq.n	800328c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003284:	4a05      	ldr	r2, [pc, #20]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40007000 	.word	0x40007000
 80032a0:	20000000 	.word	0x20000000
 80032a4:	431bde83 	.word	0x431bde83

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f000 bc02 	b.w	8003ac0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032bc:	4b96      	ldr	r3, [pc, #600]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c6:	4b94      	ldr	r3, [pc, #592]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80e4 	beq.w	80034a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4c>
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	f040 808b 	bne.w	8003402 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	f040 8087 	bne.w	8003402 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f4:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_OscConfig+0x64>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e3d9      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1a      	ldr	r2, [r3, #32]
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_RCC_OscConfig+0x7e>
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003324:	e005      	b.n	8003332 <HAL_RCC_OscConfig+0x8a>
 8003326:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003332:	4293      	cmp	r3, r2
 8003334:	d223      	bcs.n	800337e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fd8c 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e3ba      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a72      	ldr	r2, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	496d      	ldr	r1, [pc, #436]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003368:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4968      	ldr	r1, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
 800337c:	e025      	b.n	80033ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337e:	4b66      	ldr	r3, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a65      	ldr	r2, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4960      	ldr	r1, [pc, #384]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339c:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	495b      	ldr	r1, [pc, #364]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd4c 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e37a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ca:	f000 fc81 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b51      	ldr	r3, [pc, #324]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4950      	ldr	r1, [pc, #320]	; (800351c <HAL_RCC_OscConfig+0x274>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <HAL_RCC_OscConfig+0x278>)
 80033e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_OscConfig+0x27c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fed2 	bl	8001198 <HAL_InitTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d052      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	e35e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d032      	beq.n	8003470 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003416:	f7fd ff0f 	bl	8001238 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800341e:	f7fd ff0b 	bl	8001238 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e347      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003430:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4930      	ldr	r1, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	492b      	ldr	r1, [pc, #172]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
 800346e:	e01a      	b.n	80034a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800347c:	f7fd fedc 	bl	8001238 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003484:	f7fd fed8 	bl	8001238 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e314      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1dc>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d073      	beq.n	800359a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_OscConfig+0x21c>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d10e      	bne.n	80034dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d063      	beq.n	8003598 <HAL_RCC_OscConfig+0x2f0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d15f      	bne.n	8003598 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e2f1      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x24c>
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e025      	b.n	8003540 <HAL_RCC_OscConfig+0x298>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034fc:	d114      	bne.n	8003528 <HAL_RCC_OscConfig+0x280>
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a02      	ldr	r2, [pc, #8]	; (8003518 <HAL_RCC_OscConfig+0x270>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e013      	b.n	8003540 <HAL_RCC_OscConfig+0x298>
 8003518:	40021000 	.word	0x40021000
 800351c:	0800650c 	.word	0x0800650c
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004
 8003528:	4ba0      	ldr	r3, [pc, #640]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a9f      	ldr	r2, [pc, #636]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b9d      	ldr	r3, [pc, #628]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a9c      	ldr	r2, [pc, #624]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd fe76 	bl	8001238 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fd fe72 	bl	8001238 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e2ae      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	4b92      	ldr	r3, [pc, #584]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x2a8>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fe62 	bl	8001238 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fd fe5e 	bl	8001238 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e29a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800358a:	4b88      	ldr	r3, [pc, #544]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x2d0>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d060      	beq.n	8003668 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x310>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d116      	bne.n	80035e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b8:	4b7c      	ldr	r3, [pc, #496]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_OscConfig+0x328>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e277      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b76      	ldr	r3, [pc, #472]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	4973      	ldr	r1, [pc, #460]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e4:	e040      	b.n	8003668 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d023      	beq.n	8003636 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6e      	ldr	r2, [pc, #440]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fe1d 	bl	8001238 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003602:	f7fd fe19 	bl	8001238 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e255      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003614:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003620:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	495f      	ldr	r1, [pc, #380]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e018      	b.n	8003668 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fd fdf9 	bl	8001238 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fd fdf5 	bl	8001238 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e231      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d03c      	beq.n	80036ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01c      	beq.n	80036b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fd fdd4 	bl	8001238 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7fd fdd0 	bl	8001238 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e20c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ef      	beq.n	8003694 <HAL_RCC_OscConfig+0x3ec>
 80036b4:	e01b      	b.n	80036ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b6:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80036b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036bc:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7fd fdb7 	bl	8001238 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ce:	f7fd fdb3 	bl	8001238 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e1ef      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ef      	bne.n	80036ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80a6 	beq.w	8003848 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370c:	4b27      	ldr	r3, [pc, #156]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003724:	2301      	movs	r3, #1
 8003726:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x508>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d118      	bne.n	8003766 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_OscConfig+0x508>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <HAL_RCC_OscConfig+0x508>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003740:	f7fd fd7a 	bl	8001238 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fd fd76 	bl	8001238 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1b2      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <HAL_RCC_OscConfig+0x508>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d108      	bne.n	8003780 <HAL_RCC_OscConfig+0x4d8>
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377e:	e029      	b.n	80037d4 <HAL_RCC_OscConfig+0x52c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d115      	bne.n	80037b4 <HAL_RCC_OscConfig+0x50c>
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a03      	ldr	r2, [pc, #12]	; (80037ac <HAL_RCC_OscConfig+0x504>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a8:	e014      	b.n	80037d4 <HAL_RCC_OscConfig+0x52c>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
 80037b4:	4b9a      	ldr	r3, [pc, #616]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a99      	ldr	r2, [pc, #612]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c4:	4b96      	ldr	r3, [pc, #600]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a95      	ldr	r2, [pc, #596]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d016      	beq.n	800380a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fd2c 	bl	8001238 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7fd fd28 	bl	8001238 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e162      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ed      	beq.n	80037e4 <HAL_RCC_OscConfig+0x53c>
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fd fd15 	bl	8001238 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fd fd11 	bl	8001238 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e14b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003828:	4b7d      	ldr	r3, [pc, #500]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ed      	bne.n	8003812 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b78      	ldr	r3, [pc, #480]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a77      	ldr	r2, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03c      	beq.n	80038ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800385c:	4b70      	ldr	r3, [pc, #448]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800385e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003862:	4a6f      	ldr	r2, [pc, #444]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd fce4 	bl	8001238 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003874:	f7fd fce0 	bl	8001238 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e11c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003886:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ef      	beq.n	8003874 <HAL_RCC_OscConfig+0x5cc>
 8003894:	e01b      	b.n	80038ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800389c:	4a60      	ldr	r2, [pc, #384]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fd fcc7 	bl	8001238 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ae:	f7fd fcc3 	bl	8001238 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0ff      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038c0:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80038c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ef      	bne.n	80038ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80f3 	beq.w	8003abe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	2b02      	cmp	r3, #2
 80038de:	f040 80c9 	bne.w	8003a74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d12c      	bne.n	8003950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	3b01      	subs	r3, #1
 8003902:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d123      	bne.n	8003950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d11b      	bne.n	8003950 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d113      	bne.n	8003950 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d109      	bne.n	8003950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	3b01      	subs	r3, #1
 800394a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d06b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d062      	beq.n	8003a1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003956:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0ac      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800396c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003970:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003972:	f7fd fc61 	bl	8001238 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fd fc5d 	bl	8001238 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e099      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_RCC_OscConfig+0x77c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	4311      	orrs	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039b2:	0212      	lsls	r2, r2, #8
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ba:	0852      	lsrs	r2, r2, #1
 80039bc:	3a01      	subs	r2, #1
 80039be:	0552      	lsls	r2, r2, #21
 80039c0:	4311      	orrs	r1, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039c6:	0852      	lsrs	r2, r2, #1
 80039c8:	3a01      	subs	r2, #1
 80039ca:	0652      	lsls	r2, r2, #25
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4912      	ldr	r1, [pc, #72]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0f      	ldr	r2, [pc, #60]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f4:	f7fd fc20 	bl	8001238 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fc1c 	bl	8001238 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e058      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_OscConfig+0x778>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1a:	e050      	b.n	8003abe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e04f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d144      	bne.n	8003abe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a40:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a4c:	f7fd fbf4 	bl	8001238 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fd fbf0 	bl	8001238 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e02c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x7ac>
 8003a72:	e024      	b.n	8003abe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d01f      	beq.n	8003aba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd fbd7 	bl	8001238 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd fbd3 	bl	8001238 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e00f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4905      	ldr	r1, [pc, #20]	; (8003ac8 <HAL_RCC_OscConfig+0x820>)
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_OscConfig+0x824>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
 8003ab8:	e001      	b.n	8003abe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	feeefffc 	.word	0xfeeefffc

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0e7      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b75      	ldr	r3, [pc, #468]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d910      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 0207 	bic.w	r2, r3, #7
 8003afa:	4970      	ldr	r1, [pc, #448]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0cf      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d908      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4960      	ldr	r1, [pc, #384]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d04c      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0a6      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d115      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e09a      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b86:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e08e      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b96:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e086      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4943      	ldr	r1, [pc, #268]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fb3e 	bl	8001238 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd fb3a 	bl	8001238 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e06e      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d208      	bcs.n	8003c16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	492b      	ldr	r1, [pc, #172]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d210      	bcs.n	8003c46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 0207 	bic.w	r2, r3, #7
 8003c2c:	4923      	ldr	r1, [pc, #140]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c34:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_RCC_ClockConfig+0x1ec>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e036      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4918      	ldr	r1, [pc, #96]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c84:	f000 f824 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_ClockConfig+0x1fc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fa75 	bl	8001198 <HAL_InitTick>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40022000 	.word	0x40022000
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800650c 	.word	0x0800650c
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d121      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d11e      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e005      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d102      	bne.n	8003d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	e004      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d134      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0xac>
 8003d74:	e005      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d78:	617b      	str	r3, [r7, #20]
      break;
 8003d7a:	e005      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7e:	617b      	str	r3, [r7, #20]
      break;
 8003d80:	e002      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	617b      	str	r3, [r7, #20]
      break;
 8003d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	3301      	adds	r3, #1
 8003d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	fb03 f202 	mul.w	r2, r3, r2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	0e5b      	lsrs	r3, r3, #25
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	3301      	adds	r3, #1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3724      	adds	r7, #36	; 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08006524 	.word	0x08006524
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800651c 	.word	0x0800651c

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e30:	f7ff ffda 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0adb      	lsrs	r3, r3, #11
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4904      	ldr	r1, [pc, #16]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	0800651c 	.word	0x0800651c

08003e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e70:	f7ff f9b6 	bl	80031e0 <HAL_PWREx_GetVoltageRange>
 8003e74:	6178      	str	r0, [r7, #20]
 8003e76:	e014      	b.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6593      	str	r3, [r2, #88]	; 0x58
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e90:	f7ff f9a6 	bl	80031e0 <HAL_PWREx_GetVoltageRange>
 8003e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d10b      	bne.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d919      	bls.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2ba0      	cmp	r3, #160	; 0xa0
 8003eb4:	d902      	bls.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e013      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e010      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d902      	bls.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec8:	2303      	movs	r3, #3
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e00a      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d102      	bne.n	8003eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e004      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b70      	cmp	r3, #112	; 0x70
 8003ede:	d101      	bne.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 0207 	bic.w	r2, r3, #7
 8003eec:	4909      	ldr	r1, [pc, #36]	; (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40022000 	.word	0x40022000

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f20:	2300      	movs	r3, #0
 8003f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f24:	2300      	movs	r3, #0
 8003f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d031      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f3c:	d01a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f42:	d814      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4c:	d10f      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a5c      	ldr	r2, [pc, #368]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5a:	e00c      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f9de 	bl	8004324 <RCCEx_PLLSAI1_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	74fb      	strb	r3, [r7, #19]
      break;
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f7c:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	494e      	ldr	r1, [pc, #312]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 809e 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4a3f      	ldr	r2, [pc, #252]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6593      	str	r3, [r2, #88]	; 0x58
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a39      	ldr	r2, [pc, #228]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd f926 	bl	8001238 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fee:	e009      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd f922 	bl	8001238 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d902      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	74fb      	strb	r3, [r7, #19]
        break;
 8004002:	e005      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004004:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ef      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d15a      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01e      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	429a      	cmp	r2, r3
 8004030:	d019      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800405e:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd f8e2 	bl	8001238 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	e00b      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd f8de 	bl	8001238 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d902      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	74fb      	strb	r3, [r7, #19]
            break;
 800408e:	e006      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ec      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	4904      	ldr	r1, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d0:	7c7b      	ldrb	r3, [r7, #17]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d6:	4b8a      	ldr	r3, [pc, #552]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	4a89      	ldr	r2, [pc, #548]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ee:	4b84      	ldr	r3, [pc, #528]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4980      	ldr	r1, [pc, #512]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004110:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 020c 	bic.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	4978      	ldr	r1, [pc, #480]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004132:	4b73      	ldr	r3, [pc, #460]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	496f      	ldr	r1, [pc, #444]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004154:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	4967      	ldr	r1, [pc, #412]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004176:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	495e      	ldr	r1, [pc, #376]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4956      	ldr	r1, [pc, #344]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d028      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041dc:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	4945      	ldr	r1, [pc, #276]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041fa:	d106      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004206:	60d3      	str	r3, [r2, #12]
 8004208:	e011      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004212:	d10c      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f882 	bl	8004324 <RCCEx_PLLSAI1_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d028      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	492d      	ldr	r1, [pc, #180]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004258:	d106      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004264:	60d3      	str	r3, [r2, #12]
 8004266:	e011      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004270:	d10c      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f853 	bl	8004324 <RCCEx_PLLSAI1_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042b6:	d10c      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f830 	bl	8004324 <RCCEx_PLLSAI1_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000

08004324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004332:	4b74      	ldr	r3, [pc, #464]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d018      	beq.n	8004370 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800433e:	4b71      	ldr	r3, [pc, #452]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0203 	and.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d10d      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
       ||
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004356:	4b6b      	ldr	r3, [pc, #428]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
       ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d047      	beq.n	80043fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e044      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d018      	beq.n	80043aa <RCCEx_PLLSAI1_Config+0x86>
 8004378:	2b03      	cmp	r3, #3
 800437a:	d825      	bhi.n	80043c8 <RCCEx_PLLSAI1_Config+0xa4>
 800437c:	2b01      	cmp	r3, #1
 800437e:	d002      	beq.n	8004386 <RCCEx_PLLSAI1_Config+0x62>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d009      	beq.n	8004398 <RCCEx_PLLSAI1_Config+0x74>
 8004384:	e020      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11d      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004396:	e01a      	b.n	80043ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004398:	4b5a      	ldr	r3, [pc, #360]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a8:	e013      	b.n	80043d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043b6:	4b53      	ldr	r3, [pc, #332]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043c6:	e006      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e004      	b.n	80043d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043de:	4b49      	ldr	r3, [pc, #292]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	430b      	orrs	r3, r1
 80043f4:	4943      	ldr	r1, [pc, #268]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d17c      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004400:	4b40      	ldr	r3, [pc, #256]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3f      	ldr	r2, [pc, #252]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440c:	f7fc ff14 	bl	8001238 <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004412:	e009      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004414:	f7fc ff10 	bl	8001238 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d902      	bls.n	8004428 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	73fb      	strb	r3, [r7, #15]
        break;
 8004426:	e005      	b.n	8004434 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ef      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d15f      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d110      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004440:	4b30      	ldr	r3, [pc, #192]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004448:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6892      	ldr	r2, [r2, #8]
 8004450:	0211      	lsls	r1, r2, #8
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	06d2      	lsls	r2, r2, #27
 8004458:	430a      	orrs	r2, r1
 800445a:	492a      	ldr	r1, [pc, #168]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]
 8004460:	e027      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d112      	bne.n	800448e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6912      	ldr	r2, [r2, #16]
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0552      	lsls	r2, r2, #21
 8004484:	430a      	orrs	r2, r1
 8004486:	491f      	ldr	r1, [pc, #124]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
 800448c:	e011      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004496:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6892      	ldr	r2, [r2, #8]
 800449e:	0211      	lsls	r1, r2, #8
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6952      	ldr	r2, [r2, #20]
 80044a4:	0852      	lsrs	r2, r2, #1
 80044a6:	3a01      	subs	r2, #1
 80044a8:	0652      	lsls	r2, r2, #25
 80044aa:	430a      	orrs	r2, r1
 80044ac:	4915      	ldr	r1, [pc, #84]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a13      	ldr	r2, [pc, #76]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fc febb 	bl	8001238 <HAL_GetTick>
 80044c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044c4:	e009      	b.n	80044da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c6:	f7fc feb7 	bl	8001238 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	73fb      	strb	r3, [r7, #15]
          break;
 80044d8:	e005      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e049      	b.n	80045ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fcce 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fb48 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e049      	b.n	800465c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fc fc57 	bl	8000e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f000 faf1 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_TIM_PWM_Start+0x24>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e03c      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d109      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x3e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	e02f      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d109      	bne.n	80046bc <HAL_TIM_PWM_Start+0x58>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e022      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d109      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x72>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e015      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x8c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e008      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07e      	b.n	8004808 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xb6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	e023      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start+0xc6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	e01b      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0xd6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004738:	e013      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0xe6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004748:	e00b      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xf6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	e003      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fdb2 	bl	80052d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <HAL_TIM_PWM_Start+0x1ac>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIM_PWM_Start+0x12a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a25      	ldr	r2, [pc, #148]	; (8004814 <HAL_TIM_PWM_Start+0x1b0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_PWM_Start+0x12a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a23      	ldr	r2, [pc, #140]	; (8004818 <HAL_TIM_PWM_Start+0x1b4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_TIM_PWM_Start+0x12e>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_TIM_PWM_Start+0x130>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_PWM_Start+0x1ac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x162>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d004      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x162>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <HAL_TIM_PWM_Start+0x1b0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d115      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_TIM_PWM_Start+0x1b8>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d015      	beq.n	8004804 <HAL_TIM_PWM_Start+0x1a0>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d011      	beq.n	8004804 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	e008      	b.n	8004804 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e000      	b.n	8004806 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800483a:	2302      	movs	r3, #2
 800483c:	e0ff      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b14      	cmp	r3, #20
 800484a:	f200 80f0 	bhi.w	8004a2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	080048a9 	.word	0x080048a9
 8004858:	08004a2f 	.word	0x08004a2f
 800485c:	08004a2f 	.word	0x08004a2f
 8004860:	08004a2f 	.word	0x08004a2f
 8004864:	080048e9 	.word	0x080048e9
 8004868:	08004a2f 	.word	0x08004a2f
 800486c:	08004a2f 	.word	0x08004a2f
 8004870:	08004a2f 	.word	0x08004a2f
 8004874:	0800492b 	.word	0x0800492b
 8004878:	08004a2f 	.word	0x08004a2f
 800487c:	08004a2f 	.word	0x08004a2f
 8004880:	08004a2f 	.word	0x08004a2f
 8004884:	0800496b 	.word	0x0800496b
 8004888:	08004a2f 	.word	0x08004a2f
 800488c:	08004a2f 	.word	0x08004a2f
 8004890:	08004a2f 	.word	0x08004a2f
 8004894:	080049ad 	.word	0x080049ad
 8004898:	08004a2f 	.word	0x08004a2f
 800489c:	08004a2f 	.word	0x08004a2f
 80048a0:	08004a2f 	.word	0x08004a2f
 80048a4:	080049ed 	.word	0x080049ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f9f8 	bl	8004ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0204 	bic.w	r2, r2, #4
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	619a      	str	r2, [r3, #24]
      break;
 80048e6:	e0a5      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fa54 	bl	8004d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6999      	ldr	r1, [r3, #24]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	021a      	lsls	r2, r3, #8
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]
      break;
 8004928:	e084      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 faad 	bl	8004e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0208 	orr.w	r2, r2, #8
 8004944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0204 	bic.w	r2, r2, #4
 8004954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	61da      	str	r2, [r3, #28]
      break;
 8004968:	e064      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fb05 	bl	8004f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69d9      	ldr	r1, [r3, #28]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	61da      	str	r2, [r3, #28]
      break;
 80049aa:	e043      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fb42 	bl	800503c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049ea:	e023      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb7a 	bl	80050ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a2c:	e002      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
      break;
 8004a32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0b6      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xd8>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	f000 8086 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x176>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ab8:	2b70      	cmp	r3, #112	; 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xaa>
 8004abc:	2b70      	cmp	r3, #112	; 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x11e>
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xfe>
 8004acc:	2b50      	cmp	r3, #80	; 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x13e>
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 fbc7 	bl	8005294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
      break;
 8004b1e:	e04f      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 fbb0 	bl	8005294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
      break;
 8004b44:	e03c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fb24 	bl	80051a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	; 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb7d 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004b64:	e02c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 fb43 	bl	80051fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	; 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fb6d 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004b84:	e01c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fb04 	bl	80051a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fb5d 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e00c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fb54 	bl	800525e <TIM_ITRx_SetConfig>
      break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x20>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <TIM_Base_SetConfig+0xc4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0xa0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <TIM_Base_SetConfig+0xc4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	615a      	str	r2, [r3, #20]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400

08004ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0302 	bic.w	r3, r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <TIM_OC1_SetConfig+0xec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_OC1_SetConfig+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <TIM_OC1_SetConfig+0xf0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC1_SetConfig+0x70>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <TIM_OC1_SetConfig+0xf4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10c      	bne.n	8004d2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0308 	bic.w	r3, r3, #8
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <TIM_OC1_SetConfig+0xec>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_OC1_SetConfig+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <TIM_OC1_SetConfig+0xf0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC1_SetConfig+0xa2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC1_SetConfig+0xf4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d111      	bne.n	8004d6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	621a      	str	r2, [r3, #32]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40014400 	.word	0x40014400

08004d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <TIM_OC2_SetConfig+0xe8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10d      	bne.n	8004e1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <TIM_OC2_SetConfig+0xe8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_OC2_SetConfig+0x98>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <TIM_OC2_SetConfig+0xec>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC2_SetConfig+0x98>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <TIM_OC2_SetConfig+0xf0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400

08004e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10d      	bne.n	8004f0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <TIM_OC3_SetConfig+0xe4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_OC3_SetConfig+0x96>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <TIM_OC3_SetConfig+0xe8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x96>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <TIM_OC3_SetConfig+0xec>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d113      	bne.n	8004f4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400

08004f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	031b      	lsls	r3, r3, #12
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a14      	ldr	r2, [pc, #80]	; (8005030 <TIM_OC4_SetConfig+0xb0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC4_SetConfig+0x74>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <TIM_OC4_SetConfig+0xb4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC4_SetConfig+0x74>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <TIM_OC4_SetConfig+0xb8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d109      	bne.n	8005008 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400

0800503c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <TIM_OC5_SetConfig+0xa4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_OC5_SetConfig+0x6a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <TIM_OC5_SetConfig+0xa8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_OC5_SetConfig+0x6a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <TIM_OC5_SetConfig+0xac>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d109      	bne.n	80050ba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400

080050ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	051b      	lsls	r3, r3, #20
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a14      	ldr	r2, [pc, #80]	; (8005194 <TIM_OC6_SetConfig+0xa8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_OC6_SetConfig+0x6c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <TIM_OC6_SetConfig+0xac>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC6_SetConfig+0x6c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <TIM_OC6_SetConfig+0xb0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400

080051a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0201 	bic.w	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f023 030a 	bic.w	r3, r3, #10
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0210 	bic.w	r2, r3, #16
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800523a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	f043 0307 	orr.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2201      	movs	r2, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	401a      	ands	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e04f      	b.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d108      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005368:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d004      	beq.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10c      	bne.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40014000 	.word	0x40014000

080053ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e060      	b.n	80054ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d115      	bne.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	051b      	lsls	r3, r3, #20
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00

080054dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e040      	b.n	8005570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb fd3c 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb2e 	bl	8005b7c <UART_SetConfig>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e022      	b.n	8005570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fd4e 	bl	8005fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fdd5 	bl	8006118 <UART_CheckIdleState>
 800556e:	4603      	mov	r3, r0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b0ba      	sub	sp, #232	; 0xe8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800559e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80055a6:	4013      	ands	r3, r2
 80055a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d115      	bne.n	80055e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 82a6 	beq.w	8005b22 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
      }
      return;
 80055de:	e2a0      	b.n	8005b22 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80055e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8117 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_UART_IRQHandler+0x298>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 810a 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2202      	movs	r2, #2
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565a:	f043 0204 	orr.w	r2, r3, #4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2204      	movs	r2, #4
 8005682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568a:	f043 0202 	orr.w	r2, r3, #2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2208      	movs	r2, #8
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c6:	f043 0208 	orr.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 820c 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04f      	beq.n	80057fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fde9 	bl	8006332 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d141      	bne.n	80057f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800579a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800579e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1d9      	bne.n	800576e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d013      	beq.n	80057ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a13      	ldr	r2, [pc, #76]	; (8005814 <HAL_UART_IRQHandler+0x29c>)
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fa54 	bl	8002c7c <HAL_DMA_Abort_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00f      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9b0 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00b      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9ac 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e007      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9a8 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005808:	e18d      	b.n	8005b26 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580a:	bf00      	nop
    return;
 800580c:	e18b      	b.n	8005b26 <HAL_UART_IRQHandler+0x5ae>
 800580e:	bf00      	nop
 8005810:	04000120 	.word	0x04000120
 8005814:	080063f9 	.word	0x080063f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 8146 	bne.w	8005aae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 813f 	beq.w	8005aae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8138 	beq.w	8005aae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	f040 80b4 	bne.w	80059be <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 815f 	beq.w	8005b2a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005876:	429a      	cmp	r2, r3
 8005878:	f080 8157 	bcs.w	8005b2a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 8085 	bne.w	80059a2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1da      	bne.n	8005898 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800590a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800590e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e1      	bne.n	80058e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800592e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e3      	bne.n	800591e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005984:	65bb      	str	r3, [r7, #88]	; 0x58
 8005986:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800598a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e4      	bne.n	8005962 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4618      	mov	r0, r3
 800599e:	f7fd f92f 	bl	8002c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8d4 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059bc:	e0b5      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80a7 	beq.w	8005b2e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80a2 	beq.w	8005b2e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a44:	633a      	str	r2, [r7, #48]	; 0x30
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e4      	bne.n	8005a6a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f85c 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aac:	e03f      	b.n	8005b2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x560>
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fcd1 	bl	8006478 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ad6:	e02d      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00e      	beq.n	8005b02 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    }
    return;
 8005b00:	e017      	b.n	8005b32 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d012      	beq.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
 8005b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fc82 	bl	8006424 <UART_EndTransmit_IT>
    return;
 8005b20:	e008      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b22:	bf00      	nop
 8005b24:	e006      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b26:	bf00      	nop
 8005b28:	e004      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b34:	37e8      	adds	r7, #232	; 0xe8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b80:	b08a      	sub	sp, #40	; 0x28
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4bb4      	ldr	r3, [pc, #720]	; (8005e7c <UART_SetConfig+0x300>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4aa9      	ldr	r2, [pc, #676]	; (8005e80 <UART_SetConfig+0x304>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be4:	4313      	orrs	r3, r2
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4aa0      	ldr	r2, [pc, #640]	; (8005e84 <UART_SetConfig+0x308>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d126      	bne.n	8005c54 <UART_SetConfig+0xd8>
 8005c06:	4ba0      	ldr	r3, [pc, #640]	; (8005e88 <UART_SetConfig+0x30c>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d81b      	bhi.n	8005c4c <UART_SetConfig+0xd0>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0xa0>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c3d 	.word	0x08005c3d
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c32:	e080      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e07c      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c42:	e078      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4a:	e074      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c52:	e070      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a8c      	ldr	r2, [pc, #560]	; (8005e8c <UART_SetConfig+0x310>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d138      	bne.n	8005cd0 <UART_SetConfig+0x154>
 8005c5e:	4b8a      	ldr	r3, [pc, #552]	; (8005e88 <UART_SetConfig+0x30c>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d82d      	bhi.n	8005cc8 <UART_SetConfig+0x14c>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0xf8>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005cc9 	.word	0x08005cc9
 8005c7c:	08005cc9 	.word	0x08005cc9
 8005c80:	08005cc9 	.word	0x08005cc9
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cc9 	.word	0x08005cc9
 8005c8c:	08005cc9 	.word	0x08005cc9
 8005c90:	08005cc9 	.word	0x08005cc9
 8005c94:	08005cb1 	.word	0x08005cb1
 8005c98:	08005cc9 	.word	0x08005cc9
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cc1 	.word	0x08005cc1
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e042      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e03e      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e03a      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e036      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cce:	e032      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	; (8005e80 <UART_SetConfig+0x304>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d12a      	bne.n	8005d30 <UART_SetConfig+0x1b4>
 8005cda:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <UART_SetConfig+0x30c>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce8:	d01a      	beq.n	8005d20 <UART_SetConfig+0x1a4>
 8005cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cee:	d81b      	bhi.n	8005d28 <UART_SetConfig+0x1ac>
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf4:	d00c      	beq.n	8005d10 <UART_SetConfig+0x194>
 8005cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfa:	d815      	bhi.n	8005d28 <UART_SetConfig+0x1ac>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <UART_SetConfig+0x18c>
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d008      	beq.n	8005d18 <UART_SetConfig+0x19c>
 8005d06:	e00f      	b.n	8005d28 <UART_SetConfig+0x1ac>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0e:	e012      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d16:	e00e      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1e:	e00a      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e006      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e002      	b.n	8005d36 <UART_SetConfig+0x1ba>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a51      	ldr	r2, [pc, #324]	; (8005e80 <UART_SetConfig+0x304>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d17a      	bne.n	8005e36 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d824      	bhi.n	8005d92 <UART_SetConfig+0x216>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0x1d4>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d93 	.word	0x08005d93
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d93 	.word	0x08005d93
 8005d60:	08005d83 	.word	0x08005d83
 8005d64:	08005d93 	.word	0x08005d93
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005d93 	.word	0x08005d93
 8005d70:	08005d8b 	.word	0x08005d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d74:	f7fe f844 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8005d78:	61f8      	str	r0, [r7, #28]
        break;
 8005d7a:	e010      	b.n	8005d9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b44      	ldr	r3, [pc, #272]	; (8005e90 <UART_SetConfig+0x314>)
 8005d7e:	61fb      	str	r3, [r7, #28]
        break;
 8005d80:	e00d      	b.n	8005d9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d82:	f7fd ffa5 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8005d86:	61f8      	str	r0, [r7, #28]
        break;
 8005d88:	e009      	b.n	8005d9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8e:	61fb      	str	r3, [r7, #28]
        break;
 8005d90:	e005      	b.n	8005d9e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8107 	beq.w	8005fb4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d305      	bcc.n	8005dc2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d903      	bls.n	8005dca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dc8:	e0f4      	b.n	8005fb4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	461c      	mov	r4, r3
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	022b      	lsls	r3, r5, #8
 8005ddc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005de0:	0222      	lsls	r2, r4, #8
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	6849      	ldr	r1, [r1, #4]
 8005de6:	0849      	lsrs	r1, r1, #1
 8005de8:	2000      	movs	r0, #0
 8005dea:	4688      	mov	r8, r1
 8005dec:	4681      	mov	r9, r0
 8005dee:	eb12 0a08 	adds.w	sl, r2, r8
 8005df2:	eb43 0b09 	adc.w	fp, r3, r9
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e04:	4650      	mov	r0, sl
 8005e06:	4659      	mov	r1, fp
 8005e08:	f7fa f9e0 	bl	80001cc <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4613      	mov	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1a:	d308      	bcc.n	8005e2e <UART_SetConfig+0x2b2>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e22:	d204      	bcs.n	8005e2e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	60da      	str	r2, [r3, #12]
 8005e2c:	e0c2      	b.n	8005fb4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e34:	e0be      	b.n	8005fb4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3e:	d16a      	bne.n	8005f16 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d834      	bhi.n	8005eb2 <UART_SetConfig+0x336>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x2d4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e95 	.word	0x08005e95
 8005e58:	08005e9d 	.word	0x08005e9d
 8005e5c:	08005eb3 	.word	0x08005eb3
 8005e60:	08005ea3 	.word	0x08005ea3
 8005e64:	08005eb3 	.word	0x08005eb3
 8005e68:	08005eb3 	.word	0x08005eb3
 8005e6c:	08005eb3 	.word	0x08005eb3
 8005e70:	08005eab 	.word	0x08005eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fd ffc4 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8005e78:	61f8      	str	r0, [r7, #28]
        break;
 8005e7a:	e020      	b.n	8005ebe <UART_SetConfig+0x342>
 8005e7c:	efff69f3 	.word	0xefff69f3
 8005e80:	40008000 	.word	0x40008000
 8005e84:	40013800 	.word	0x40013800
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40004400 	.word	0x40004400
 8005e90:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e94:	f7fd ffca 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8005e98:	61f8      	str	r0, [r7, #28]
        break;
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <UART_SetConfig+0x454>)
 8005e9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fd ff15 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8005ea6:	61f8      	str	r0, [r7, #28]
        break;
 8005ea8:	e009      	b.n	8005ebe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eae:	61fb      	str	r3, [r7, #28]
        break;
 8005eb0:	e005      	b.n	8005ebe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d077      	beq.n	8005fb4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	005a      	lsls	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	441a      	add	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b0f      	cmp	r3, #15
 8005ede:	d916      	bls.n	8005f0e <UART_SetConfig+0x392>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d212      	bcs.n	8005f0e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f023 030f 	bic.w	r3, r3, #15
 8005ef0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	8afb      	ldrh	r3, [r7, #22]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	8afa      	ldrh	r2, [r7, #22]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	e052      	b.n	8005fb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f14:	e04e      	b.n	8005fb4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d827      	bhi.n	8005f6e <UART_SetConfig+0x3f2>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x3a8>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fd ff5a 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61f8      	str	r0, [r7, #28]
        break;
 8005f4e:	e014      	b.n	8005f7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fd ff6c 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <UART_SetConfig+0x454>)
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e00d      	b.n	8005f7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fd feb7 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8005f62:	61f8      	str	r0, [r7, #28]
        break;
 8005f64:	e009      	b.n	8005f7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e005      	b.n	8005f7a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f78:	bf00      	nop
    }

    if (pclk != 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d019      	beq.n	8005fb4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	085a      	lsrs	r2, r3, #1
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	441a      	add	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b0f      	cmp	r3, #15
 8005f98:	d909      	bls.n	8005fae <UART_SetConfig+0x432>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d205      	bcs.n	8005fae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60da      	str	r2, [r3, #12]
 8005fac:	e002      	b.n	8005fb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3728      	adds	r7, #40	; 0x28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fce:	bf00      	nop
 8005fd0:	00f42400 	.word	0x00f42400

08005fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01a      	beq.n	80060ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d10a      	bne.n	80060ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006128:	f7fb f886 	bl	8001238 <HAL_GetTick>
 800612c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d10e      	bne.n	800615a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f82d 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e023      	b.n	80061a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b04      	cmp	r3, #4
 8006166:	d10e      	bne.n	8006186 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f817 	bl	80061aa <UART_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e00d      	b.n	80061a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b09c      	sub	sp, #112	; 0x70
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	e0a5      	b.n	8006308 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	f000 80a1 	beq.w	8006308 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fb f837 	bl	8001238 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <UART_WaitOnFlagUntilTimeout+0x32>
 80061d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d13e      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061f0:	667b      	str	r3, [r7, #100]	; 0x64
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e6      	bne.n	80061dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	663b      	str	r3, [r7, #96]	; 0x60
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800622e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800623c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e067      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d04f      	beq.n	8006308 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006276:	d147      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006280:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062d4:	623a      	str	r2, [r7, #32]
 80062d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	69f9      	ldr	r1, [r7, #28]
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e010      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	429a      	cmp	r2, r3
 8006324:	f43f af4a 	beq.w	80061bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3770      	adds	r7, #112	; 0x70
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006332:	b480      	push	{r7}
 8006334:	b095      	sub	sp, #84	; 0x54
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	643b      	str	r3, [r7, #64]	; 0x40
 800635a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800635e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	61fb      	str	r3, [r7, #28]
   return(result);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d118      	bne.n	80063da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f023 0310 	bic.w	r3, r3, #16
 80063bc:	647b      	str	r3, [r7, #68]	; 0x44
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063ec:	bf00      	nop
 80063ee:	3754      	adds	r7, #84	; 0x54
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fb9a 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	60bb      	str	r3, [r7, #8]
   return(result);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	613b      	str	r3, [r7, #16]
   return(result);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fb66 	bl	8005b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006470:	bf00      	nop
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 f820 	bl	80064e4 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	0800655c 	.word	0x0800655c
 80064c8:	0800655c 	.word	0x0800655c
 80064cc:	0800655c 	.word	0x0800655c
 80064d0:	08006560 	.word	0x08006560

080064d4 <memset>:
 80064d4:	4402      	add	r2, r0
 80064d6:	4603      	mov	r3, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d100      	bne.n	80064de <memset+0xa>
 80064dc:	4770      	bx	lr
 80064de:	f803 1b01 	strb.w	r1, [r3], #1
 80064e2:	e7f9      	b.n	80064d8 <memset+0x4>

080064e4 <_init>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr

080064f0 <_fini>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr
